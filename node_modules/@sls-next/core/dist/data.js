"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDataReq = void 0;
const locale_1 = require("./locale");
const match_1 = require("./match");
/*
 * Get page name from data route
 */
const normaliseDataUri = (uri, buildId) => {
    const prefix = `/_next/data/${buildId}`;
    if (!uri.startsWith(prefix)) {
        return uri;
    }
    return uri
        .slice(prefix.length)
        .replace(/\.json$/, "")
        .replace(/^(\/index)?$/, "/");
};
/*
 * Get full data route uri from page name
 */
const fullDataUri = (uri, buildId) => {
    const prefix = `/_next/data/${buildId}`;
    if (uri === "/") {
        return `${prefix}/index.js`;
    }
    return `${prefix}${uri}.json`;
};
const handle404 = (manifest) => {
    if (manifest.pages.html.nonDynamic["/404"]) {
        return {
            isData: false,
            isStatic: true,
            file: "pages/404.html"
        };
    }
    return {
        isData: true,
        isRender: true,
        page: "pages/_error.js"
    };
};
/*
 * Handles a data route
 */
exports.handleDataReq = (uri, manifest, routesManifest, isPreview) => {
    var _a;
    const { buildId, pages } = manifest;
    const normalisedUri = normaliseDataUri(uri, buildId);
    if (pages.ssg.nonDynamic[normalisedUri] && !isPreview) {
        const ssg = pages.ssg.nonDynamic[normalisedUri];
        const route = (_a = ssg.srcRoute) !== null && _a !== void 0 ? _a : normalisedUri;
        return {
            isData: true,
            isStatic: true,
            file: uri,
            page: `pages${locale_1.dropLocaleFromPath(route, routesManifest)}.js`,
            revalidate: ssg.initialRevalidateSeconds
        };
    }
    if (pages.ssr.nonDynamic[normalisedUri]) {
        return {
            isData: true,
            isRender: true,
            page: pages.ssr.nonDynamic[normalisedUri]
        };
    }
    const dynamic = match_1.matchDynamicRoute(normalisedUri, pages.dynamic);
    const dynamicSSG = dynamic && pages.ssg.dynamic[dynamic];
    if (dynamicSSG) {
        return {
            isData: true,
            isStatic: true,
            file: fullDataUri(normalisedUri, buildId),
            page: `pages${locale_1.dropLocaleFromPath(dynamic, routesManifest)}.js`,
            fallback: dynamicSSG.fallback
        };
    }
    const dynamicSSR = dynamic && pages.ssr.dynamic[dynamic];
    if (dynamicSSR) {
        return {
            isData: true,
            isRender: true,
            page: dynamicSSR
        };
    }
    return handle404(manifest);
};
