"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePageReq = void 0;
const basepath_1 = require("./basepath");
const locale_1 = require("./locale");
const match_1 = require("./match");
const rewrite_1 = require("./rewrite");
const pageHtml = (localeUri) => {
    if (localeUri == "/") {
        return "pages/index.html";
    }
    return `pages${localeUri}.html`;
};
const handle404 = (manifest) => {
    if (manifest.pages.html.nonDynamic["/404"]) {
        return {
            isData: false,
            isStatic: true,
            file: "pages/404.html"
        };
    }
    return {
        isData: false,
        isRender: true,
        page: "pages/_error.js"
    };
};
exports.handlePageReq = (uri, manifest, routesManifest, isPreview, isRewrite) => {
    var _a;
    const { pages } = manifest;
    const localeUri = basepath_1.normalise(locale_1.addDefaultLocaleToPath(uri, routesManifest), routesManifest);
    if (pages.html.nonDynamic[localeUri]) {
        return {
            isData: false,
            isStatic: true,
            file: pages.html.nonDynamic[localeUri]
        };
    }
    if (pages.ssg.nonDynamic[localeUri] && !isPreview) {
        const ssg = pages.ssg.nonDynamic[localeUri];
        const route = (_a = ssg.srcRoute) !== null && _a !== void 0 ? _a : localeUri;
        return {
            isData: false,
            isStatic: true,
            file: pageHtml(localeUri),
            page: `pages${locale_1.dropLocaleFromPath(route, routesManifest)}.js`,
            revalidate: ssg.initialRevalidateSeconds
        };
    }
    if (pages.ssr.nonDynamic[localeUri]) {
        return {
            isData: false,
            isRender: true,
            page: pages.ssr.nonDynamic[localeUri]
        };
    }
    const rewrite = !isRewrite && rewrite_1.getRewritePath(uri, routesManifest);
    if (rewrite) {
        const [path, querystring] = rewrite.split("?");
        if (rewrite_1.isExternalRewrite(path)) {
            return {
                isExternal: true,
                path,
                querystring
            };
        }
        const route = exports.handlePageReq(path, manifest, routesManifest, isPreview, true);
        return {
            ...route,
            querystring
        };
    }
    const dynamic = match_1.matchDynamicRoute(localeUri, pages.dynamic);
    const dynamicSSG = dynamic && pages.ssg.dynamic[dynamic];
    if (dynamicSSG) {
        return {
            isData: false,
            isStatic: true,
            file: pageHtml(localeUri),
            page: `pages${locale_1.dropLocaleFromPath(dynamic, routesManifest)}.js`,
            fallback: dynamicSSG.fallback
        };
    }
    const dynamicSSR = dynamic && pages.ssr.dynamic[dynamic];
    if (dynamicSSR) {
        return {
            isData: false,
            isRender: true,
            page: dynamicSSR
        };
    }
    const dynamicHTML = dynamic && pages.html.dynamic[dynamic];
    if (dynamicHTML) {
        return {
            isData: false,
            isStatic: true,
            file: dynamicHTML
        };
    }
    return handle404(manifest);
};
