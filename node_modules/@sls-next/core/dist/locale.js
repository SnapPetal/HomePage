"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAcceptLanguageLocale = exports.dropLocaleFromPath = exports.addDefaultLocaleToPath = void 0;
function addDefaultLocaleToPath(path, routesManifest) {
    if (routesManifest.i18n) {
        const defaultLocale = routesManifest.i18n.defaultLocale;
        const locales = routesManifest.i18n.locales;
        const basePath = routesManifest.basePath;
        // If prefixed with a locale, return that path
        for (const locale of locales) {
            if (path === `${basePath}/${locale}` ||
                path.startsWith(`${basePath}/${locale}/`)) {
                return path;
            }
        }
        // Otherwise, prefix with default locale
        if (path === "/" || path === `${basePath}`) {
            return `${basePath}/${defaultLocale}`;
        }
        else {
            return path.replace(`${basePath}/`, `${basePath}/${defaultLocale}/`);
        }
    }
    return path;
}
exports.addDefaultLocaleToPath = addDefaultLocaleToPath;
function dropLocaleFromPath(path, routesManifest) {
    if (routesManifest.i18n) {
        const locales = routesManifest.i18n.locales;
        const basePath = routesManifest.basePath;
        // If prefixed with a locale, return path without
        for (const locale of locales) {
            const prefix = `${basePath}/${locale}`;
            if (path === prefix || path.startsWith(`${prefix}/`)) {
                return `${basePath}${path.slice(prefix.length)}`;
            }
        }
    }
    return path;
}
exports.dropLocaleFromPath = dropLocaleFromPath;
exports.getAcceptLanguageLocale = async (acceptLanguage, manifest, routesManifest) => {
    if (routesManifest.i18n) {
        const defaultLocale = routesManifest.i18n.defaultLocale;
        const locales = new Set(routesManifest.i18n.locales.map((locale) => locale.toLowerCase()));
        // Accept.language(header, locales) prefers the locales order,
        // so we ask for all to find the order preferred by user.
        const Accept = await Promise.resolve().then(() => __importStar(require("@hapi/accept")));
        for (const language of Accept.languages(acceptLanguage)) {
            const locale = language.toLowerCase();
            if (locale === defaultLocale) {
                break;
            }
            if (locales.has(locale)) {
                return `${routesManifest.basePath}/${locale}${manifest.trailingSlash ? "/" : ""}`;
            }
        }
    }
};
