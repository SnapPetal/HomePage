"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExternalRewrite = exports.getRewritePath = void 0;
const match_1 = require("./match");
const locale_1 = require("./locale");
/**
 * Get the rewrite of the given path, if it exists.
 * @param path
 * @param routesManifest
 */
function getRewritePath(uri, routesManifest) {
    const path = locale_1.addDefaultLocaleToPath(uri, routesManifest);
    const rewrites = routesManifest.rewrites;
    for (const rewrite of rewrites) {
        const match = match_1.matchPath(path, rewrite.source);
        if (!match) {
            continue;
        }
        const params = match.params;
        const destination = match_1.compileDestination(rewrite.destination, params);
        if (!destination) {
            return;
        }
        // Pass unused params to destination
        // except nextInternalLocale param since it's already in path prefix
        const querystring = Object.keys(params)
            .filter((key) => key !== "nextInternalLocale")
            .filter((key) => !rewrite.destination.endsWith(`:${key}`) &&
            !rewrite.destination.includes(`:${key}/`))
            .map((key) => {
            const param = params[key];
            if (typeof param === "string") {
                return `${key}=${param}`;
            }
            else {
                return param.map((val) => `${key}=${val}`).join("&");
            }
        })
            .filter((key) => key)
            .join("&");
        if (querystring) {
            const separator = destination.includes("?") ? "&" : "?";
            return `${destination}${separator}${querystring}`;
        }
        return destination;
    }
}
exports.getRewritePath = getRewritePath;
function isExternalRewrite(customRewrite) {
    return (customRewrite.startsWith("http://") || customRewrite.startsWith("https://"));
}
exports.isExternalRewrite = isExternalRewrite;
