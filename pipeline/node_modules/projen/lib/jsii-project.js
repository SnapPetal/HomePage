"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsiiProject = exports.Stability = void 0;
const jsii_docgen_1 = require("./jsii-docgen");
const tasks_1 = require("./tasks");
const typescript_1 = require("./typescript");
const DEFAULT_JSII_IMAGE = 'jsii/superchain';
const EMAIL_REGEX = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
const URL_REGEX = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/;
/**
 * @experimental
 */
var Stability;
(function (Stability) {
    Stability["EXPERIMENTAL"] = "experimental";
    Stability["STABLE"] = "stable";
    Stability["DEPRECATED"] = "deprecated";
})(Stability = exports.Stability || (exports.Stability = {}));
/**
 * (experimental) Multi-language jsii library project.
 *
 * @experimental
 */
class JsiiProject extends typescript_1.TypeScriptProject {
    /**
     * @experimental
     */
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g;
        const { authorEmail, authorUrl } = parseAuthorAddress(options);
        super({
            ...options,
            workflowContainerImage: (_a = options.workflowContainerImage) !== null && _a !== void 0 ? _a : DEFAULT_JSII_IMAGE,
            releaseToNpm: false,
            ...options,
            disableTsconfig: true,
            authorEmail,
            authorUrl,
        });
        const srcdir = this.srcdir;
        const libdir = this.libdir;
        this.addFields({ types: `${libdir}/index.d.ts` });
        // this is an unhelpful warning
        const jsiiFlags = [
            '--silence-warnings=reserved-word',
            '--no-fix-peer-dependencies',
        ].join(' ');
        const compatIgnore = (_b = options.compatIgnore) !== null && _b !== void 0 ? _b : '.compatignore';
        this.addFields({ stability: (_c = options.stability) !== null && _c !== void 0 ? _c : Stability.STABLE });
        if (options.stability === Stability.DEPRECATED) {
            this.addFields({ deprecated: true });
        }
        const compatTask = this.addTask('compat', {
            description: 'Perform API compatibility check against latest version',
            category: tasks_1.TaskCategory.RELEASE,
            exec: `jsii-diff npm:$(node -p "require(\'./package.json\').name") -k --ignore-file ${compatIgnore} || (echo "\nUNEXPECTED BREAKING CHANGES: add keys such as \'removed:constructs.Node.of\' to ${compatIgnore} to skip.\n" && exit 1)`,
        });
        const compat = (_d = options.compat) !== null && _d !== void 0 ? _d : false;
        if (compat) {
            this.compileTask.spawn(compatTask);
        }
        else {
            this.addTip('Set "compat" to "true" to enable automatic API breaking-change validation');
        }
        this.compileTask.reset(`jsii ${jsiiFlags}`);
        this.watchTask.reset(`jsii -w ${jsiiFlags}`);
        (_e = this.packageTask) === null || _e === void 0 ? void 0 : _e.reset('jsii-pacmak');
        const targets = {};
        this.addFields({
            jsii: {
                outdir: 'dist',
                targets,
                tsc: {
                    outDir: libdir,
                    rootDir: srcdir,
                },
            },
        });
        this.publishToNpm();
        let publishing = false;
        if (options.java) {
            targets.java = {
                package: options.java.javaPackage,
                maven: {
                    groupId: options.java.mavenGroupId,
                    artifactId: options.java.mavenArtifactId,
                },
            };
            this.publishToMaven();
            publishing = true;
        }
        if (options.python) {
            this.twineRegistryUrl = options.python.twineRegistryUrl;
            targets.python = {
                distName: options.python.distName,
                module: options.python.module,
            };
            this.publishToPyPi();
            publishing = true;
        }
        if (options.dotnet) {
            targets.dotnet = {
                namespace: options.dotnet.dotNetNamespace,
                packageId: options.dotnet.packageId,
            };
            this.publishToNuget();
            publishing = true;
        }
        if (!publishing) {
            this.addTip('Use the "java", "python" and "dotnet" options to define publishing settings');
        }
        this.addDevDeps('jsii', 'jsii-diff', 'jsii-pacmak', 'jsii-release');
        this.gitignore.exclude('.jsii', 'tsconfig.json');
        (_f = this.npmignore) === null || _f === void 0 ? void 0 : _f.include('.jsii');
        if ((_g = options.docgen) !== null && _g !== void 0 ? _g : true) {
            new jsii_docgen_1.JsiiDocgen(this);
        }
        // jsii updates .npmignore, so we make it writable
        if (this.npmignore) {
            this.npmignore.readonly = false;
        }
    }
    publishToNpm() {
        if (!this.releaseWorkflow) {
            return;
        }
        this.releaseWorkflow.addJobs({
            release_npm: {
                'name': 'Release to NPM',
                'needs': this.releaseWorkflowJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    {
                        name: 'Download build artifacts',
                        uses: 'actions/download-artifact@v1',
                        with: {
                            name: 'dist',
                        },
                    },
                    {
                        name: 'Release',
                        run: 'npx -p jsii-release jsii-release-npm',
                        env: {
                            NPM_TOKEN: '${{ secrets.NPM_TOKEN }}',
                            NPM_DIST_TAG: this.npmDistTag,
                            NPM_REGISTRY: this.npmRegistry,
                        },
                    },
                ],
            },
        });
    }
    publishToNuget() {
        if (!this.releaseWorkflow) {
            return;
        }
        this.releaseWorkflow.addJobs({
            release_nuget: {
                'name': 'Release to Nuget',
                'needs': this.releaseWorkflowJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    {
                        name: 'Download build artifacts',
                        uses: 'actions/download-artifact@v1',
                        with: {
                            name: 'dist',
                        },
                    },
                    {
                        name: 'Release',
                        run: 'npx -p jsii-release jsii-release-nuget',
                        env: {
                            NUGET_API_KEY: '${{ secrets.NUGET_API_KEY }}',
                        },
                    },
                ],
            },
        });
    }
    publishToMaven() {
        if (!this.releaseWorkflow) {
            return;
        }
        this.releaseWorkflow.addJobs({
            release_maven: {
                'name': 'Release to Maven',
                'needs': this.releaseWorkflowJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    {
                        name: 'Download build artifacts',
                        uses: 'actions/download-artifact@v1',
                        with: {
                            name: 'dist',
                        },
                    },
                    {
                        name: 'Release',
                        run: 'npx -p jsii-release jsii-release-maven',
                        env: {
                            MAVEN_GPG_PRIVATE_KEY: '${{ secrets.MAVEN_GPG_PRIVATE_KEY }}',
                            MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: '${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}',
                            MAVEN_PASSWORD: '${{ secrets.MAVEN_PASSWORD }}',
                            MAVEN_USERNAME: '${{ secrets.MAVEN_USERNAME }}',
                            MAVEN_STAGING_PROFILE_ID: '${{ secrets.MAVEN_STAGING_PROFILE_ID }}',
                        },
                    },
                ],
            },
        });
    }
    publishToPyPi() {
        if (!this.releaseWorkflow) {
            return;
        }
        this.releaseWorkflow.addJobs({
            release_pypi: {
                'name': 'Release to PyPi',
                'needs': this.releaseWorkflowJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    {
                        name: 'Download build artifacts',
                        uses: 'actions/download-artifact@v1',
                        with: {
                            name: 'dist',
                        },
                    },
                    {
                        name: 'Release',
                        run: 'npx -p jsii-release jsii-release-pypi',
                        env: {
                            TWINE_USERNAME: '${{ secrets.TWINE_USERNAME }}',
                            TWINE_PASSWORD: '${{ secrets.TWINE_PASSWORD }}',
                            ...(this.twineRegistryUrl && { TWINE_REPOSITORY_URL: this.twineRegistryUrl }),
                        },
                    },
                ],
            },
        });
    }
}
exports.JsiiProject = JsiiProject;
function parseAuthorAddress(options) {
    let authorEmail = options.authorEmail;
    let authorUrl = options.authorUrl;
    if (options.authorAddress) {
        if (options.authorEmail) {
            throw new Error('authorEmail is deprecated and cannot be used in conjunction with authorAddress');
        }
        if (options.authorUrl) {
            throw new Error('authorUrl is deprecated and cannot be used in conjunction with authorAddress.');
        }
        if (EMAIL_REGEX.test(options.authorAddress)) {
            authorEmail = options.authorAddress;
        }
        else if (URL_REGEX.test(options.authorAddress)) {
            authorUrl = options.authorAddress;
        }
        else {
            throw new Error(`authorAddress must be either an email address or a URL: ${options.authorAddress}`);
        }
    }
    return { authorEmail, authorUrl };
}
//# sourceMappingURL=data:application/json;base64,