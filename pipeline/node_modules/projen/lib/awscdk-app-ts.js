"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsCdkTypeScriptApp = exports.CdkApprovalLevel = void 0;
const path = require("path");
const fs = require("fs-extra");
const component_1 = require("./component");
const json_1 = require("./json");
const tasks_1 = require("./tasks");
const typescript_1 = require("./typescript");
/**
 * @experimental
 */
var CdkApprovalLevel;
(function (CdkApprovalLevel) {
    CdkApprovalLevel["NEVER"] = "never";
    CdkApprovalLevel["ANY_CHANGE"] = "any-change";
    CdkApprovalLevel["BROADENING"] = "broadening";
})(CdkApprovalLevel = exports.CdkApprovalLevel || (exports.CdkApprovalLevel = {}));
/**
 * (experimental) AWS CDK app in TypeScript.
 *
 * @experimental
 * @pjid awscdk-app-ts
 */
class AwsCdkTypeScriptApp extends typescript_1.TypeScriptAppProject {
    /**
     * @experimental
     */
    constructor(options) {
        var _a, _b, _c, _d, _e;
        super({
            ...options,
            sampleCode: false,
        });
        // encode a hidden assumption further down the chain
        if (this.srcdir !== 'src') {
            throw new Error('sources are expected under the "src" directory');
        }
        // encode a hidden assumption further down the chain
        if (this.testdir !== 'test') {
            throw new Error('test sources are expected under the "test" directory');
        }
        this.appEntrypoint = (_a = options.appEntrypoint) !== null && _a !== void 0 ? _a : 'main.ts';
        this.cdkVersion = options.cdkVersionPinning ? options.cdkVersion : `^${options.cdkVersion}`;
        // CLI
        this.addDevDeps(this.formatModuleSpec('aws-cdk'));
        this.addCdkDependency('@aws-cdk/assert');
        this.addCdkDependency('@aws-cdk/core');
        this.addCdkDependency(...(_b = options.cdkDependencies) !== null && _b !== void 0 ? _b : []);
        const synth = this.addTask('synth', {
            description: 'Synthesizes your cdk app into cdk.out (part of "yarn build")',
            category: tasks_1.TaskCategory.BUILD,
            exec: 'cdk synth',
        });
        this.addTask('deploy', {
            description: 'Deploys your CDK app to the AWS cloud',
            category: tasks_1.TaskCategory.RELEASE,
            exec: 'cdk deploy',
        });
        this.addTask('destroy', {
            description: 'Destroys your cdk app in the AWS cloud',
            category: tasks_1.TaskCategory.RELEASE,
            exec: 'cdk destroy',
        });
        this.addTask('diff', {
            description: 'Diffs the currently deployed app against your code',
            category: tasks_1.TaskCategory.MISC,
            exec: 'cdk diff',
        });
        // no compile step because we do all of it in typescript directly
        this.compileTask.reset();
        this.removeScript('watch'); // because we use ts-node
        // add synth to the build
        this.buildTask.spawn(synth);
        this.cdkConfig = {
            app: `npx ts-node --prefer-ts-exts ${path.join(this.srcdir, this.appEntrypoint)}`,
        };
        if (options.context) {
            this.cdkConfig.context = { ...options.context };
        }
        if (options.requireApproval) {
            this.cdkConfig.requireApproval = options.requireApproval;
        }
        this.gitignore.exclude('cdk.out/');
        this.gitignore.exclude('.cdk.staging/');
        this.gitignore.exclude('.parcel-cache/');
        (_c = this.npmignore) === null || _c === void 0 ? void 0 : _c.exclude('cdk.out/');
        (_d = this.npmignore) === null || _d === void 0 ? void 0 : _d.exclude('.cdk.staging/');
        if (this.tsconfig) {
            this.tsconfig.exclude.push('cdk.out');
        }
        this.addDevDeps('ts-node');
        new json_1.JsonFile(this, 'cdk.json', {
            obj: this.cdkConfig,
        });
        if ((_e = options.sampleCode) !== null && _e !== void 0 ? _e : true) {
            new SampleCode(this);
        }
    }
    /**
     * (experimental) Adds an AWS CDK module dependencies.
     *
     * @param modules The list of modules to depend on.
     * @experimental
     */
    addCdkDependency(...modules) {
        this.addDeps(...modules.map(m => this.formatModuleSpec(m)));
    }
    formatModuleSpec(module) {
        return `${module}@${this.cdkVersion}`;
    }
}
exports.AwsCdkTypeScriptApp = AwsCdkTypeScriptApp;
class SampleCode extends component_1.Component {
    constructor(project) {
        super(project);
        this.appProject = project;
    }
    synthesize() {
        const outdir = this.project.outdir;
        const srcdir = path.join(outdir, this.appProject.srcdir);
        if (fs.pathExistsSync(srcdir) && fs.readdirSync(srcdir).filter(x => x.endsWith('.ts'))) {
            return;
        }
        const srcCode = `import { App, Construct, Stack, StackProps } from '@aws-cdk/core';

export class MyStack extends Stack {
  constructor(scope: Construct, id: string, props: StackProps = {}) {
    super(scope, id, props);

    // define resources here...
  }
}

// for development, use account/region from cdk cli
const devEnv = {
  account: process.env.CDK_DEFAULT_ACCOUNT,
  region: process.env.CDK_DEFAULT_REGION,
};

const app = new App();

new MyStack(app, 'my-stack-dev', { env: devEnv });
// new MyStack(app, 'my-stack-prod', { env: prodEnv });

app.synth();`;
        fs.mkdirpSync(srcdir);
        fs.writeFileSync(path.join(srcdir, this.appProject.appEntrypoint), srcCode);
        const testdir = path.join(outdir, this.appProject.testdir);
        if (fs.pathExistsSync(testdir) && fs.readdirSync(testdir).filter(x => x.endsWith('.ts'))) {
            return;
        }
        const appEntrypointName = path.basename(this.appProject.appEntrypoint, '.ts');
        const testCode = `import '@aws-cdk/assert/jest';
import { App } from '@aws-cdk/core';
import { MyStack } from '../src/${appEntrypointName}';

test('Snapshot', () => {
  const app = new App();
  const stack = new MyStack(app, 'test');

  expect(stack).not.toHaveResource('AWS::S3::Bucket');
  expect(app.synth().getStackArtifact(stack.artifactId).template).toMatchSnapshot();
});`;
        fs.mkdirpSync(testdir);
        fs.writeFileSync(path.join(testdir, `${appEntrypointName}.test.ts`), testCode);
    }
}
//# sourceMappingURL=data:application/json;base64,