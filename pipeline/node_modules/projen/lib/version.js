"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version = void 0;
const fs = require("fs-extra");
const component_1 = require("./component");
const json_1 = require("./json");
const tasks_1 = require("./tasks");
const VERSION_FILE = 'version.json';
/**
 * @experimental
 */
class Version extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, options) {
        var _a;
        super(project);
        // this command determines if there were any changes since the last release
        // (the top-most commit is not a bump). it is used as a condition for both
        // the `bump` and the `release` tasks.
        const changesSinceLastRelease = '! git log --oneline -1 | grep -q "chore(release):"';
        this.bumpTask = project.addTask('bump', {
            description: 'Commits a bump to the package version based on conventional commits',
            category: tasks_1.TaskCategory.RELEASE,
            exec: 'standard-version',
            condition: changesSinceLastRelease,
        });
        const release = project.addTask('release', {
            description: `Bumps version & push to ${options.releaseBranch}`,
            category: tasks_1.TaskCategory.RELEASE,
            condition: changesSinceLastRelease,
        });
        release.spawn(this.bumpTask);
        release.exec(`git push --follow-tags origin ${options.releaseBranch}`);
        project.addDevDeps('standard-version@^9.0.0');
        (_a = project.npmignore) === null || _a === void 0 ? void 0 : _a.exclude('/.versionrc.json');
        project.gitignore.include(VERSION_FILE);
        new json_1.JsonFile(project, '.versionrc.json', {
            obj: {
                packageFiles: [{ filename: VERSION_FILE, type: 'json' }],
                bumpFiles: [{ filename: VERSION_FILE, type: 'json' }],
                commitAll: true,
                scripts: {
                    // run projen after release to update package.json
                    postbump: `${project.projenCommand} && git add .`,
                },
            },
        });
    }
    /**
     * (experimental) Returns the current version of the project.
     *
     * @experimental
     */
    resolveVersion(outdir) {
        const versionFile = `${outdir}/${VERSION_FILE}`;
        if (!fs.existsSync(versionFile)) {
            if (!fs.existsSync(outdir)) {
                fs.mkdirpSync(outdir);
            }
            fs.writeFileSync(versionFile, JSON.stringify({ version: '0.0.0' }));
        }
        return JSON.parse(fs.readFileSync(versionFile, 'utf-8')).version;
    }
}
exports.Version = Version;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUErQjtBQUMvQiwyQ0FBd0M7QUFDeEMsaUNBQWtDO0FBRWxDLG1DQUE2QztBQUU3QyxNQUFNLFlBQVksR0FBRyxjQUFjLENBQUM7Ozs7QUFTcEMsTUFBYSxPQUFRLFNBQVEscUJBQVM7Ozs7SUFJcEMsWUFBWSxPQUFvQixFQUFFLE9BQXVCOztRQUN2RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFZiwyRUFBMkU7UUFDM0UsMEVBQTBFO1FBQzFFLHNDQUFzQztRQUN0QyxNQUFNLHVCQUF1QixHQUFHLG9EQUFvRCxDQUFDO1FBRXJGLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdEMsV0FBVyxFQUFFLHFFQUFxRTtZQUNsRixRQUFRLEVBQUUsb0JBQVksQ0FBQyxPQUFPO1lBQzlCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsU0FBUyxFQUFFLHVCQUF1QjtTQUNuQyxDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUN6QyxXQUFXLEVBQUUsMkJBQTJCLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDL0QsUUFBUSxFQUFFLG9CQUFZLENBQUMsT0FBTztZQUM5QixTQUFTLEVBQUUsdUJBQXVCO1NBQ25DLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBRXZFLE9BQU8sQ0FBQyxVQUFVLENBQ2hCLHlCQUF5QixDQUMxQixDQUFDO1FBRUYsTUFBQSxPQUFPLENBQUMsU0FBUywwQ0FBRSxPQUFPLENBQUMsa0JBQWtCLEVBQUU7UUFDL0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFeEMsSUFBSSxlQUFRLENBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFO1lBQ3ZDLEdBQUcsRUFBRTtnQkFDSCxZQUFZLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUN4RCxTQUFTLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO2dCQUNyRCxTQUFTLEVBQUUsSUFBSTtnQkFDZixPQUFPLEVBQUU7b0JBQ1Asa0RBQWtEO29CQUNsRCxRQUFRLEVBQUUsR0FBRyxPQUFPLENBQUMsYUFBYSxlQUFlO2lCQUNsRDthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBS00sY0FBYyxDQUFDLE1BQWM7UUFDbEMsTUFBTSxXQUFXLEdBQUcsR0FBRyxNQUFNLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkI7WUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyRTtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNuRSxDQUFDO0NBQ0Y7QUE5REQsMEJBOERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgSnNvbkZpbGUgfSBmcm9tICcuL2pzb24nO1xuaW1wb3J0IHsgTm9kZVByb2plY3QgfSBmcm9tICcuL25vZGUtcHJvamVjdCc7XG5pbXBvcnQgeyBUYXNrLCBUYXNrQ2F0ZWdvcnkgfSBmcm9tICcuL3Rhc2tzJztcblxuY29uc3QgVkVSU0lPTl9GSUxFID0gJ3ZlcnNpb24uanNvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVyc2lvbk9wdGlvbnMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgcmVsZWFzZUJyYW5jaDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVmVyc2lvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgcHVibGljIHJlYWRvbmx5IGJ1bXBUYXNrOiBUYXNrO1xuXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IE5vZGVQcm9qZWN0LCBvcHRpb25zOiBWZXJzaW9uT3B0aW9ucykge1xuICAgIHN1cGVyKHByb2plY3QpO1xuXG4gICAgLy8gdGhpcyBjb21tYW5kIGRldGVybWluZXMgaWYgdGhlcmUgd2VyZSBhbnkgY2hhbmdlcyBzaW5jZSB0aGUgbGFzdCByZWxlYXNlXG4gICAgLy8gKHRoZSB0b3AtbW9zdCBjb21taXQgaXMgbm90IGEgYnVtcCkuIGl0IGlzIHVzZWQgYXMgYSBjb25kaXRpb24gZm9yIGJvdGhcbiAgICAvLyB0aGUgYGJ1bXBgIGFuZCB0aGUgYHJlbGVhc2VgIHRhc2tzLlxuICAgIGNvbnN0IGNoYW5nZXNTaW5jZUxhc3RSZWxlYXNlID0gJyEgZ2l0IGxvZyAtLW9uZWxpbmUgLTEgfCBncmVwIC1xIFwiY2hvcmUocmVsZWFzZSk6XCInO1xuXG4gICAgdGhpcy5idW1wVGFzayA9IHByb2plY3QuYWRkVGFzaygnYnVtcCcsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiAnQ29tbWl0cyBhIGJ1bXAgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBiYXNlZCBvbiBjb252ZW50aW9uYWwgY29tbWl0cycsXG4gICAgICBjYXRlZ29yeTogVGFza0NhdGVnb3J5LlJFTEVBU0UsXG4gICAgICBleGVjOiAnc3RhbmRhcmQtdmVyc2lvbicsXG4gICAgICBjb25kaXRpb246IGNoYW5nZXNTaW5jZUxhc3RSZWxlYXNlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVsZWFzZSA9IHByb2plY3QuYWRkVGFzaygncmVsZWFzZScsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBgQnVtcHMgdmVyc2lvbiAmIHB1c2ggdG8gJHtvcHRpb25zLnJlbGVhc2VCcmFuY2h9YCxcbiAgICAgIGNhdGVnb3J5OiBUYXNrQ2F0ZWdvcnkuUkVMRUFTRSxcbiAgICAgIGNvbmRpdGlvbjogY2hhbmdlc1NpbmNlTGFzdFJlbGVhc2UsXG4gICAgfSk7XG5cbiAgICByZWxlYXNlLnNwYXduKHRoaXMuYnVtcFRhc2spO1xuICAgIHJlbGVhc2UuZXhlYyhgZ2l0IHB1c2ggLS1mb2xsb3ctdGFncyBvcmlnaW4gJHtvcHRpb25zLnJlbGVhc2VCcmFuY2h9YCk7XG5cbiAgICBwcm9qZWN0LmFkZERldkRlcHMoXG4gICAgICAnc3RhbmRhcmQtdmVyc2lvbkBeOS4wLjAnLFxuICAgICk7XG5cbiAgICBwcm9qZWN0Lm5wbWlnbm9yZT8uZXhjbHVkZSgnLy52ZXJzaW9ucmMuanNvbicpO1xuICAgIHByb2plY3QuZ2l0aWdub3JlLmluY2x1ZGUoVkVSU0lPTl9GSUxFKTtcblxuICAgIG5ldyBKc29uRmlsZShwcm9qZWN0LCAnLnZlcnNpb25yYy5qc29uJywge1xuICAgICAgb2JqOiB7XG4gICAgICAgIHBhY2thZ2VGaWxlczogW3sgZmlsZW5hbWU6IFZFUlNJT05fRklMRSwgdHlwZTogJ2pzb24nIH1dLFxuICAgICAgICBidW1wRmlsZXM6IFt7IGZpbGVuYW1lOiBWRVJTSU9OX0ZJTEUsIHR5cGU6ICdqc29uJyB9XSxcbiAgICAgICAgY29tbWl0QWxsOiB0cnVlLFxuICAgICAgICBzY3JpcHRzOiB7XG4gICAgICAgICAgLy8gcnVuIHByb2plbiBhZnRlciByZWxlYXNlIHRvIHVwZGF0ZSBwYWNrYWdlLmpzb25cbiAgICAgICAgICBwb3N0YnVtcDogYCR7cHJvamVjdC5wcm9qZW5Db21tYW5kfSAmJiBnaXQgYWRkIC5gLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlc29sdmVWZXJzaW9uKG91dGRpcjogc3RyaW5nKSB7XG4gICAgY29uc3QgdmVyc2lvbkZpbGUgPSBgJHtvdXRkaXJ9LyR7VkVSU0lPTl9GSUxFfWA7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHZlcnNpb25GaWxlKSkge1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKG91dGRpcikpIHtcbiAgICAgICAgZnMubWtkaXJwU3luYyhvdXRkaXIpO1xuICAgICAgfVxuICAgICAgZnMud3JpdGVGaWxlU3luYyh2ZXJzaW9uRmlsZSwgSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAnMC4wLjAnIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmModmVyc2lvbkZpbGUsICd1dGYtOCcpKS52ZXJzaW9uO1xuICB9XG59XG4iXX0=