"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskRuntime = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const chalk = require("chalk");
const logging = require("../logging");
const tasks_1 = require("./tasks");
/**
 * (experimental) The runtime component of the tasks engine.
 *
 * @experimental
 */
class TaskRuntime {
    /**
     * @experimental
     */
    constructor(workdir) {
        this.workdir = workdir;
        const manifestPath = path_1.join(this.workdir, tasks_1.Tasks.MANIFEST_FILE);
        this.manifest = fs_1.existsSync(manifestPath)
            ? JSON.parse(fs_1.readFileSync(manifestPath, 'utf-8'))
            : { tasks: {} };
    }
    /**
     * (experimental) The tasks in this project.
     *
     * @experimental
     */
    get tasks() {
        var _a;
        return Object.values((_a = this.manifest.tasks) !== null && _a !== void 0 ? _a : {});
    }
    /**
     * (experimental) Find a task by name, or `undefined` if not found.
     *
     * @experimental
     */
    tryFindTask(name) {
        if (!this.manifest.tasks) {
            return undefined;
        }
        return this.manifest.tasks[name];
    }
    /**
     * (experimental) Runs the task.
     *
     * @param name The task name.
     * @experimental
     */
    runTask(name, parents = []) {
        const task = this.tryFindTask(name);
        if (!task) {
            throw new Error(`cannot find command ${task}`);
        }
        new RunTask(this, task, parents);
    }
}
exports.TaskRuntime = TaskRuntime;
class RunTask {
    constructor(runtime, task, parents = []) {
        var _a;
        this.runtime = runtime;
        this.task = task;
        this.env = {};
        this.parents = parents;
        this.env = { ...process.env };
        this.env = this.resolveEnvironment();
        // evaluate condition
        if (!this.evalCondition(task)) {
            this.log('condition exited with non-zero - skipping');
            return;
        }
        for (const step of (_a = task.steps) !== null && _a !== void 0 ? _a : []) {
            if (step.spawn) {
                this.runtime.runTask(step.spawn, [...this.parents, this.task.name]);
            }
            if (step.exec) {
                const exec = step.exec;
                this.log(exec);
                const result = this.shell(exec);
                if (result.status !== 0) {
                    throw new Error(`Task "${this.fullname}" failed when executing "${exec}" (cwd: ${path_1.resolve(this.runtime.workdir)})`);
                }
            }
        }
    }
    /**
     * Determines if a task should be executed based on "condition".
     *
     * @returns true if the task should be executed or false if the condition
     * evaluates to false (exits with non-zero), indicating that the task should
     * be skipped.
     */
    evalCondition(task) {
        // no condition, carry on
        if (!task.condition) {
            return true;
        }
        this.log(`condition: ${task.condition}`);
        const result = this.shell(task.condition);
        if (result.status === 0) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Renders the runtime environment for a task. Namely, it supports this syntax
     * `$(xx)` for allowing environment to be evaluated by executing a shell
     * command and obtaining its result.
     *
     * @param env The user-defined environment
     */
    resolveEnvironment() {
        var _a, _b, _c, _d;
        const env = {
            ...(_a = this.runtime.manifest.env) !== null && _a !== void 0 ? _a : {},
            ...(_b = this.task.env) !== null && _b !== void 0 ? _b : {},
        };
        const output = {
            ...process.env,
        };
        for (const [key, value] of Object.entries(env !== null && env !== void 0 ? env : {})) {
            if (value.startsWith('$(') && value.endsWith(')')) {
                const query = value.substring(2, value.length - 1);
                const result = this.shellEval(query);
                if (result.status !== 0) {
                    throw new Error(`unable to evaluate environment variable ${key}=${value}: ${(_d = (_c = result.stderr) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : 'unknown error'}`);
                }
                output[key] = result.stdout.toString('utf-8').trim();
            }
            else {
                output[key] = value;
            }
        }
        return output;
    }
    /**
     * Returns the "full name" of the task which includes all it's parent task names concatenated by chevrons.
     */
    get fullname() {
        return [...this.parents, this.task.name].join(' Â» ');
    }
    log(...args) {
        logging.verbose(`${chalk.underline(this.fullname)} |`, ...args);
    }
    shell(command, options = {}) {
        return child_process_1.spawnSync(command, { cwd: this.runtime.workdir, shell: true, stdio: 'inherit', env: this.env, ...options });
    }
    shellEval(command, options = {}) {
        return this.shell(command, { stdio: ['inherit', 'pipe', 'inherit'], ...options });
    }
}
//# sourceMappingURL=data:application/json;base64,