"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskCategory = exports.Task = void 0;
/**
 * (experimental) A task that can be performed on the project.
 *
 * Modeled as a series of shell
 * commands and subtasks.
 *
 * @experimental
 */
class Task {
    /**
     * @experimental
     */
    constructor(tasks, name, props = {}) {
        var _a;
        this.tasks = tasks;
        this.name = name;
        this.description = props.description;
        this.category = props.category;
        this.condition = props.condition;
        this._env = (_a = props.env) !== null && _a !== void 0 ? _a : {};
        this._steps = [];
        if (props.exec) {
            this.exec(props.exec);
        }
    }
    /**
     * (experimental) Reset the task so it no longer has any commands.
     *
     * @param command the first command to add to the task after it was cleared.
     * @experimental
     */
    reset(command) {
        while (this._steps.length) {
            this._steps.shift();
        }
        if (command) {
            this.exec(command);
        }
    }
    /**
     * (experimental) Executes a shell command.
     *
     * @param command Shell command.
     * @experimental
     */
    exec(command, options = {}) {
        this._steps.push({ exec: command, ...options });
    }
    /**
     * (experimental) Adds a command at the beginning of the task.
     *
     * @param shell The command to add.
     * @experimental
     */
    prepend(shell, options = {}) {
        this._steps.unshift({
            exec: shell,
            ...options,
        });
    }
    /**
     * (experimental) Spawns a sub-task.
     *
     * @param subtask The subtask to execute.
     * @experimental
     */
    spawn(subtask, options = {}) {
        this._steps.push({ spawn: subtask.name, ...options });
    }
    /**
     * (experimental) Adds an environment variable to this task.
     *
     * @param name The name of the variable.
     * @param value The value.
     * @experimental
     */
    env(name, value) {
        this._env[name] = value;
    }
    /**
     * (experimental) Returns an immutable copy of all the step specifications of the task.
     *
     * @experimental
     */
    get steps() {
        return [...this._steps];
    }
    /**
     * (experimental) Renders this task as a single shell command.
     *
     * @experimental
     */
    toShellCommand() {
        const cmd = new Array();
        for (const step of this.steps) {
            if (step.name) {
                cmd.push(`echo ${step.name}`);
            }
            if (step.exec) {
                cmd.push(step.exec);
            }
            if (step.spawn) {
                const subtask = this.tasks.tryFind(step.spawn);
                if (!subtask) {
                    throw new Error(`unable to resolve subtask ${step.spawn}`);
                }
                cmd.push(`( ${subtask.toShellCommand()} )`);
            }
        }
        const allCommands = cmd.map(c => `( ${c} )`).join(' && ');
        const withCondition = this.condition ? `! ( ${this.condition} ) || ( ${allCommands} )` : allCommands;
        const env = {
            ...this.tasks.env,
            ...this._env,
        };
        const lines = new Array();
        for (const [k, v] of Object.entries(env)) {
            lines.push(`${k}="${v}"; `);
        }
        return `( ${lines.join('')} ${withCondition} )`;
    }
    /**
     * Renders a task spec into the manifest.
     *
     * @internal
     */
    _renderSpec() {
        return {
            name: this.name,
            category: this.category,
            description: this.description,
            env: this._env,
            steps: this._steps,
            condition: this.condition,
        };
    }
}
exports.Task = Task;
/**
 * @experimental
 */
var TaskCategory;
(function (TaskCategory) {
    TaskCategory["BUILD"] = "00.build";
    TaskCategory["TEST"] = "10.test";
    TaskCategory["RELEASE"] = "20.release";
    TaskCategory["MAINTAIN"] = "30.maintain";
    TaskCategory["MISC"] = "99.misc";
})(TaskCategory = exports.TaskCategory || (exports.TaskCategory = {}));
//# sourceMappingURL=data:application/json;base64,