import { TaskSpec, TaskStep, TaskStepOptions } from './model';
import { Tasks } from './tasks';
/**
 * @experimental
 */
export interface TaskCommonOptions {
    /**
     * (experimental) The description of this build command.
     *
     * @default - the task name
     * @experimental
     */
    readonly description?: string;
    /**
     * (experimental) Category for start menu.
     *
     * @default TaskCategory.MISC
     * @experimental
     */
    readonly category?: TaskCategory;
    /**
     * (experimental) Defines environment variables for the execution of this task.
     *
     * Values in this map will be evaluated in a shell, so you can do stuff like `$(echo "foo")`.
     *
     * @default {}
     * @experimental
     */
    readonly env?: {
        [name: string]: string;
    };
    /**
     * (experimental) A shell command which determines if the this task should be executed.
     *
     * If
     * the program exits with a zero exit code, steps will be executed. A non-zero
     * code means that task will be skipped.
     *
     * @experimental
     */
    readonly condition?: string;
}
/**
 * @experimental
 */
export interface TaskOptions extends TaskCommonOptions {
    /**
     * (experimental) Shell command to execute as the first command of the task.
     *
     * @default - add steps using `task.exec(command)` or `task.spawn(subtask)`
     * @experimental
     */
    readonly exec?: string;
}
/**
 * (experimental) A task that can be performed on the project.
 *
 * Modeled as a series of shell
 * commands and subtasks.
 *
 * @experimental
 */
export declare class Task {
    /**
     * (experimental) Task name.
     *
     * @experimental
     */
    readonly name: string;
    /**
     * (experimental) The description of the task.
     *
     * @experimental
     */
    readonly description?: string;
    /**
     * (experimental) The start menu category of the task.
     *
     * @experimental
     */
    readonly category?: TaskCategory;
    /**
     * (experimental) A command to execute which determines if the task should be skipped.
     *
     * If it
     * returns a zero exit code, the task will not be executed.
     *
     * @experimental
     */
    readonly condition?: string;
    private readonly _steps;
    private readonly _env;
    private readonly tasks;
    /**
     * @experimental
     */
    constructor(tasks: Tasks, name: string, props?: TaskOptions);
    /**
     * (experimental) Reset the task so it no longer has any commands.
     *
     * @param command the first command to add to the task after it was cleared.
     * @experimental
     */
    reset(command?: string): void;
    /**
     * (experimental) Executes a shell command.
     *
     * @param command Shell command.
     * @experimental
     */
    exec(command: string, options?: TaskStepOptions): void;
    /**
     * (experimental) Adds a command at the beginning of the task.
     *
     * @param shell The command to add.
     * @experimental
     */
    prepend(shell: string, options?: TaskStepOptions): void;
    /**
     * (experimental) Spawns a sub-task.
     *
     * @param subtask The subtask to execute.
     * @experimental
     */
    spawn(subtask: Task, options?: TaskStepOptions): void;
    /**
     * (experimental) Adds an environment variable to this task.
     *
     * @param name The name of the variable.
     * @param value The value.
     * @experimental
     */
    env(name: string, value: string): void;
    /**
     * (experimental) Returns an immutable copy of all the step specifications of the task.
     *
     * @experimental
     */
    get steps(): TaskStep[];
    /**
     * (experimental) Renders this task as a single shell command.
     *
     * @experimental
     */
    toShellCommand(): string;
    /**
     * Renders a task spec into the manifest.
     *
     * @internal
     */
    _renderSpec(): TaskSpec;
}
/**
 * @experimental
 */
export declare enum TaskCategory {
    /**
     * @experimental
     */
    BUILD = "00.build",
    /**
     * @experimental
     */
    TEST = "10.test",
    /**
     * @experimental
     */
    RELEASE = "20.release",
    /**
     * @experimental
     */
    MAINTAIN = "30.maintain",
    /**
     * @experimental
     */
    MISC = "99.misc"
}
