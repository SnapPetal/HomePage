"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeProject = exports.AutoRelease = exports.NpmTaskExecution = exports.NodePackageManager = void 0;
const path = require("path");
const fs = require("fs-extra");
const common_1 = require("./common");
const ignore_file_1 = require("./ignore-file");
const jest_1 = require("./jest");
const json_1 = require("./json");
const license_1 = require("./license");
const logging = require("./logging");
const project_1 = require("./project");
const projen_upgrade_1 = require("./projen-upgrade");
const semver_1 = require("./semver");
const tasks_1 = require("./tasks");
const util_1 = require("./util");
const version_1 = require("./version");
const PROJEN_SCRIPT = 'projen';
/**
 * (experimental) The node package manager to use.
 *
 * @experimental
 */
var NodePackageManager;
(function (NodePackageManager) {
    NodePackageManager["YARN"] = "yarn";
    NodePackageManager["NPM"] = "npm";
})(NodePackageManager = exports.NodePackageManager || (exports.NodePackageManager = {}));
/**
 * @experimental
 */
var NpmTaskExecution;
(function (NpmTaskExecution) {
    NpmTaskExecution["PROJEN"] = "projen";
    NpmTaskExecution["SHELL"] = "shell";
})(NpmTaskExecution = exports.NpmTaskExecution || (exports.NpmTaskExecution = {}));
/**
 * (experimental) Automatic bump modes.
 *
 * @experimental
 */
var AutoRelease;
(function (AutoRelease) {
    AutoRelease[AutoRelease["EVERY_COMMIT"] = 0] = "EVERY_COMMIT";
    AutoRelease[AutoRelease["DAILY"] = 1] = "DAILY";
})(AutoRelease = exports.AutoRelease || (exports.AutoRelease = {}));
/**
 * (experimental) Node.js project.
 *
 * @experimental
 */
class NodeProject extends project_1.Project {
    /**
     * @experimental
     */
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24;
        super(options);
        this.peerDependencies = {};
        this.devDependencies = {};
        this.dependencies = {};
        this.bundledDependencies = [];
        this.bin = {};
        this.scripts = {};
        this.allowLibraryDependencies = (_a = options.allowLibraryDependencies) !== null && _a !== void 0 ? _a : true;
        this.peerDependencyOptions = (_b = options.peerDependencyOptions) !== null && _b !== void 0 ? _b : {};
        this.packageManager = (_c = options.packageManager) !== null && _c !== void 0 ? _c : NodePackageManager.YARN;
        this.npmTaskExecution = (_d = options.npmTaskExecution) !== null && _d !== void 0 ? _d : NpmTaskExecution.PROJEN;
        this.runScriptCommand = (() => {
            switch (this.packageManager) {
                case NodePackageManager.NPM: return 'npm run';
                case NodePackageManager.YARN: return 'yarn run';
                default: throw new Error(`unexpected package manager ${this.packageManager}`);
            }
        })();
        this.projenCommand = (_e = options.projenCommand) !== null && _e !== void 0 ? _e : 'npx projen';
        this.processDeps(options);
        // node version
        this.minNodeVersion = options.minNodeVersion;
        this.maxNodeVersion = options.maxNodeVersion;
        this.nodeVersion = (_f = options.workflowNodeVersion) !== null && _f !== void 0 ? _f : this.minNodeVersion;
        this.keywords = new Set();
        this.addKeywords(...(_g = options.keywords) !== null && _g !== void 0 ? _g : []);
        // add PATH for all tasks which includes the project's npm .bin list
        this.tasks.addEnvironment('PATH', '$(npx node -e "console.log(process.env.PATH)")');
        this.compileTask = this.addTask('compile', {
            description: 'Only compile',
            category: tasks_1.TaskCategory.BUILD,
        });
        this.testTask = this.addTask('test', {
            description: 'Run tests',
            category: tasks_1.TaskCategory.TEST,
        });
        this.buildTask = this.addTask('build', {
            description: 'Full release build (test+compile)',
            category: tasks_1.TaskCategory.BUILD,
        });
        let nodeVersion = '';
        if (this.minNodeVersion) {
            nodeVersion += `>= ${this.minNodeVersion}`;
        }
        if (this.maxNodeVersion) {
            nodeVersion += ` <= ${this.maxNodeVersion}`;
        }
        this.npmDistTag = (_h = options.npmDistTag) !== null && _h !== void 0 ? _h : 'latest';
        this.npmRegistry = (_j = options.npmRegistry) !== null && _j !== void 0 ? _j : 'registry.npmjs.org';
        const renderScripts = () => {
            const result = {};
            for (const [name, commands] of Object.entries(this.scripts)) {
                const cmds = commands.length > 0 ? commands : ['echo "n/a"'];
                result[name] = cmds.join(' && ');
            }
            for (const task of this.tasks.all) {
                result[task.name] = this.npmScriptForTask(task);
            }
            return result;
        };
        let author;
        if (options.authorName) {
            author = {
                name: options.authorName,
                email: options.authorEmail,
                url: options.authorUrl,
                organization: (_k = options.authorOrganization) !== null && _k !== void 0 ? _k : false,
            };
        }
        else {
            if (options.authorEmail || options.authorUrl || options.authorOrganization !== undefined) {
                throw new Error('"authorName" is required if specifying "authorEmail" or "authorUrl"');
            }
        }
        this.testdir = (_l = options.testdir) !== null && _l !== void 0 ? _l : 'test';
        this.manifest = {
            name: options.name,
            description: options.description,
            repository: !options.repository ? undefined : {
                type: 'git',
                url: options.repository,
                directory: options.repositoryDirectory,
            },
            bin: this.bin,
            scripts: renderScripts,
            author: author,
            homepage: options.homepage,
            devDependencies: sorted(this.devDependencies),
            peerDependencies: sorted(this.peerDependencies),
            dependencies: sorted(this.dependencies),
            bundledDependencies: sorted(this.bundledDependencies),
            keywords: () => Array.from(this.keywords).sort(),
            engines: nodeVersion !== '' ? { node: nodeVersion } : undefined,
        };
        this.entrypoint = (_m = options.entrypoint) !== null && _m !== void 0 ? _m : 'lib/index.js';
        this.manifest.main = this.entrypoint !== '' ? this.entrypoint : undefined;
        new json_1.JsonFile(this, 'package.json', {
            obj: this.manifest,
            marker: true,
            readonly: false,
        });
        if ((_o = options.npmignoreEnabled) !== null && _o !== void 0 ? _o : true) {
            this.npmignore = new ignore_file_1.IgnoreFile(this, '.npmignore');
        }
        this.addDefaultGitIgnore();
        if ((_p = options.gitignore) === null || _p === void 0 ? void 0 : _p.length) {
            for (const i of options.gitignore) {
                this.gitignore.exclude(i);
            }
        }
        if ((_q = options.npmignore) === null || _q === void 0 ? void 0 : _q.length) {
            if (!this.npmignore) {
                throw new Error('.npmignore is not defined for an APP project type. Add "npmIgnore: true" to override this');
            }
            for (const i of options.npmignore) {
                this.npmignore.exclude(i);
            }
        }
        // set license and produce license file
        if ((_r = options.licensed) !== null && _r !== void 0 ? _r : true) {
            const license = (_s = options.license) !== null && _s !== void 0 ? _s : 'Apache-2.0';
            this.manifest.license = license;
            new license_1.License(this, license, {
                copyrightOwner: (_t = options.copyrightOwner) !== null && _t !== void 0 ? _t : options.authorName,
                copyrightPeriod: options.copyrightPeriod,
            });
        }
        else {
            this.manifest.license = 'UNLICENSED';
        }
        this.setScript(PROJEN_SCRIPT, this.projenCommand);
        this.setScript('start', `${this.projenCommand} start`);
        (_u = this.npmignore) === null || _u === void 0 ? void 0 : _u.exclude(`/${common_1.PROJEN_RC}`);
        this.gitignore.include(`/${common_1.PROJEN_RC}`);
        this.addBins((_v = options.bin) !== null && _v !== void 0 ? _v : {});
        const projen = (_w = options.projenDevDependency) !== null && _w !== void 0 ? _w : true;
        if (projen) {
            const projenVersion = (_x = options.projenVersion) !== null && _x !== void 0 ? _x : `^${common_1.PROJEN_VERSION}`;
            this.addDevDeps(`projen@${projenVersion}`);
        }
        const defaultReleaseBranch = (_y = options.defaultReleaseBranch) !== null && _y !== void 0 ? _y : 'master';
        // version is read from a committed file called version.json which is how we bump
        this._version = new version_1.Version(this, { releaseBranch: defaultReleaseBranch });
        this.manifest.version = (outdir) => this._version.resolveVersion(outdir);
        // indicate if we have anti-tamper configured in our workflows. used by e.g. Jest
        // to decide if we can always run with --updateSnapshot
        this.antitamper = ((_z = options.buildWorkflow) !== null && _z !== void 0 ? _z : true) && ((_0 = options.antitamper) !== null && _0 !== void 0 ? _0 : true);
        // configure jest if enabled
        // must be before the build/release workflows
        if ((_1 = options.jest) !== null && _1 !== void 0 ? _1 : true) {
            this.jest = new jest_1.Jest(this, {
                ...options.jestOptions,
            });
            this.gitignore.include(`/${this.testdir}`);
            (_2 = this.npmignore) === null || _2 === void 0 ? void 0 : _2.exclude(`/${this.testdir}`);
        }
        if ((_3 = options.buildWorkflow) !== null && _3 !== void 0 ? _3 : true) {
            const { workflow, buildJobId } = this.createBuildWorkflow('Build', {
                trigger: {
                    pull_request: {},
                },
                image: options.workflowContainerImage,
                codeCov: (_4 = options.codeCov) !== null && _4 !== void 0 ? _4 : false,
                codeCovTokenSecret: options.codeCovTokenSecret,
            });
            this.buildWorkflow = workflow;
            this.buildWorkflowJobId = buildJobId;
        }
        if ((_5 = options.releaseWorkflow) !== null && _5 !== void 0 ? _5 : true) {
            const releaseBranches = (_6 = options.releaseBranches) !== null && _6 !== void 0 ? _6 : [defaultReleaseBranch];
            const trigger = {};
            if ((_7 = options.releaseEveryCommit) !== null && _7 !== void 0 ? _7 : true) {
                trigger.push = { branches: releaseBranches };
            }
            if (options.releaseSchedule) {
                trigger.schedule = { cron: options.releaseSchedule };
            }
            const { workflow, buildJobId } = this.createBuildWorkflow('Release', {
                trigger,
                preBuildSteps: [{ run: this.runTaskCommand(this._version.bumpTask) }],
                pushBranch: '${{ github.ref }}',
                uploadArtifact: true,
                image: options.workflowContainerImage,
                codeCov: (_8 = options.codeCov) !== null && _8 !== void 0 ? _8 : false,
                codeCovTokenSecret: options.codeCovTokenSecret,
            });
            this.releaseWorkflow = workflow;
            this.releaseWorkflowJobId = buildJobId;
            if ((_9 = options.releaseToNpm) !== null && _9 !== void 0 ? _9 : false) {
                this.releaseWorkflow.addJobs({
                    release_npm: {
                        'name': 'Release to NPM',
                        'needs': this.releaseWorkflowJobId,
                        'runs-on': 'ubuntu-latest',
                        'steps': [
                            {
                                name: 'Download build artifacts',
                                uses: 'actions/download-artifact@v1',
                                with: {
                                    name: 'dist',
                                },
                            },
                            {
                                name: 'Release',
                                run: 'npx -p jsii-release jsii-release-npm',
                                env: {
                                    NPM_TOKEN: '${{ secrets.NPM_TOKEN }}',
                                    NPM_DIST_TAG: this.npmDistTag,
                                    NPM_REGISTRY: this.npmRegistry,
                                },
                            },
                        ],
                    },
                });
            }
        }
        else {
            // validate that no release options are selected if the release workflow is disabled.
            if (options.releaseToNpm) {
                throw new Error('"releaseToNpm" is not supported for APP projects');
            }
            if (options.releaseBranches) {
                throw new Error('"releaseBranches" is not supported for APP projects');
            }
            if (options.releaseEveryCommit) {
                throw new Error('"releaseEveryCommit" is not supported for APP projects');
            }
            if (options.releaseSchedule) {
                throw new Error('"releaseSchedule" is not supported for APP projects');
            }
        }
        // automatically add all executable files under "bin"
        if ((_10 = options.autoDetectBin) !== null && _10 !== void 0 ? _10 : true) {
            const bindir = 'bin';
            if (fs.existsSync(bindir)) {
                for (const file of fs.readdirSync(bindir)) {
                    try {
                        fs.accessSync(path.join(bindir, file), fs.constants.X_OK);
                        this.bin[file] = path.join(bindir, file).replace(/\\/g, '/');
                    }
                    catch (e) {
                        // not executable, skip
                    }
                }
            }
        }
        let autoMergeLabel;
        if ((_11 = options.mergify) !== null && _11 !== void 0 ? _11 : true) {
            const successfulBuild = this.buildWorkflow
                ? [`status-success=${this.buildWorkflowJobId}`]
                : [];
            const mergeAction = {
                merge: {
                    // squash all commits into a single commit when merging
                    method: 'squash',
                    // use PR title+body as the commit message
                    commit_message: 'title+body',
                    // update PR branch so it's up-to-date before merging
                    strict: 'smart',
                    strict_method: 'merge',
                },
                delete_head_branch: {},
            };
            (_12 = this.github) === null || _12 === void 0 ? void 0 : _12.addMergifyRules({
                name: 'Automatic merge on approval and successful build',
                actions: mergeAction,
                conditions: [
                    '#approved-reviews-by>=1',
                    ...successfulBuild,
                ],
            });
            // empty string means disabled.
            autoMergeLabel = (_13 = options.mergifyAutoMergeLabel) !== null && _13 !== void 0 ? _13 : 'auto-merge';
            if (autoMergeLabel !== '') {
                (_14 = this.github) === null || _14 === void 0 ? void 0 : _14.addMergifyRules({
                    name: `Automatic merge PRs with ${autoMergeLabel} label upon successful build`,
                    actions: mergeAction,
                    conditions: [
                        `label=${autoMergeLabel}`,
                        ...successfulBuild,
                    ],
                });
            }
            (_15 = this.npmignore) === null || _15 === void 0 ? void 0 : _15.exclude('/.mergify.yml');
        }
        if ((_16 = options.dependabot) !== null && _16 !== void 0 ? _16 : true) {
            (_17 = this.github) === null || _17 === void 0 ? void 0 : _17.addDependabot(options.dependabotOptions);
        }
        const projenAutoMerge = (_18 = options.projenUpgradeAutoMerge) !== null && _18 !== void 0 ? _18 : true;
        new projen_upgrade_1.ProjenUpgrade(this, {
            autoUpgradeSecret: options.projenUpgradeSecret,
            autoUpgradeSchedule: options.projenUpgradeSchedule,
            labels: (projenAutoMerge && autoMergeLabel) ? [autoMergeLabel] : [],
        });
        // override any scripts from options (if specified)
        for (const [cmdname, shell] of Object.entries((_19 = options.scripts) !== null && _19 !== void 0 ? _19 : {})) {
            this.addTask(cmdname, { exec: shell });
        }
        if ((_20 = options.pullRequestTemplate) !== null && _20 !== void 0 ? _20 : true) {
            (_21 = this.github) === null || _21 === void 0 ? void 0 : _21.addPullRequestTemplate(...(_22 = options.pullRequestTemplateContents) !== null && _22 !== void 0 ? _22 : []);
        }
        if ((_23 = options.rebuildBot) !== null && _23 !== void 0 ? _23 : true) {
            this.addRebuildBot((_24 = options.rebuildBotCommand) !== null && _24 !== void 0 ? _24 : 'rebuild');
        }
    }
    /**
     * @experimental
     */
    addBins(bins) {
        for (const [k, v] of Object.entries(bins)) {
            this.bin[k] = v;
        }
    }
    /**
     * @deprecated use `addDeps()`
     */
    addDependencies(deps, bundle = false) {
        for (const [k, v] of Object.entries(deps)) {
            this.dependencies[k] = typeof (v) === 'string' ? v : v.spec;
            if (bundle) {
                this.addBundledDependencies(k);
            }
        }
    }
    /**
     * @deprecated use `addBundledDeps()`
     */
    addBundledDependencies(...deps) {
        if (deps.length && !this.allowLibraryDependencies) {
            throw new Error(`cannot add bundled dependencies to an APP project: ${deps.join(',')}`);
        }
        for (const dep of deps) {
            if (!(dep in this.dependencies)) {
                throw new Error(`unable to bundle "${dep}". it has to also be defined as a dependency`);
            }
            if (dep in this.peerDependencies) {
                throw new Error(`unable to bundle "${dep}". it cannot appear as a peer dependency`);
            }
            this.bundledDependencies.push(dep);
        }
    }
    /**
     * @deprecated use `addDevDeps()`
     */
    addDevDependencies(deps) {
        for (const [k, v] of Object.entries(deps !== null && deps !== void 0 ? deps : {})) {
            this.devDependencies[k] = typeof (v) === 'string' ? v : v.spec;
        }
    }
    /**
     * @deprecated use `addPeerDeps()`
     */
    addPeerDependencies(deps, options) {
        var _a;
        if (Object.keys(deps).length && !this.allowLibraryDependencies) {
            throw new Error(`cannot add peer dependencies to an APP project: ${Object.keys(deps).join(',')}`);
        }
        const opts = options !== null && options !== void 0 ? options : this.peerDependencyOptions;
        const pinned = (_a = opts.pinnedDevDependency) !== null && _a !== void 0 ? _a : true;
        for (const [k, v] of Object.entries(deps)) {
            this.peerDependencies[k] = typeof (v) === 'string' ? v : v.spec;
            if (pinned && v.version) {
                this.addDevDependencies({ [k]: semver_1.Semver.pinned(v.version) });
            }
        }
    }
    /**
     * (experimental) Replaces the contents of an npm package.json script.
     *
     * @param name The script name.
     * @param command The command to execute.
     * @experimental
     */
    setScript(name, command) {
        this.scripts[name] = [command];
    }
    /**
     * (experimental) Removes the npm script (always successful).
     *
     * @param name The name of the script.
     * @experimental
     */
    removeScript(name) {
        delete this.scripts[name];
    }
    /**
     * (experimental) Indicates if a script by the name name is defined.
     *
     * @param name The name of the script.
     * @experimental
     */
    hasScript(name) {
        return name in this.scripts;
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.compileTask.exec()`
     */
    addCompileCommand(...commands) {
        for (const c of commands) {
            this.compileTask.exec(c);
        }
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.testTask.exec()`
     */
    addTestCommand(...commands) {
        for (const c of commands) {
            this.testTask.exec(c);
        }
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.buildTask.exec()`
     */
    addBuildCommand(...commands) {
        for (const c of commands) {
            this.buildTask.exec(c);
        }
    }
    /**
     * (experimental) Directly set fields in `package.json`.
     *
     * @param fields The fields to set.
     * @experimental
     */
    addFields(fields) {
        for (const [name, value] of Object.entries(fields)) {
            this.manifest[name] = value;
        }
    }
    /**
     * (experimental) Adds keywords to package.json (deduplicated).
     *
     * @param keywords The keywords to add.
     * @experimental
     */
    addKeywords(...keywords) {
        for (const k of keywords) {
            this.keywords.add(k);
        }
    }
    /**
     * @experimental
     */
    get installWorkflowSteps() {
        const install = new Array();
        if (this.nodeVersion) {
            install.push({
                name: 'Setup Node.js',
                uses: 'actions/setup-node@v1',
                with: { 'node-version': this.nodeVersion },
            });
        }
        install.push({
            name: 'Install dependencies',
            run: this.renderInstallCommand(true),
        });
        // run "projen"
        install.push({
            name: 'Synthesize project files',
            run: this.projenCommand,
        });
        return install;
    }
    /**
     * (experimental) Defines normal dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDeps(...deps) {
        for (const dep of deps) {
            this.addDependencies(parseDep(dep));
        }
    }
    /**
     * (experimental) Defines development/test dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDevDeps(...deps) {
        for (const dep of deps) {
            this.addDevDependencies(parseDep(dep));
        }
    }
    /**
     * (experimental) Defines peer dependencies.
     *
     * When adding peer dependencies, a devDependency will also be added on the
     * pinned version of the declared peer. This will ensure that you are testing
     * your code against the minimum version required from your consumers.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addPeerDeps(...deps) {
        for (const dep of deps) {
            this.addPeerDependencies(parseDep(dep));
        }
    }
    /**
     * (experimental) Defines bundled dependencies.
     *
     * Bundled dependencies will be added as normal dependencies as well as to the
     * `bundledDependencies` section of your `package.json`.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addBundledDeps(...deps) {
        for (const dep of deps) {
            this.addDependencies(parseDep(dep));
            this.addBundledDependencies(Object.keys(parseDep(dep))[0]);
        }
    }
    processDeps(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const deprecate = (key, alt) => {
            var _a;
            if (Object.keys((_a = options[key]) !== null && _a !== void 0 ? _a : {}).length) {
                logging.warn(`The option "${key}" will soon be deprecated, use "${alt}" instead (see API docs)`);
            }
        };
        deprecate('dependencies', 'deps');
        deprecate('peerDependencies', 'peerDeps');
        deprecate('devDependencies', 'devDeps');
        deprecate('bundledDependencies', 'bundledDeps');
        this.addDependencies((_a = options.dependencies) !== null && _a !== void 0 ? _a : {});
        this.addPeerDependencies((_b = options.peerDependencies) !== null && _b !== void 0 ? _b : {});
        this.addDevDependencies((_c = options.devDependencies) !== null && _c !== void 0 ? _c : {});
        this.addBundledDependencies(...(_d = options.bundledDependencies) !== null && _d !== void 0 ? _d : []);
        this.addDeps(...(_e = options.deps) !== null && _e !== void 0 ? _e : []);
        this.addDevDeps(...(_f = options.devDeps) !== null && _f !== void 0 ? _f : []);
        this.addPeerDeps(...(_g = options.peerDeps) !== null && _g !== void 0 ? _g : []);
        this.addBundledDeps(...(_h = options.bundledDeps) !== null && _h !== void 0 ? _h : []);
    }
    /**
     * (experimental) Called before all components are synthesized.
     *
     * @experimental
     */
    preSynthesize() {
        this.loadDependencies();
    }
    /**
     * (experimental) Called after all components are synthesized.
     *
     * Order is *not* guaranteed.
     *
     * @experimental
     */
    postSynthesize() {
        super.postSynthesize();
        const outdir = this.outdir;
        // now we run `yarn install`, but before we do that, remove the
        // `node_modules/projen` symlink so that yarn won't hate us.
        const projenModule = path.resolve('node_modules', 'projen');
        try {
            if (fs.lstatSync(projenModule).isSymbolicLink()) {
                fs.unlinkSync(projenModule);
            }
        }
        catch (e) { }
        util_1.exec(this.renderInstallCommand(util_1.isTruthy(process.env.CI)), { cwd: outdir });
        this.resolveDependencies(outdir);
    }
    renderInstallCommand(frozen) {
        switch (this.packageManager) {
            case NodePackageManager.YARN:
                return [
                    'yarn install',
                    '--check-files',
                    ...frozen ? ['--frozen-lockfile'] : [],
                ].join(' ');
            case NodePackageManager.NPM:
                return frozen
                    ? 'npm ci'
                    : 'npm install';
            default:
                throw new Error(`unexpected package manager ${this.packageManager}`);
        }
    }
    loadDependencies() {
        const outdir = this.outdir;
        const root = path.join(outdir, 'package.json');
        // nothing to do if package.json file does not exist
        if (!fs.existsSync(root)) {
            return;
        }
        const pkg = JSON.parse(fs.readFileSync(root, 'utf-8'));
        const readDeps = (user, current = {}) => {
            for (const [name, userVersion] of Object.entries(user)) {
                const currentVersion = current[name];
                // respect user version if it's not '*' or if current version is undefined
                if (userVersion !== '*' || !currentVersion || currentVersion === '*') {
                    continue;
                }
                // memoize current version in memory so it is preserved when saving
                user[name] = currentVersion;
            }
            // report removals
            for (const name of Object.keys(current !== null && current !== void 0 ? current : {})) {
                if (!user[name]) {
                    logging.verbose(`${name}: removed`);
                }
            }
        };
        readDeps(this.devDependencies, pkg.devDependencies);
        readDeps(this.dependencies, pkg.dependencies);
        readDeps(this.peerDependencies, pkg.peerDependencies);
    }
    resolveDependencies(outdir) {
        const root = path.join(outdir, 'package.json');
        const pkg = JSON.parse(fs.readFileSync(root, 'utf-8'));
        const resolveDeps = (current, user) => {
            const result = {};
            for (const [name, currentDefinition] of Object.entries(user)) {
                // find actual version from node_modules
                let desiredVersion = currentDefinition;
                if (currentDefinition === '*') {
                    try {
                        const modulePath = require.resolve(`${name}/package.json`, { paths: [outdir] });
                        const module = JSON.parse(fs.readFileSync(modulePath, 'utf-8'));
                        desiredVersion = `^${module.version}`;
                    }
                    catch (e) { }
                    if (!desiredVersion) {
                        logging.warn(`unable to resolve version for ${name} from installed modules`);
                        continue;
                    }
                }
                if (currentDefinition !== desiredVersion) {
                    logging.verbose(`${name}: ${currentDefinition} => ${desiredVersion}`);
                }
                result[name] = desiredVersion;
            }
            // print removed packages
            for (const name of Object.keys(current)) {
                if (!result[name]) {
                    logging.verbose(`${name} removed`);
                }
            }
            return sorted(result)();
        };
        pkg.dependencies = resolveDeps(pkg.dependencies, this.dependencies);
        pkg.devDependencies = resolveDeps(pkg.devDependencies, this.devDependencies);
        pkg.peerDependencies = resolveDeps(pkg.peerDependencies, this.peerDependencies);
        util_1.writeFile(root, JSON.stringify(pkg, undefined, 2));
    }
    addDefaultGitIgnore() {
        this.gitignore.exclude('# Logs', 'logs', '*.log', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*', 'lerna-debug.log*', '# Diagnostic reports (https://nodejs.org/api/report.html)', 'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json', '# Runtime data', 'pids', '*.pid', '*.seed', '*.pid.lock', '# Directory for instrumented libs generated by jscoverage/JSCover', 'lib-cov', '# Coverage directory used by tools like istanbul', 'coverage', '*.lcov', '# nyc test coverage', '.nyc_output', '# Compiled binary addons (https://nodejs.org/api/addons.html)', 'build/Release', '# Dependency directories', 'node_modules/', 'jspm_packages/', '# TypeScript cache', '*.tsbuildinfo', '# Optional eslint cache', '.eslintcache', '# Output of \'npm pack\'', '*.tgz', '# Yarn Integrity file', '.yarn-integrity', '# parcel-bundler cache (https://parceljs.org/)', '.cache');
    }
    createBuildWorkflow(name, options) {
        var _a, _b, _c, _d;
        const buildJobId = 'build';
        const github = this.github;
        if (!github) {
            throw new Error('no github support');
        }
        const workflow = github.addWorkflow(name);
        workflow.on(options.trigger);
        workflow.on({
            workflow_dispatch: {},
        });
        const condition = options.condition ? { if: options.condition } : {};
        const preBuildSteps = (_a = options.preBuildSteps) !== null && _a !== void 0 ? _a : [];
        const preCheckoutSteps = (_b = options.preCheckoutSteps) !== null && _b !== void 0 ? _b : [];
        const checkoutWith = options.checkoutWith ? { with: options.checkoutWith } : {};
        const postSteps = (_c = options.postSteps) !== null && _c !== void 0 ? _c : [];
        const antitamperSteps = (options.antitamperDisabled || !this.antitamper) ? [] : [{
                name: 'Anti-tamper check',
                run: 'git diff --exit-code',
            }];
        const commitChanges = !options.commit ? [] : [{
                name: 'Commit changes',
                run: `git commit -am "${options.commit}"`,
            }];
        const pushChanges = !options.pushBranch ? [] : [{
                name: 'Push changes',
                run: 'git push --follow-tags origin $BRANCH',
                env: {
                    BRANCH: options.pushBranch,
                },
            }];
        const job = {
            'runs-on': 'ubuntu-latest',
            'env': {
                CI: 'true',
            },
            ...condition,
            'steps': [
                ...preCheckoutSteps,
                // check out sources.
                {
                    name: 'Checkout',
                    uses: 'actions/checkout@v2',
                    ...checkoutWith,
                },
                // install dependencies
                ...this.installWorkflowSteps,
                // perform an anti-tamper check immediately after we run projen.
                ...antitamperSteps,
                // sets git identity so we can push later
                {
                    name: 'Set git identity',
                    run: [
                        'git config user.name "Auto-bump"',
                        'git config user.email "github-actions@github.com"',
                    ].join('\n'),
                },
                // if there are changes, creates a bump commit
                ...preBuildSteps,
                // build (compile + test)
                {
                    name: 'Build',
                    run: this.runTaskCommand(this.buildTask),
                },
                // run codecov if enabled or a secret token name is passed in
                // AND jest must be configured
                ...(options.codeCov || options.codeCovTokenSecret) && ((_d = this.jest) === null || _d === void 0 ? void 0 : _d.config) ? [{
                        name: 'Upload coverage to Codecov',
                        uses: 'codecov/codecov-action@v1',
                        with: options.codeCovTokenSecret ? {
                            token: `\${{ secrets.${options.codeCovTokenSecret} }}`,
                            directory: this.jest.config.coverageDirectory,
                        } : {
                            directory: this.jest.config.coverageDirectory,
                        },
                    }] : [],
                // anti-tamper check (fails if there were changes to committed files)
                // this will identify any non-committed files generated during build (e.g. test snapshots)
                ...antitamperSteps,
                // if required, commit changes to the repo
                ...commitChanges,
                // push bump commit
                ...pushChanges,
                ...postSteps,
            ],
        };
        if (options.image) {
            job.container = { image: options.image };
        }
        if (options.uploadArtifact) {
            job.steps.push({
                name: 'Upload artifact',
                uses: 'actions/upload-artifact@v2.1.1',
                with: {
                    name: 'dist',
                    path: 'dist',
                },
            });
        }
        workflow.addJobs({ [buildJobId]: job });
        return { workflow, buildJobId };
    }
    /**
     * (experimental) Returns the shell command to execute in order to run a task.
     *
     * If
     * npmTaskExecution is set to PROJEN, the command will be `npx projen TASK`.
     * If it is set to SHELL, the command will be `yarn run TASK` (or `npm run
     * TASK`).
     *
     * @param task The task for which the command is required.
     * @experimental
     */
    runTaskCommand(task) {
        switch (this.npmTaskExecution) {
            case NpmTaskExecution.PROJEN: return `${this.projenCommand} ${task.name}`;
            case NpmTaskExecution.SHELL: return `${this.runScriptCommand} ${task.name}`;
            default:
                throw new Error(`invalid npmTaskExecution mode: ${this.npmTaskExecution}`);
        }
    }
    npmScriptForTask(task) {
        switch (this.npmTaskExecution) {
            case NpmTaskExecution.PROJEN: return `${this.projenCommand} ${task.name}`;
            case NpmTaskExecution.SHELL: return task.toShellCommand();
            default:
                throw new Error(`invalid npmTaskExecution mode: ${this.npmTaskExecution}`);
        }
    }
    addRebuildBot(command) {
        const postComment = (message) => ({
            name: 'Post comment to issue',
            uses: 'peter-evans/create-or-update-comment@v1',
            with: {
                'issue-number': '${{ github.event.issue.number }}',
                'body': `_projen_: ${message}`,
            },
        });
        this.createBuildWorkflow('rebuild-bot', {
            trigger: { issue_comment: { types: ['created'] } },
            condition: `\${{ github.event.issue.pull_request && contains(github.event.comment.body, '@projen ${command}') }}`,
            antitamperDisabled: true,
            // since the "issue_comment" event is not triggered on a branch, we need to resolve
            // the git ref of the pull request before we check out
            preCheckoutSteps: [
                postComment('Rebuild started'),
                {
                    name: 'Get pull request branch',
                    id: 'query_pull_request',
                    env: { PULL_REQUEST_URL: '${{ github.event.issue.pull_request.url }}' },
                    run: [
                        'rm -f /tmp/pr.json',
                        'curl --silent $PULL_REQUEST_URL > /tmp/pr.json',
                        'BRANCH_STR=$(cat /tmp/pr.json | jq ".head.ref")',
                        'REPO_NAME=$(cat /tmp/pr.json | jq ".head.repo.full_name")',
                        'echo "::set-output name=branch::$(node -p $BRANCH_STR)"',
                        'echo "::set-output name=repo::$(node -p $REPO_NAME)"',
                    ].join('\n'),
                },
            ],
            // tell checkout to use the branch we acquired at the previous step
            checkoutWith: {
                ref: '${{ steps.query_pull_request.outputs.branch }}',
                repository: '${{ steps.query_pull_request.outputs.repo }}',
            },
            // commit changes
            commit: 'chore: update generated files',
            // and push to the pull request branch
            pushBranch: '${{ steps.query_pull_request.outputs.branch }}',
            postSteps: [
                postComment('Rebuild complete. Updates pushed to pull request branch.'),
            ],
        });
    }
}
exports.NodeProject = NodeProject;
function sorted(toSort) {
    return () => {
        if (Array.isArray(toSort)) {
            return toSort.sort();
        }
        else if (toSort != null && typeof toSort === 'object') {
            const result = {};
            for (const [key, value] of Object.entries(toSort).sort(([l], [r]) => l.localeCompare(r))) {
                result[key] = value;
            }
            return result;
        }
        else {
            return toSort;
        }
    };
}
function parseDep(dep) {
    const scope = dep.startsWith('@');
    if (scope) {
        dep = dep.substr(1);
    }
    const [name, version] = dep.split('@');
    let depname = scope ? `@${name}` : name;
    return { [depname]: semver_1.Semver.of(version !== null && version !== void 0 ? version : '*') };
}
//# sourceMappingURL=data:application/json;base64,