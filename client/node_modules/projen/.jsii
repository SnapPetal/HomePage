{
  "author": {
    "email": "benisrae@amazon.com",
    "name": "Elad Ben-Israel",
    "roles": [
      "author"
    ]
  },
  "bundled": {
    "@iarna/toml": "^2.2.5",
    "chalk": "^4.1.0",
    "decamelize": "^4.0.0",
    "fs-extra": "^9.0.1",
    "glob": "^7",
    "inquirer": "^7.3.3",
    "semver": "^7.3.2",
    "yaml": "^1.10.0",
    "yargs": "^16.1.1"
  },
  "description": "A new generation of project generators",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/projen/projen.git",
  "jsiiVersion": "1.15.0 (build 585166b)",
  "keywords": [],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "projen",
  "readme": {
    "markdown": "[![License](https://img.shields.io/badge/License-Apache%202.0-yellowgreen.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/projen/projen)\n![Build](https://github.com/projen/projen/workflows/Build/badge.svg)\n![Release](https://github.com/projen/projen/workflows/Release/badge.svg)\n\n# projen\n\nDefine and maintain complex project configuration through code.\n\n> JOIN THE [#TemplatesAreEvil] MOVEMENT!\n\n[#TemplatesAreEvil]: https://twitter.com/search?q=%23TemplatesAreEvil\n\n*projen* synthesizes project configuration files such as `package.json`,\n`tsconfig.json`, `.gitignore`, GitHub Workflows, eslint, jest, etc from a\nwell-typed definition written in JavaScript.\n\nCheck out [this talk](https://youtu.be/SOWMPzXtTCw) about projen.\n\nAs opposed to existing templating/scaffolding tools, *projen* is not a one-off\ngenerator. Synthesized files should never be manually edited (in fact, projen\nenforces that). To modify your project setup, users interact with rich\nstrongly-typed class and execute `projen` to update their project configuration\nfiles.\n\n## Getting Started\n\nTo create a new project, run the following command and follow the instructions:\n\n```console\n$ mkdir my-project\n$ cd my-project\n$ git init\n$ npx projen new PROJECT-TYPE\n🤖 Synthesizing project...\n...\n```\n\nCurrently supported project types (use `npx projen new` without a type for a\nlist):\n\n<!-- <macro exec=\"node ./scripts/readme-projects.js\"> -->\n* [awscdk-app-ts](https://github.com/projen/projen/blob/master/API.md#projen-awscdktypescriptapp) - AWS CDK app in TypeScript.\n* [awscdk-construct](https://github.com/projen/projen/blob/master/API.md#projen-awscdkconstructlibrary) - AWS CDK construct library project.\n* [cdk8s-construct](https://github.com/projen/projen/blob/master/API.md#projen-constructlibrarycdk8s) - CDK8s construct library project.\n* [jsii](https://github.com/projen/projen/blob/master/API.md#projen-jsiiproject) - Multi-language jsii library project.\n* [nextjs](https://github.com/projen/projen/blob/master/API.md#projen-web.nextjsproject) - Next.js project without TypeScript.\n* [nextjs-ts](https://github.com/projen/projen/blob/master/API.md#projen-web.nextjstypescriptproject) - Next.js project with TypeScript.\n* [node](https://github.com/projen/projen/blob/master/API.md#projen-nodeproject) - Node.js project.\n* [project](https://github.com/projen/projen/blob/master/API.md#projen-project) - Base project.\n* [react](https://github.com/projen/projen/blob/master/API.md#projen-web.reactproject) - React project without TypeScript.\n* [react-ts](https://github.com/projen/projen/blob/master/API.md#projen-web.reacttypescriptproject) - React project with TypeScript.\n* [typescript](https://github.com/projen/projen/blob/master/API.md#projen-typescriptproject) - TypeScript project.\n* [typescript-app](https://github.com/projen/projen/blob/master/API.md#projen-typescriptappproject) - TypeScript app.\n<!-- </macro> -->\n\n> Use `npx projen new PROJECT-TYPE --help` to view a list of command line\n> switches that allows you to specify most project options during bootstrapping.\n> For example: `npx projen new jsii --author-name \"Jerry Berry\"`.\n\nThe `new` command will create a `.projenrc.js` file which looks like this for\n`jsii` projects:\n\n```js\nconst { JsiiProject } = require('projen');\n\nconst project = new JsiiProject({\n  authorAddress: \"elad.benisrael@gmail.com\",\n  authorName: \"Elad Ben-Israel\",\n  name: \"foobar\",\n  repository: \"https://github.com/eladn/foobar.git\",\n});\n\nproject.synth();\n```\n\nThis program instantiates the project type with minimal setup, and then calls\n`synth()` to synthesize the project files. By default, the `new` command will\nalso execute this program, which will result in a fully working project.\n\nOnce your project is created, you can configure your project by editing\n`.projenrc.js` and re-running `npx projen` to synthesize again.\n\n> The files generated by _projen_ are considered an \"implementation detail\" and\n> _projen_ protects them from being manually edited (most files are marked\n> read-only, and an \"anti tamper\" check is configured in the CI build workflow\n> to ensure that files are not updated during build).\n\nFor example, to setup PyPI publishing in `jsii` projects, you can use\n[`python option`](https://github.com/eladb/projen/blob/master/API.md#projen-jsiipythontarget):\n\n```js\nconst project = new JsiiProject({\n  // ...\n  python: {\n    distName: \"mydist\",\n    module: \"my_module\",\n  }\n});\n```\n\nRun:\n\n```shell\nnpx projen\n```\n\nAnd you'll notice that your `package.json` file now contains a `python` section in\nit's `jsii` config and the GitHub `release.yml` workflow includes a PyPI\npublishing step.\n\nWe recommend to put this in your shell profile, so you can simply run `pj` every\ntime you update `.projenrc.js`:\n\n```bash\nalias pj='npx projen'\n```\n\nMost projects support a `start` command which displays a menu of workflow\nactivities:\n\n```shell\n$ yarn start\n? Scripts: (Use arrow keys)\n\n  BUILD\n❯ compile          Only compile\n  watch            Watch & compile in the background\n  build            Full release build (test+compile)\n\n  TEST\n  test             Run tests\n  test:watch       Run jest in watch mode\n  eslint           Runs eslint against the codebase\n\n  ...\n```\n\nThe `build` command is the same command that's executed in your CI builds. It\ntypically compiles, lints, tests and packages your module for distribution.\n\n## Features\n\nSome examples for features built-in to project types:\n\n* Fully synthesize `package.json`\n* Standard npm scripts like `compile`, `build`, `test`, `package`\n* eslint\n* Jest\n* jsii: compile, package, api compatibility checks, API.md\n* Bump & release scripts with CHANGELOG generation based on Conventional Commits\n* Automated PR builds\n* Automated releases to npm, maven, NuGet and PyPI\n* Mergify configuration\n* LICENSE file generation\n* gitignore + npmignore management\n* Node \"engines\" support with coupling to CI build environment and @types/node\n* Anti-tamper: CI builds will fail if a synthesized file is modified manually\n\n## API Reference\n\nSee [API Reference](./API.md) for API details.\n\n## Ecosystem\n\n_projen_ takes a \"batteries included\" approach and aims to offer dozens of different project types out of\nthe box (we are just getting started). Think `projen new react`, `projen new angular`, `projen new java-maven`,\n`projen new awscdk-typescript`, `projen new cdk8s-python` (nothing in projen is tied to javascript or npm!)...\n\nAdding new project types is as simple as submitting a pull request to this repo and exporting a class that\nextends `projen.Project` (or one of it's derivatives). Projen automatically discovers project types so your\ntype will immediately be available in `projen new`.\n\n### Projects in external modules\n\n_projen_ is bundled with many project types out of the box, but it can also work\nwith project types and components defined in external jsii modules (the reason\nwe need jsii is because projen uses the jsii metadata to discover project types\n& options in projen new).\n\nSay we have a module in npm called `projen-vuejs` which includes a single project\ntype for vue.js:\n\n```bash\n$ npx projen new --from projen-vuejs\n```\n\nIf the referenced module includes multiple project types, the type is required.\nSwitches can also be used to specify initial values based on the project type\nAPIs. You can also use any package syntax supported by [yarn\nadd](https://classic.yarnpkg.com/en/docs/cli/add#toc-adding-dependencies) like\n`projen-vuejs@1.2.3`, `file:/path/to/local/folder`,\n`git@github.com/awesome/projen-vuejs#1.2.3`, etc.\n\n```bash\n$ npx projen new --from projen-vuejs@^2 vuejs-ts --description \"my awesome vue project\"\n```\n\nUnder the hood, `projen new` will install the `projen-vuejs` module from npm\n(version 2.0.0 and above), discover the project types in it and bootstrap the\n`vuejs-ts` project type. It will assign the value `\"my awesome vue project\"` to\nthe `description` field. If you examine your `.projenrc.js` file, you'll see\nthat `projen-vuejs` is defined as a dev dependency:\n\n```javascript\nconst { VueJsProject } = require('projen-vuejs');\n\nconst project = new VueJsProject({\n  name: 'my-vuejs-sample',\n  description: \"my awesome vue project\",\n  // ...\n  devDeps: [\n    'projen-vuejs'\n  ]\n});\n\nproject.synth();\n```\n\n## Contributing\n\nContributions of all kinds are welcome! See our [code of conduct](./CODE_OF_CONDUCT.md).\n\nTo check out a development environment:\n\n```bash\n$ git clone git@github.com:projen/projen\n$ cd projen\n$ yarn\n```\n\n## Roadmap\n\n> A non-exhaustive list of ideas/directions for projen\n\n- [ ] Multi-language support: ideally projenrc should be in the same language as your application code.\n- [ ] External components & projects: `projen new` should be able to list project types from registered 3rd party modules so we can grow the ecosystem easily.\n- [ ] Components: re-think/re-factor how components and projects interact to allow more modular and composabble usage.\n- [ ] Discoverability of external components/modules through the CLI\n- [ ] Support projenrc in YAML (fully declarative, if one desires)\n- [ ] `projen SCRIPT`: make the CLI extensible so it can become _the_ project entrypoint (instead of e.g. `yarn`/`npm`, etc).\n- [ ] CLI bash completion\n\n\n## License\n\nDistributed under the [Apache-2.0](./LICENSE) license.\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/projen/projen.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "projen.github": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 29
      }
    },
    "projen.tasks": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 27
      }
    },
    "projen.vscode": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 30
      }
    },
    "projen.web": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 28
      }
    }
  },
  "targets": {
    "js": {
      "npm": "projen"
    }
  },
  "types": {
    "projen.AutoRelease": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Automatic bump modes."
      },
      "fqn": "projen.AutoRelease",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 598
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Automatically bump & release a new version for every commit to \"master\"."
          },
          "name": "EVERY_COMMIT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Automatically bump & release a new version on a daily basis."
          },
          "name": "DAILY"
        }
      ],
      "name": "AutoRelease"
    },
    "projen.AwsCdkConstructLibrary": {
      "assembly": "projen",
      "base": "projen.ConstructLibrary",
      "docs": {
        "custom": {
          "pjid": "awscdk-construct"
        },
        "remarks": "A multi-language (jsii) construct library which vends constructs designed to\nuse within the AWS CDK with a friendly workflow and automatic publishing to\nthe construct catalog.\n\n```ts\nconst project = new ConstructLibraryAws({\n   name: 'cdk-watchful',\n   description: 'Watching your CDK apps since 2019',\n   jsiiVersion: Semver.caret('1.7.0'),\n   authorName: 'Elad Ben-Israel',\n   authorEmail: 'elad.benisrael@gmail.com',\n   repository: 'https://github.com/eladb/cdk-watchful.git',\n   keywords: [\n     \"cloudwatch\",\n     \"monitoring\"\n   ],\n\n   catalog: {\n     twitter: 'emeshbi'\n   },\n\n   // creates PRs for projen upgrades\n   projenUpgradeSecret: 'PROJEN_GITHUB_TOKEN',\n\n   cdkVersion: '1.54.0',\n   cdkDependencies: [\n     \"@aws-cdk/aws-apigateway\",\n     \"@aws-cdk/aws-cloudwatch\",\n     \"@aws-cdk/aws-cloudwatch-actions\",\n     \"@aws-cdk/aws-dynamodb\",\n     \"@aws-cdk/aws-ecs\",\n     \"@aws-cdk/aws-ecs-patterns\",\n     \"@aws-cdk/aws-elasticloadbalancingv2\",\n     \"@aws-cdk/aws-events\",\n     \"@aws-cdk/aws-events-targets\",\n     \"@aws-cdk/aws-lambda\",\n     \"@aws-cdk/aws-rds\",\n     \"@aws-cdk/aws-sns\",\n     \"@aws-cdk/aws-sns-subscriptions\",\n     \"@aws-cdk/aws-sqs\",\n     \"@aws-cdk/core\"\n   ],\n   devDependencies: {\n     \"aws-sdk\": Semver.caret(\"2.708.0\")\n   },\n\n   // jsii publishing\n\n   java: {\n     javaPackage: 'com.github.eladb.watchful',\n     mavenGroupId: 'com.github.eladb',\n     mavenArtifactId: 'cdk-watchful'\n   },\n   python: {\n     distName: 'cdk-watchful',\n     module: 'cdk_watchful'\n   }\n});\n\nproject.synth();\n```",
        "stability": "experimental",
        "summary": "AWS CDK construct library project."
      },
      "fqn": "projen.AwsCdkConstructLibrary",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-construct.ts",
          "line": 115
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 109
      },
      "methods": [
        {
          "docs": {
            "remarks": "Modules are currently added with a caret CDK version both as \"dependencies\"\nand \"peerDependencies\". This is because currently npm would not\nautomatically install peer dependencies that are not declared as concerete\ndependencies by the consumer, so this is a little npm \"hack\" so that\nconsumers will not need to depend on them directly if they don't interact\nwith them.",
            "stability": "experimental",
            "summary": "Adds CDK modules as runtime dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 147
          },
          "name": "addCdkDependencies",
          "parameters": [
            {
              "docs": {
                "summary": "names of cdk modules (e.g. `@aws-cdk/aws-lambda`)."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds CDK modules as test dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 158
          },
          "name": "addCdkTestDependencies",
          "parameters": [
            {
              "docs": {
                "summary": "names of cdk modules (e.g. `@aws-cdk/aws-lambda`)."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "AwsCdkConstructLibrary",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The target CDK version for this library."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 113
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.AwsCdkConstructLibraryOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the construct-lib-aws project."
      },
      "fqn": "projen.AwsCdkConstructLibraryOptions",
      "interfaces": [
        "projen.ConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 6
      },
      "name": "AwsCdkConstructLibraryOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.73.0\"",
            "stability": "experimental",
            "summary": "Minimum target version this library is tested against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 12
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install the @aws-cdk/assert library?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 34
          },
          "name": "cdkAssert",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which AWS CDK modules (those that start with \"@aws-cdk/\") does this library require when consumed?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 28
          },
          "name": "cdkDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS CDK modules required for testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 39
          },
          "name": "cdkTestDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "You can use this to prevent yarn to mix versions for your CDK dependencies and to prevent auto-updates.\nIf you use experimental features this will let you define the moment you include breaking changes.",
            "stability": "experimental",
            "summary": "Use pinned version instead of caret version for CDK."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 22
          },
          "name": "cdkVersionPinning",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.AwsCdkTypeScriptApp": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "awscdk-app-ts"
        },
        "stability": "experimental",
        "summary": "AWS CDK app in TypeScript."
      },
      "fqn": "projen.AwsCdkTypeScriptApp",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-app-ts.ts",
          "line": 89
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkTypeScriptAppOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 73
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an AWS CDK module dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 186
          },
          "name": "addCdkDependency",
          "parameters": [
            {
              "docs": {
                "summary": "The list of modules to depend on."
              },
              "name": "modules",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "AwsCdkTypeScriptApp",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CDK app entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 87
          },
          "name": "appEntrypoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Contents of `cdk.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 82
          },
          "name": "cdkConfig",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CDK version this app is using."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 77
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.AwsCdkTypeScriptAppOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.AwsCdkTypeScriptAppOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 22
      },
      "name": "AwsCdkTypeScriptAppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.73.0\"",
            "stability": "experimental",
            "summary": "AWS CDK version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 28
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"main.ts\"",
            "stability": "experimental",
            "summary": "The CDK app's entrypoint (relative to the source directory, which is \"src\" by default)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 56
          },
          "name": "appEntrypoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which AWS CDK modules (those that start with \"@aws-cdk/\") this app uses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 43
          },
          "name": "cdkDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "You can use this to prevent yarn to mix versions for your CDK dependencies and to prevent auto-updates.\nIf you use experimental features this will let you define the moment you include breaking changes.",
            "stability": "experimental",
            "summary": "Use pinned version instead of caret version for CDK."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 38
          },
          "name": "cdkVersionPinning",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional context to include in `cdk.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 48
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CdkApprovalLevel.BROADENING",
            "stability": "experimental",
            "summary": "To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 64
          },
          "name": "requireApproval",
          "optional": true,
          "type": {
            "fqn": "projen.CdkApprovalLevel"
          }
        }
      ]
    },
    "projen.Catalog": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Catalog",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 24
      },
      "name": "Catalog",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Should we announce new versions?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 34
          },
          "name": "announce",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Twitter account to @mention in announcement tweet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 28
          },
          "name": "twitter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.CdkApprovalLevel": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.CdkApprovalLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 8
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Approval is never required."
          },
          "name": "NEVER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Requires approval on any IAM or security-group-related change."
          },
          "name": "ANY_CHANGE"
        },
        {
          "docs": {
            "remarks": "removals don't require approval",
            "stability": "experimental",
            "summary": "Requires approval when IAM statements or traffic rules are added;"
          },
          "name": "BROADENING"
        }
      ],
      "name": "CdkApprovalLevel"
    },
    "projen.Component": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a project component."
      },
      "fqn": "projen.Component",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/component.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/component.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after synthesis."
          },
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 19
          },
          "name": "postSynthesize"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 14
          },
          "name": "synthesize"
        }
      ],
      "name": "Component",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 7
          },
          "name": "project",
          "type": {
            "fqn": "projen.Project"
          }
        }
      ]
    },
    "projen.ConstructLibrary": {
      "abstract": true,
      "assembly": "projen",
      "base": "projen.JsiiProject",
      "docs": {
        "stability": "experimental",
        "summary": "A multi-language library for CDK constructs."
      },
      "fqn": "projen.ConstructLibrary",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/construct-lib.ts",
          "line": 41
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.ConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 40
      },
      "name": "ConstructLibrary"
    },
    "projen.ConstructLibraryAws": {
      "assembly": "projen",
      "base": "projen.AwsCdkConstructLibrary",
      "docs": {
        "deprecated": "use `AwsCdkConstructLibrary`",
        "stability": "deprecated"
      },
      "fqn": "projen.ConstructLibraryAws",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-construct.ts",
          "line": 115
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 171
      },
      "name": "ConstructLibraryAws"
    },
    "projen.ConstructLibraryAwsOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "deprecated": "use `AwsCdkConstructLibraryOptions`",
        "stability": "deprecated"
      },
      "fqn": "projen.ConstructLibraryAwsOptions",
      "interfaces": [
        "projen.AwsCdkConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 168
      },
      "name": "ConstructLibraryAwsOptions"
    },
    "projen.ConstructLibraryCdk8s": {
      "assembly": "projen",
      "base": "projen.ConstructLibrary",
      "docs": {
        "custom": {
          "pjid": "cdk8s-construct"
        },
        "remarks": "A multi-language (jsii) construct library which vends constructs designed to\nuse within the CDK for Kubernetes (CDK8s), with a friendly workflow and\nautomatic publishing to the construct catalog.",
        "stability": "experimental",
        "summary": "CDK8s construct library project."
      },
      "fqn": "projen.ConstructLibraryCdk8s",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cdk8s-construct.ts",
          "line": 22
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.ConstructLibraryCdk8sOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cdk8s-construct.ts",
        "line": 21
      },
      "name": "ConstructLibraryCdk8s"
    },
    "projen.ConstructLibraryCdk8sOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ConstructLibraryCdk8sOptions",
      "interfaces": [
        "projen.ConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cdk8s-construct.ts",
        "line": 3
      },
      "name": "ConstructLibraryCdk8sOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.0.0-beta.3\"",
            "stability": "experimental",
            "summary": "Minimum target version this library is tested against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cdk8s-construct.ts",
            "line": 9
          },
          "name": "cdk8sVersion",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.ConstructLibraryOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ConstructLibraryOptions",
      "interfaces": [
        "projen.JsiiProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 3
      },
      "name": "ConstructLibraryOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- new version will be announced",
            "remarks": "https://awscdk.io/packages/[@SCOPE/]PACKAGE@VERSION\n\nThe catalog will also post a tweet to https://twitter.com/awscdkio with the\npackage name, description and the above link. You can disable these tweets\nthrough `{ announce: false }`.\n\nYou can also add a Twitter handle through `{ twitter: 'xx' }` which will be\nmentioned in the tweet.",
            "see": "https://github.com/construct-catalog/catalog",
            "stability": "experimental",
            "summary": "Libraries will be picked up by the construct catalog when they are published to npm as jsii modules and will be published under:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 21
          },
          "name": "catalog",
          "optional": true,
          "type": {
            "fqn": "projen.Catalog"
          }
        }
      ]
    },
    "projen.CoverageThreshold": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.CoverageThreshold",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 508
      },
      "name": "CoverageThreshold",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 509
          },
          "name": "branches",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 510
          },
          "name": "functions",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 511
          },
          "name": "lines",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 512
          },
          "name": "statements",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.DockerCompose": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Create a docker-compose YAML file."
      },
      "fqn": "projen.DockerCompose",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/docker-compose.ts",
          "line": 106
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "projen.DockerComposeProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a bind volume that binds a host path to the target path in the container."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 69
          },
          "name": "bindVolume",
          "parameters": [
            {
              "docs": {
                "summary": "Host path name."
              },
              "name": "sourcePath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Target path name."
              },
              "name": "targetPath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeVolumeBinding"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If you use this\nnamed volume in several services, the volume will be shared. In this\ncase, the volume configuration of the first-provided options are used.",
            "stability": "experimental",
            "summary": "Create a named volume and mount it to the target path."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 90
          },
          "name": "namedVolume",
          "parameters": [
            {
              "docs": {
                "summary": "Name of the volume."
              },
              "name": "volumeName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Target path."
              },
              "name": "targetPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "volume configuration (default: docker compose defaults)."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposeVolumeConfig"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeVolumeBinding"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a port mapping."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 53
          },
          "name": "portMapping",
          "parameters": [
            {
              "docs": {
                "summary": "Published port number."
              },
              "name": "publishedPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Container's port number."
              },
              "name": "targetPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Port mapping options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposePortMappingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeServicePort"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Depends on a service name."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 41
          },
          "name": "serviceName",
          "parameters": [
            {
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeServiceName"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a service to the docker-compose file."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 130
          },
          "name": "addService",
          "parameters": [
            {
              "docs": {
                "summary": "name of the service."
              },
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "a service description."
              },
              "name": "description",
              "type": {
                "fqn": "projen.DockerComposeServiceDescription"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeService"
            }
          }
        }
      ],
      "name": "DockerCompose"
    },
    "projen.DockerComposeBuild": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Build arguments for creating a docker image."
      },
      "fqn": "projen.DockerComposeBuild",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 348
      },
      "name": "DockerComposeBuild",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Docker build context directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 352
          },
          "name": "context",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none are provided",
            "stability": "experimental",
            "summary": "Build args."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 364
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"Dockerfile\"",
            "stability": "experimental",
            "summary": "A dockerfile to build from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 358
          },
          "name": "dockerfile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.DockerComposePortMappingOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for port mappings."
      },
      "fqn": "projen.DockerComposePortMappingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 26
      },
      "name": "DockerComposePortMappingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "DockerComposeProtocol.TCP",
            "stability": "experimental",
            "summary": "Port mapping protocol."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 31
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeProtocol"
          }
        }
      ]
    },
    "projen.DockerComposeProps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for DockerCompose."
      },
      "fqn": "projen.DockerComposeProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 9
      },
      "name": "DockerComposeProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no name is added",
            "example": "'myname' yields 'docker-compose.myname.yml'",
            "stability": "experimental",
            "summary": "A name to add to the docker-compose.yml filename."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 15
          },
          "name": "nameSuffix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Service descriptions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 20
          },
          "name": "services",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServiceDescription"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.DockerComposeProtocol": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Network protocol for port mapping."
      },
      "fqn": "projen.DockerComposeProtocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 333
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "TCP protocol."
          },
          "name": "TCP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "UDP protocol."
          },
          "name": "UDP"
        }
      ],
      "name": "DockerComposeProtocol"
    },
    "projen.DockerComposeService": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "A docker-compose service."
      },
      "fqn": "projen.DockerComposeService",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/docker-compose.ts",
          "line": 253
        },
        "parameters": [
          {
            "name": "serviceName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "serviceDescription",
            "type": {
              "fqn": "projen.DockerComposeServiceDescription"
            }
          }
        ]
      },
      "interfaces": [
        "projen.IDockerComposeServiceName"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 212
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make the service depend on another service."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 292
          },
          "name": "addDependsOn",
          "parameters": [
            {
              "name": "serviceName",
              "type": {
                "fqn": "projen.IDockerComposeServiceName"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an environment variable."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 284
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "environment variable name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "value of the environment variable."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a port mapping."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 275
          },
          "name": "addPort",
          "parameters": [
            {
              "docs": {
                "summary": "Published port number."
              },
              "name": "publishedPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Container's port number."
              },
              "name": "targetPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Port mapping options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposePortMappingOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a volume to the service."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 300
          },
          "name": "addVolume",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              }
            }
          ]
        }
      ],
      "name": "DockerComposeService",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Other services that this service depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 236
          },
          "name": "dependsOn",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeServiceName"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 251
          },
          "name": "environment",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Published ports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 246
          },
          "name": "ports",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServicePort"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 216
          },
          "name": "serviceName",
          "overrides": "projen.IDockerComposeServiceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Volumes mounted in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 241
          },
          "name": "volumes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Command to run in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 231
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 221
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Docker image build instructions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 226
          },
          "name": "imageBuild",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeBuild"
          }
        }
      ]
    },
    "projen.DockerComposeServiceDescription": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Description of a docker-compose.yml service."
      },
      "fqn": "projen.DockerComposeServiceDescription",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 161
      },
      "name": "DockerComposeServiceDescription",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- use the container's default command",
            "stability": "experimental",
            "summary": "Provide a command to the docker container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 180
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no dependencies",
            "stability": "experimental",
            "summary": "Names of other services this service depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 186
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeServiceName"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables are provided",
            "stability": "experimental",
            "summary": "Add environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 206
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: You must specify either `build` or `image` key.",
            "see": "imageBuild",
            "stability": "experimental",
            "summary": "Use a docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 167
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: You must specify either `imageBuild` or `image` key.",
            "see": "image",
            "stability": "experimental",
            "summary": "Build a docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 174
          },
          "name": "imageBuild",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeBuild"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no ports are mapped",
            "stability": "experimental",
            "summary": "Map some ports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 200
          },
          "name": "ports",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServicePort"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Use one of the following to create volumes:",
            "see": "DockerCompose.namedVolume() to create & mount a named volume",
            "stability": "experimental",
            "summary": "Mount some volumes into the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 194
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.DockerComposeServicePort": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A service port mapping."
      },
      "fqn": "projen.DockerComposeServicePort",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 308
      },
      "name": "DockerComposeServicePort",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Port mapping mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 327
          },
          "name": "mode",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Network protocol."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 322
          },
          "name": "protocol",
          "type": {
            "fqn": "projen.DockerComposeProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Published port number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 312
          },
          "name": "published",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Target port number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 317
          },
          "name": "target",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.DockerComposeVolumeConfig": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Volume configuration."
      },
      "fqn": "projen.DockerComposeVolumeConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 370
      },
      "name": "DockerComposeVolumeConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- value is not provided",
            "stability": "experimental",
            "summary": "Driver to use for the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 375
          },
          "name": "driver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Options to provide to the driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 380
          },
          "name": "driverOpts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- unset, indicating that docker-compose creates the volume",
            "stability": "experimental",
            "summary": "Set to true to indicate that the volume is externally created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 386
          },
          "name": "external",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- unset, indicating that docker-compose creates volumes as usual",
            "stability": "experimental",
            "summary": "Name of the volume for when the volume name isn't going to work in YAML."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 392
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.DockerComposeVolumeMount": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Service volume mounting information."
      },
      "fqn": "projen.DockerComposeVolumeMount",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 423
      },
      "name": "DockerComposeVolumeMount",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Volume source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 432
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Volume target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 437
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Type of volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 427
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Eslint": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Eslint",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/eslint.ts",
          "line": 65
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.EslintOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 44
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Do not lint these files."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 291
          },
          "name": "addIgnorePattern",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an eslint override."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 284
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "override",
              "type": {
                "fqn": "projen.EslintOverride"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an eslint rule."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 275
          },
          "name": "addRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        }
      ],
      "name": "Eslint",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Direct access to the eslint configuration (escape hatch)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 58
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "File patterns that should not be linted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 63
          },
          "name": "ignorePatterns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "eslint overrides."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 53
          },
          "name": "overrides",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.EslintOverride"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "eslint rules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 48
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.EslintOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.EslintOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 7
      },
      "name": "EslintOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Directories with source files to lint (e.g. [ \"src\", \"test\" ])."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 13
          },
          "name": "dirs",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "File types that should be linted (e.g. [ \".js\", \".ts\" ])."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 18
          },
          "name": "fileExtensions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 8
          },
          "name": "tsconfigPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ '*.js', '*.d.ts', 'node_modules/', '*.generated.ts', 'coverage' ]",
            "stability": "experimental",
            "summary": "List of file patterns that should not be linted, using the same syntax as .gitignore patterns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 26
          },
          "name": "ignorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.EslintOverride": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "eslint rules override."
      },
      "fqn": "projen.EslintOverride",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 32
      },
      "name": "EslintOverride",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Files or file patterns on which to apply the override."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 36
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The overriden rules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 41
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.FileBase": {
      "abstract": true,
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.FileBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/file.ts",
          "line": 54
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.FileBaseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 32
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Writes the file to the project's output directory."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 95
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 90
          },
          "name": "synthesizeContent",
          "parameters": [
            {
              "docs": {
                "summary": "Call `resolver.resolve(obj)` on any objects in order to resolve token functions."
              },
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "FileBase",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "This marker is used to prune these files before synthesis.",
            "stability": "experimental",
            "summary": "The marker to embed in files in order to identify them as projen files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 37
          },
          "name": "PROJEN_MARKER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The absoluate path of this file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 52
          },
          "name": "absolutePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The file path, relative to the project root."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 42
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if the file should be read-only or read-write."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 47
          },
          "name": "readonly",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.FileBaseOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.FileBaseOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 8
      },
      "name": "FileBaseOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "By\ndefault, all generated files are committed and anti-tamper is used to\nprotect against manual modifications.",
            "stability": "experimental",
            "summary": "Indicates whether this file should be committed to git or ignored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 16
          },
          "name": "committed",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Update the project's .gitignore file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 22
          },
          "name": "editGitignore",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether the generated file should be readonly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 29
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Gitpod": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "The Gitpod component which emits .gitpod.yml."
      },
      "fqn": "projen.Gitpod",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/gitpod.ts",
          "line": 181
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.GitpodOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 177
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Specify a customer docker setup."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 204
          },
          "name": "addCustomDocker",
          "parameters": [
            {
              "name": "docker",
              "type": {
                "fqn": "projen.GitpodDocker"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds another task to the Gitpod configuration."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 216
          },
          "name": "addTasks",
          "parameters": [
            {
              "docs": {
                "summary": "The additional tasks."
              },
              "name": "tasks",
              "type": {
                "fqn": "projen.GitpodTask"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Gitpod"
    },
    "projen.GitpodDocker": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "https://hub.docker.com/r/gitpod/workspace-full/ is the default Gitpod image",
        "stability": "experimental",
        "summary": "If the standard Docker image provided by Gitpod does not include the tools you need for your project, you can provide a custom Docker image OR Dockerfile."
      },
      "fqn": "projen.GitpodDocker",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 20
      },
      "name": "GitpodDocker",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "",
            "example": "{\n  file: '.gitpod.Docker',\n}",
            "stability": "experimental",
            "summary": "a Dockerfile to install deps."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 41
          },
          "name": "file",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the standard gitpod image (see [LINK] above)",
            "stability": "experimental",
            "summary": "A publicly available image to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 28
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.GitpodOpenIn": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Configure where in the IDE the terminal should be opened."
      },
      "fqn": "projen.GitpodOpenIn",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 77
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the bottom panel (default)."
          },
          "name": "BOTTOM"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the left panel."
          },
          "name": "LEFT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the right panel."
          },
          "name": "RIGHT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the main editor area."
          },
          "name": "MAIN"
        }
      ],
      "name": "GitpodOpenIn"
    },
    "projen.GitpodOpenMode": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Configure how the terminal should be opened relative to the previous task."
      },
      "fqn": "projen.GitpodOpenMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 47
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Opens in the same tab group right after the previous tab."
          },
          "name": "TAB_AFTER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Opens in the same tab group left before the previous tab."
          },
          "name": "TAB_BEFORE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the right."
          },
          "name": "SPLIT_RIGHT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the left."
          },
          "name": "SPLIT_LEFT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the top."
          },
          "name": "SPLIT_TOP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the bottom."
          },
          "name": "SPLIT_BOTTOM"
        }
      ],
      "name": "GitpodOpenMode"
    },
    "projen.GitpodOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "What can we configure for the GitPod component."
      },
      "fqn": "projen.GitpodOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 158
      },
      "name": "GitpodOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "Optional Docker Configuration Gitpod defaults to https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile if this is unset, so undefined here means `gitpod/workspace-full`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 165
          },
          "name": "docker",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodDocker"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "This must be defaulted per project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 171
          },
          "name": "tasks",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.GitpodTask"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.GitpodTask": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "Start Mode         | Execution\nFresh Workspace    | before && init && command\nRestart Workspace  | before && command\nSnapshot           | before && command\nPrebuild           | before && init && prebuild",
        "stability": "experimental",
        "summary": "Configure options for a task to be run when opening a Gitpod workspace (e.g. running tests, or starting a dev server)."
      },
      "fqn": "projen.GitpodTask",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 106
      },
      "name": "GitpodTask",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "What to run",
            "stability": "experimental",
            "summary": "Required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 111
          },
          "name": "command",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "stability": "experimental",
            "summary": "In case you need to run something even before init, that is a requirement for both init and command, you can use the before property."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 136
          },
          "name": "before",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "remarks": "Such tasks are usually builds or downloading\ndependencies. Anything you only want to do once but not when you restart a workspace or start a snapshot.",
            "stability": "experimental",
            "summary": "The init property can be used to specify shell commands that should only be executed after a workspace was freshly cloned and needs to be initialized somehow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 145
          },
          "name": "init",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- task names are omitted when blank like GH actions",
            "stability": "experimental",
            "summary": "A name for this."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 117
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitpodOpenIn.BOTTOM",
            "stability": "experimental",
            "summary": "You can configure where in the IDE the terminal should be opened."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 129
          },
          "name": "openIn",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodOpenIn"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitpodOpenMode.TAB_AFTER",
            "stability": "experimental",
            "summary": "You can configure how the terminal should be opened relative to the previous task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 123
          },
          "name": "openMode",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodOpenMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "remarks": "It is meant to run additional long running\nprocesses that could be useful, e.g. running test suites.",
            "stability": "experimental",
            "summary": "The optional prebuild command will be executed during prebuilds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 152
          },
          "name": "prebuild",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.HasteConfig": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.HasteConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 515
      },
      "name": "HasteConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 516
          },
          "name": "computeSha1",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 517
          },
          "name": "defaultPlatform",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 518
          },
          "name": "hasteImplModulePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 519
          },
          "name": "platforms",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 520
          },
          "name": "throwOnModuleCollision",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.IDockerComposeServiceName": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "An interface providing the name of a docker compose service."
      },
      "fqn": "projen.IDockerComposeServiceName",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 151
      },
      "name": "IDockerComposeServiceName",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the docker compose service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 155
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.IDockerComposeVolumeBinding": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Volume binding information."
      },
      "fqn": "projen.IDockerComposeVolumeBinding",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 398
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "mounting instructions for the service.",
            "stability": "experimental",
            "summary": "Binds the requested volume to the docker-compose volume configuration and provide mounting instructions for synthesis."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 405
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "the volume configuration."
              },
              "name": "volumeConfig",
              "type": {
                "fqn": "projen.IDockerComposeVolumeConfig"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeVolumeMount"
            }
          }
        }
      ],
      "name": "IDockerComposeVolumeBinding"
    },
    "projen.IDockerComposeVolumeConfig": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Storage for volume configuration."
      },
      "fqn": "projen.IDockerComposeVolumeConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 411
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add volume configuration to the repository."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 417
          },
          "name": "addVolumeConfiguration",
          "parameters": [
            {
              "name": "volumeName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "configuration",
              "type": {
                "fqn": "projen.DockerComposeVolumeConfig"
              }
            }
          ]
        }
      ],
      "name": "IDockerComposeVolumeConfig"
    },
    "projen.IResolver": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "API for resolving tokens when synthesizing file content."
      },
      "fqn": "projen.IResolver",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 108
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "package": "options Resolve options"
            },
            "stability": "experimental",
            "summary": "Given a value (object/string/array/whatever, looks up any functions inside the object and returns an object where all functions are called."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 115
          },
          "name": "resolve",
          "parameters": [
            {
              "docs": {
                "summary": "The value to resolve."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.ResolveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IResolver"
    },
    "projen.IgnoreFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.IgnoreFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ignore-file.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ignore-file.ts",
        "line": 4
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 12
          },
          "name": "exclude",
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 16
          },
          "name": "include",
          "parameters": [
            {
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 20
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IgnoreFile"
    },
    "projen.Jest": {
      "assembly": "projen",
      "docs": {
        "remarks": "- `test` will run `jest --passWithNoTests`\n- `test:watch` will run `jest --watch`\n- `test:update` will run `jest -u`",
        "stability": "experimental",
        "summary": "Installs the following npm scripts:."
      },
      "fqn": "projen.Jest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/jest.ts",
          "line": 545
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.JestOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 533
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 617
          },
          "name": "addIgnorePattern",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 622
          },
          "name": "addReporter",
          "parameters": [
            {
              "name": "reporter",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Merges passed in typescript config options with jest configured typescript options from .projenrc Add Jest config settings for typescript options."
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 631
          },
          "name": "generateTypescriptConfig",
          "parameters": [
            {
              "docs": {
                "summary": "TypescriptConfigOptions."
              },
              "name": "options",
              "type": {
                "fqn": "projen.TypescriptConfigOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.TypescriptConfig"
            }
          }
        }
      ],
      "name": "Jest",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Escape hatch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 537
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.JestConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JestConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 9
      },
      "name": "JestConfigOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "All modules used in your tests will have a replacement implementation, keeping the API surface",
            "stability": "experimental",
            "summary": "This option tells Jest that all imported modules in your tests should be mocked automatically."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 15
          },
          "name": "automock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0",
            "remarks": "The bail config option can be used here to have Jest stop running tests after n failures.\nSetting bail to true is the same as setting bail to 1.",
            "stability": "experimental",
            "summary": "By default, Jest runs all tests and produces all errors into the console upon completion."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 23
          },
          "name": "bail",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "primitive": "boolean"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"/tmp/<path>\"",
            "stability": "experimental",
            "summary": "The directory where Jest should store its cached dependency information."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 29
          },
          "name": "cacheDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Equivalent to calling jest.clearAllMocks() before each test.\nThis does not remove any mock implementation that may have been provided",
            "stability": "experimental",
            "summary": "Automatically clear mock calls and instances before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 37
          },
          "name": "clearMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Because this retrofits all executed files with coverage collection statements,\nit may significantly slow down your tests",
            "stability": "experimental",
            "summary": "Indicates whether the coverage information should be collected while executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 45
          },
          "name": "collectCoverage",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "An array of glob patterns indicating a set of files for which coverage information should be collected."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 51
          },
          "name": "collectCoverageFrom",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"coverage\"",
            "stability": "experimental",
            "summary": "The directory where Jest should output its coverage files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 57
          },
          "name": "coverageDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"/node_modules/\"",
            "remarks": "If the file path matches any of the patterns, coverage information will be skipped",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all file paths before executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 64
          },
          "name": "coveragePathIgnorePatterns",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"babel\"",
            "remarks": "Allowed values are babel (default) or v8",
            "stability": "experimental",
            "summary": "Indicates which provider should be used to instrument code for coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 71
          },
          "name": "coverageProvider",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"json\", \"lcov\", \"text\", \"clover\"]",
            "remarks": "Any istanbul reporter can be used",
            "stability": "experimental",
            "summary": "A list of reporter names that Jest uses when writing coverage reports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 77
          },
          "name": "coverageReporters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This will be used to configure minimum threshold enforcement\nfor coverage results. Thresholds can be specified as global, as a glob, and as a directory or file path.\nIf thresholds aren't met, jest will fail.",
            "stability": "experimental",
            "summary": "Specify the global coverage thresholds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 85
          },
          "name": "coverageThreshold",
          "optional": true,
          "type": {
            "fqn": "projen.CoverageThreshold"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "It must be a node module that exports an object with an extract function",
            "stability": "experimental",
            "summary": "This option allows the use of a custom dependency extractor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 92
          },
          "name": "dependencyExtractor",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "Allows for a label to be printed alongside a test while it is running."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 98
          },
          "name": "displayName",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Useful for easing the upgrade process.",
            "stability": "experimental",
            "summary": "Make calling deprecated APIs throw helpful error messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 104
          },
          "name": "errorOnDeprecated",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "Test files run inside a vm, which slows calls to global context properties (e.g. Math). With this option you can specify extra properties to be defined inside the vm for faster lookups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 111
          },
          "name": "extraGlobals",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- ['']",
            "remarks": "With this option, you can overwrite this behavior and include otherwise ignored files in code coverage.",
            "stability": "experimental",
            "summary": "Test files are normally ignored from collecting code coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 118
          },
          "name": "forceCoverageMatch",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "stability": "experimental",
            "summary": "A set of global variables that need to be available in all test environments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 124
          },
          "name": "globals",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This function gets Jest's globalConfig object as a parameter.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom global setup module which exports an async function that is triggered once before all test suites."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 131
          },
          "name": "globalSetup",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This function gets Jest's globalConfig object as a parameter.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom global teardown module which exports an async function that is triggered once after all test suites."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 138
          },
          "name": "globalTeardown",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "stability": "experimental",
            "summary": "This will be used to configure the behavior of jest-haste-map, Jest's internal file crawler/cache system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 144
          },
          "name": "haste",
          "optional": true,
          "type": {
            "fqn": "projen.HasteConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "stability": "experimental",
            "summary": "Insert Jest's globals (expect, test, describe, beforeEach etc.) into the global environment. If you set this to false, you should import from @jest/globals."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 151
          },
          "name": "injectGlobals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5",
            "stability": "experimental",
            "summary": "A number limiting the number of tests that are allowed to run at the same time when using test.concurrent. Any test above this limit will be queued and executed once a slot is released."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 158
          },
          "name": "maxConcurrency",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"node_modules\"]",
            "remarks": "Setting this option will override the default, if you wish to still search node_modules for packages\ninclude it along with any other options: [\"node_modules\", \"bower_components\"]",
            "stability": "experimental",
            "summary": "An array of directory names to be searched recursively up from the requiring module's location."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 166
          },
          "name": "moduleDirectories",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"js\", \"json\", \"jsx\", \"ts\", \"tsx\", \"node\"]",
            "remarks": "If you require modules without specifying a file extension,\nthese are the extensions Jest will look for, in left-to-right order.",
            "stability": "experimental",
            "summary": "An array of file extensions your modules use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 173
          },
          "name": "moduleFileExtensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- null",
            "stability": "experimental",
            "summary": "A map from regular expressions to module names or to arrays of module names that allow to stub out resources, like images or styles with a single module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 180
          },
          "name": "moduleNameMapper",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If a given module's path matches any of the patterns,\nit will not be require()-able in the test environment.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all module paths before those paths are to be considered 'visible' to the module loader."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 188
          },
          "name": "modulePathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Use the <rootDir> string token to include\nthe path to your project's root directory. Example: [\"<rootDir>/app/\"].",
            "stability": "experimental",
            "summary": "An alternative API to setting the NODE_PATH env variable, modulePaths is an array of absolute paths to additional locations to search when resolving modules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 196
          },
          "name": "modulePaths",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Activates notifications for test results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 202
          },
          "name": "notify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- failure-change",
            "remarks": "Requires notify: true",
            "stability": "experimental",
            "summary": "Specifies notification mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 208
          },
          "name": "notifyMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "A preset should point to an npm module\nthat has a jest-preset.json or jest-preset.js file at the root.",
            "stability": "experimental",
            "summary": "A preset that is used as a base for Jest's configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 215
          },
          "name": "preset",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"prettier\"",
            "stability": "experimental",
            "summary": "Sets the path to the prettier node module used to update inline snapshots."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 221
          },
          "name": "prettierPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This is great for monorepos or\nwhen working on multiple projects at the same time.",
            "stability": "experimental",
            "summary": "When the projects configuration is provided with an array of paths or glob patterns, Jest will run tests in all of the specified projects at the same time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 229
          },
          "name": "projects",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "map"
                      }
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "A custom reporter is a class\nthat implements onRunStart, onTestStart, onTestResult, onRunComplete methods that will be\ncalled when any of those events occurs.",
            "stability": "experimental",
            "summary": "Use this configuration option to add custom reporters to Jest."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 237
          },
          "name": "reporters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Equivalent to calling jest.resetAllMocks()\nbefore each test. This will lead to any mocks having their fake implementations removed but\ndoes not restore their initial implementation.",
            "stability": "experimental",
            "summary": "Automatically reset mock state before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 245
          },
          "name": "resetMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Enabling resetModules\ngoes a step further and resets the module registry before running each individual test.",
            "stability": "experimental",
            "summary": "By default, each test file gets its own independent module registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 252
          },
          "name": "resetModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "https://jestjs.io/docs/en/configuration#resolver-string",
            "stability": "experimental",
            "summary": "This option allows the use of a custom resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 259
          },
          "name": "resolver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Equivalent to calling jest.restoreAllMocks()\nbefore each test. This will lead to any mocks having their fake implementations removed and\nrestores their initial implementation.",
            "stability": "experimental",
            "summary": "Automatically restore mock state before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 267
          },
          "name": "restoreMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- directory of the package.json",
            "remarks": "If you put your Jest\nconfig inside your package.json and want the root directory to be the root of your repo, the\nvalue for this config param will default to the directory of the package.json.",
            "stability": "experimental",
            "summary": "The root directory that Jest should scan for tests and modules within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 275
          },
          "name": "rootDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"<rootDir>\"]",
            "stability": "experimental",
            "summary": "A list of paths to directories that Jest should use to search for files in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 281
          },
          "name": "roots",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jest-runner\"",
            "stability": "experimental",
            "summary": "This option allows you to use a custom runner instead of Jest's default test runner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 287
          },
          "name": "runner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Each setupFile will be run once per test file. Since every test runs in its own environment,\nthese scripts will be executed in the testing environment immediately before executing the\ntest code itself.",
            "stability": "experimental",
            "summary": "A list of paths to modules that run some code to configure or set up the testing environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 296
          },
          "name": "setupFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Since setupFiles executes before the test\nframework is installed in the environment, this script file presents you the opportunity of\nrunning some code immediately after the test framework has been installed in the environment.",
            "stability": "experimental",
            "summary": "A list of paths to modules that run some code to configure or set up the testing framework before each test file in the suite is executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 305
          },
          "name": "setupFilesAfterEnv",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5",
            "stability": "experimental",
            "summary": "The number of seconds after which a test is considered as slow and reported as such in the results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 311
          },
          "name": "slowTestThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This config option lets you customize\nwhere Jest stores snapshot files on disk.",
            "stability": "experimental",
            "summary": "The path to a module that can resolve test<->snapshot path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 318
          },
          "name": "snapshotResolver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "= []",
            "stability": "experimental",
            "summary": "A list of paths to snapshot serializer modules Jest should use for snapshot testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 324
          },
          "name": "snapshotSerializers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jsdom\"",
            "remarks": "The default environment in Jest is a\nbrowser-like environment through jsdom. If you are building a node service, you can use the node\noption to use a node-like environment instead.",
            "stability": "experimental",
            "summary": "The test environment that will be used for testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 332
          },
          "name": "testEnvironment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "remarks": "The relevant options depend on the environment.",
            "stability": "experimental",
            "summary": "Test environment options that will be passed to the testEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 339
          },
          "name": "testEnvironmentOptions",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1",
            "stability": "experimental",
            "summary": "The exit code Jest returns on test failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 345
          },
          "name": "testFailureExitCode",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['**\\/__tests__/**\\/*.[jt]s?(x)', '**\\/?(*.)+(spec|test).[tj]s?(x)']",
            "remarks": "By default it looks for .js, .jsx, .ts and .tsx\nfiles inside of __tests__ folders, as well as any files with a suffix of .test or .spec\n(e.g. Component.test.js or Component.spec.js). It will also find files called test.js or spec.js.",
            "stability": "experimental",
            "summary": "The glob patterns Jest uses to detect test files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 353
          },
          "name": "testMatch",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"/node_modules/\"]",
            "remarks": "If the test path matches any of the patterns, it will be skipped.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all test paths before executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 360
          },
          "name": "testPathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- (/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$",
            "remarks": "By default it looks for .js, .jsx, .ts and .tsx\nfiles inside of __tests__ folders, as well as any files with a suffix of .test or .spec\n(e.g. Component.test.js or Component.spec.js). It will also find files called test.js or spec.js.",
            "stability": "experimental",
            "summary": "The pattern or patterns Jest uses to detect test files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 368
          },
          "name": "testRegex",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "This option allows the use of a custom results processor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 374
          },
          "name": "testResultsProcessor",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jasmine2\"",
            "remarks": "The default is jasmine2. A custom test runner\ncan be provided by specifying a path to a test runner implementation.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom test runner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 381
          },
          "name": "testRunner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "jest": "/test-sequencer\""
            },
            "default": "- \"",
            "remarks": "Sort may optionally return a Promise.",
            "stability": "experimental",
            "summary": "This option allows you to use a custom sequencer instead of Jest's default."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 388
          },
          "name": "testSequencer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5000",
            "stability": "experimental",
            "summary": "Default timeout of a test in milliseconds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 394
          },
          "name": "testTimeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"http://localhost\"",
            "remarks": "It is reflected in properties such as location.href.",
            "stability": "experimental",
            "summary": "This option sets the URL for the jsdom environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 400
          },
          "name": "testURL",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"real\"",
            "remarks": "Fake timers are useful when a piece of code sets a long timeout that we don't want to wait for in a test.",
            "stability": "experimental",
            "summary": "Setting this value to legacy or fake allows the use of fake timers for functions such as setTimeout."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 407
          },
          "name": "timers",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {\"\\\\.[jt]sx?$\": \"babel-jest\"}",
            "remarks": "A transformer is a module that provides a\nsynchronous function for transforming source files.",
            "stability": "experimental",
            "summary": "A map from regular expressions to paths to transformers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 414
          },
          "name": "transform",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"/node_modules/\", \"\\\\.pnp\\\\.[^\\\\\\/]+$\"]",
            "remarks": "If the test path matches any of the patterns, it will not be transformed.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all source file paths before transformation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 421
          },
          "name": "transformIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If a module's path matches any of the patterns in this list, it\nwill not be automatically mocked by the module loader.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 429
          },
          "name": "unmockedModulePathPatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "All errors will also\nstill be shown on the bottom after execution. Note that if there is only one test file being run\nit will default to true.",
            "stability": "experimental",
            "summary": "Indicates whether each individual test should be reported during the run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 437
          },
          "name": "verbose",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "stability": "experimental",
            "summary": "Whether to use watchman for file crawling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 457
          },
          "name": "watchman",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If the file path matches any of the patterns, when it is updated, it will not trigger\na re-run of tests.",
            "stability": "experimental",
            "summary": "An array of RegExp patterns that are matched against all source file paths before re-running tests in watch mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 445
          },
          "name": "watchPathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 451
          },
          "name": "watchPlugins",
          "optional": true,
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "projen.JestOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JestOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 465
      },
      "name": "JestOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "deprecated": "use jestConfig.collectCoverage",
            "remarks": "Deprecated",
            "stability": "deprecated",
            "summary": "Collect coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 471
          },
          "name": "coverage",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[\"/node_modules/\"]",
            "deprecated": "use jestConfig.coveragePathIgnorePatterns or jestConfig.testPathIgnorePatterns respectively",
            "stability": "deprecated",
            "summary": "Defines `testPathIgnorePatterns` and `coveragePathIgnorePatterns`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 478
          },
          "name": "ignorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 503
          },
          "name": "jestConfig",
          "optional": true,
          "type": {
            "fqn": "projen.JestConfigOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- installs the latest jest version",
            "stability": "experimental",
            "summary": "The version of jest to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 501
          },
          "name": "jestVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Output directory is `test-reports/`.",
            "stability": "experimental",
            "summary": "Result processing with jest-junit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 487
          },
          "name": "junitReporting",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Preserve the default Jest reporter when additional reporters are added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 494
          },
          "name": "preserveDefaultReporters",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 505
          },
          "name": "typescriptConfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfigOptions"
          }
        }
      ]
    },
    "projen.JsiiDotNetTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiDotNetTarget",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 133
      },
      "name": "JsiiDotNetTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 134
          },
          "name": "dotNetNamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 135
          },
          "name": "packageId",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiJavaTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiJavaTarget",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 115
      },
      "name": "JsiiJavaTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 116
          },
          "name": "javaPackage",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 118
          },
          "name": "mavenArtifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 117
          },
          "name": "mavenGroupId",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "stability": "experimental",
        "summary": "Multi-language jsii library project."
      },
      "fqn": "projen.JsiiProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/jsii-project.ts",
          "line": 145
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.JsiiProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 141
      },
      "name": "JsiiProject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 142
          },
          "name": "eslint",
          "optional": true,
          "overrides": "projen.TypeScriptProject",
          "type": {
            "fqn": "projen.Eslint"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 143
          },
          "name": "twineRegistryUrl",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiProjectOptions",
      "interfaces": [
        "projen.NodeProjectCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 13
      },
      "name": "JsiiProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_EMAIL",
            "stability": "experimental",
            "summary": "Email or URL of the library author."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 46
          },
          "name": "authorAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_NAME",
            "stability": "experimental",
            "summary": "The name of the library author."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 40
          },
          "name": "authorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$BASEDIR",
            "stability": "experimental",
            "summary": "The name of the library."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 23
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_REMOTE",
            "stability": "experimental",
            "summary": "Git repository URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 34
          },
          "name": "repository",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `authorAddress`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 51
          },
          "name": "authorEmail",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 58
          },
          "name": "authorOrganization",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `authorAddress`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 56
          },
          "name": "authorUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "- You can manually run compatibility tests using `yarn compat` if this feature is disabled.\n- You can ignore compatibility failures by adding lines to a \".compatignore\" file.",
            "stability": "experimental",
            "summary": "Automatically run API compatibility test against the latest version published to npm after compilation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 99
          },
          "name": "compat",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".compatignore\"",
            "stability": "experimental",
            "summary": "Name of the ignore file for API compatibility tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 106
          },
          "name": "compatIgnore",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Library description."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 28
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically generate API.md from jsii."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 89
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 64
          },
          "name": "dotnet",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiDotNetTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install eslint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 71
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 62
          },
          "name": "java",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiJavaTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Use jest for unit tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 77
          },
          "name": "jest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "Jest options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 83
          },
          "name": "jestOptions",
          "optional": true,
          "type": {
            "fqn": "projen.JestOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 59
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 63
          },
          "name": "python",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiPythonTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 17
          },
          "name": "rootdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 60
          },
          "name": "stability",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiPythonTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiPythonTarget",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 121
      },
      "name": "JsiiPythonTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 122
          },
          "name": "distName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 123
          },
          "name": "module",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- twine default",
            "stability": "experimental",
            "summary": "The registry url to use when releasing packages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 130
          },
          "name": "twineRegistryUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsonFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a JSON file."
      },
      "fqn": "projen.JsonFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/json.ts",
          "line": 51
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.JsonFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/json.ts",
        "line": 33
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 63
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "JsonFile",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if the projen marker JSON-comment will be added to the output object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 44
          },
          "name": "marker",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "This object can be mutated until the project is\nsynthesized.",
            "stability": "experimental",
            "summary": "The output object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 38
          },
          "name": "obj",
          "type": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if empty objects and arrays are omitted from the output object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 49
          },
          "name": "omitEmpty",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.JsonFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `JsonFile`."
      },
      "fqn": "projen.JsonFileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/json.ts",
        "line": 7
      },
      "name": "JsonFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Adds the projen marker as a \"JSON-comment\" to the root object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 21
          },
          "name": "marker",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{} an empty object (use `file.obj` to mutate).",
            "remarks": "You can modify the object's contents\nbefore synthesis.",
            "stability": "experimental",
            "summary": "The object that will be serialized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 14
          },
          "name": "obj",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Omits empty objects and arrays."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 27
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.License": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.License",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/license.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "spdx",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.LicenseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/license.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 40
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "License"
    },
    "projen.LicenseOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.LicenseOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/license.ts",
        "line": 5
      },
      "name": "LicenseOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"\"",
            "stability": "experimental",
            "summary": "Copyright owner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 11
          },
          "name": "copyrightOwner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current year (e.g. \"2020\")",
            "stability": "experimental",
            "summary": "Period of license (e.g. \"1998-2023\")."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 18
          },
          "name": "copyrightPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Makefile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "Minimal Makefile."
      },
      "fqn": "projen.Makefile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/makefile.ts",
          "line": 72
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.MakefileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a target to all."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 94
          },
          "name": "addAll",
          "parameters": [
            {
              "name": "target",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add multiple targets to all."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 102
          },
          "name": "addAlls",
          "parameters": [
            {
              "name": "targets",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a rule to the Makefile."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 110
          },
          "name": "addRule",
          "parameters": [
            {
              "name": "rule",
              "type": {
                "fqn": "projen.Rule"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add multiple rules to the Makefile."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 119
          },
          "name": "addRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "fqn": "projen.Rule"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 130
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Makefile",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "List of rule definitions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 67
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Rule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.MakefileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Makefiles."
      },
      "fqn": "projen.MakefileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 44
      },
      "name": "MakefileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "List of targets to build when Make is invoked without specifying any targets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 50
          },
          "name": "all",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Rules to include in the Makefile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 57
          },
          "name": "rules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Rule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.NodePackageManager": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The node package manager to use."
      },
      "fqn": "projen.NodePackageManager",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 24
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use `yarn` as the package manager."
          },
          "name": "YARN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use `npm` as the package manager."
          },
          "name": "NPM"
        }
      ],
      "name": "NodePackageManager"
    },
    "projen.NodeProject": {
      "assembly": "projen",
      "base": "projen.Project",
      "docs": {
        "stability": "experimental",
        "summary": "Node.js project."
      },
      "fqn": "projen.NodeProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/node-project.ts",
          "line": 701
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.NodeProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 613
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1066
          },
          "name": "addBins",
          "parameters": [
            {
              "name": "bins",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "deprecated": "use `project.buildTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1184
          },
          "name": "addBuildCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `addBundledDeps()`",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1088
          },
          "name": "addBundledDependencies",
          "parameters": [
            {
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Bundled dependencies will be added as normal dependencies as well as to the\n`bundledDependencies` section of your `package.json`.",
            "stability": "experimental",
            "summary": "Defines bundled dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1295
          },
          "name": "addBundledDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `project.compileTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1164
          },
          "name": "addCompileCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `addDeps()`",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1075
          },
          "name": "addDependencies",
          "parameters": [
            {
              "name": "deps",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "projen.Semver"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "bundle",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines normal dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1243
          },
          "name": "addDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `addDevDeps()`",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1109
          },
          "name": "addDevDependencies",
          "parameters": [
            {
              "name": "deps",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "projen.Semver"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines development/test dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1258
          },
          "name": "addDevDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Directly set fields in `package.json`."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1194
          },
          "name": "addFields",
          "parameters": [
            {
              "docs": {
                "summary": "The fields to set."
              },
              "name": "fields",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds keywords to package.json (deduplicated)."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1204
          },
          "name": "addKeywords",
          "parameters": [
            {
              "docs": {
                "summary": "The keywords to add."
              },
              "name": "keywords",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `addPeerDeps()`",
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1118
          },
          "name": "addPeerDependencies",
          "parameters": [
            {
              "name": "deps",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "projen.Semver"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.PeerDependencyOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "When adding peer dependencies, a devDependency will also be added on the\npinned version of the declared peer. This will ensure that you are testing\nyour code against the minimum version required from your consumers.",
            "stability": "experimental",
            "summary": "Defines peer dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1277
          },
          "name": "addPeerDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `project.testTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1174
          },
          "name": "addTestCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if a script by the name name is defined."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1156
          },
          "name": "hasScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1328
          },
          "name": "postSynthesize",
          "overrides": "projen.Project"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called before all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1324
          },
          "name": "preSynthesize",
          "overrides": "projen.Project"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Removes the npm script (always successful)."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1147
          },
          "name": "removeScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If\nnpmTaskExecution is set to PROJEN, the command will be `npx projen TASK`.\nIf it is set to SHELL, the command will be `yarn run TASK` (or `npm run\nTASK`).",
            "stability": "experimental",
            "summary": "Returns the shell command to execute in order to run a task."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1640
          },
          "name": "runTaskCommand",
          "parameters": [
            {
              "docs": {
                "summary": "The task for which the command is required."
              },
              "name": "task",
              "type": {
                "fqn": "projen.tasks.Task"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Replaces the contents of an npm package.json script."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1139
          },
          "name": "setScript",
          "parameters": [
            {
              "docs": {
                "summary": "The script name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The command to execute."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "NodeProject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 617
          },
          "name": "allowLibraryDependencies",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if workflows have anti-tamper checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 665
          },
          "name": "antitamper",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "It spawns: compile + test + release + package",
            "stability": "experimental",
            "summary": "The task resposible for a full release build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 633
          },
          "name": "buildTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "remarks": "By default for node.js projects this task is empty.",
            "stability": "experimental",
            "summary": "Compiles the code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 623
          },
          "name": "compileTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 618
          },
          "name": "entrypoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1210
          },
          "name": "installWorkflowSteps",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 616
          },
          "name": "manifest",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 667
          },
          "name": "npmDistTag",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 669
          },
          "name": "npmRegistry",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 694
          },
          "name": "npmTaskExecution",
          "type": {
            "fqn": "projen.NpmTaskExecution"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The package manager to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 674
          },
          "name": "packageManager",
          "protected": true,
          "type": {
            "fqn": "projen.NodePackageManager"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command to use in order to run the projen CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 699
          },
          "name": "projenCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command to use to run scripts (e.g. `yarn run` or `npm run` depends on the package manager)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 679
          },
          "name": "runScriptCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which tests reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 684
          },
          "name": "testdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tests the code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 628
          },
          "name": "testTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "remarks": "`undefined` if `buildWorkflow` is disabled.",
            "stability": "experimental",
            "summary": "The PR build GitHub workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 648
          },
          "name": "buildWorkflow",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 649
          },
          "name": "buildWorkflowJobId",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Jest configuration (if enabled)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 689
          },
          "name": "jest",
          "optional": true,
          "type": {
            "fqn": "projen.Jest"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 658
          },
          "name": "maxNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 615
          },
          "name": "mergify",
          "optional": true,
          "type": {
            "fqn": "projen.github.Mergify"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 657
          },
          "name": "minNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 614
          },
          "name": "npmignore",
          "optional": true,
          "type": {
            "fqn": "projen.IgnoreFile"
          }
        },
        {
          "docs": {
            "remarks": "`undefined` if `releaseWorkflow` is disabled.",
            "stability": "experimental",
            "summary": "The release GitHub workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 654
          },
          "name": "releaseWorkflow",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 655
          },
          "name": "releaseWorkflowJobId",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodeProjectCommonOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodeProjectCommonOptions",
      "interfaces": [
        "projen.ProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 36
      },
      "name": "NodeProjectCommonOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This is normally only allowed for libraries. For apps, there's no meaning\nfor specifying these.",
            "stability": "experimental",
            "summary": "Allow the project to include `peerDependencies` and `bundledDependencies`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 407
          },
          "name": "allowLibraryDependencies",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Checks that after build there are no modified files on git."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 245
          },
          "name": "antitamper",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically add all executables under the `bin` directory to your `package.json` file under the `bin` section."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 142
          },
          "name": "autoDetectBin",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "You can use this option to add/customize how binaries are represented in\nyour `package.json`, but unless `autoDetectBin` is `false`, every\nexecutable file under `bin` will automatically be added to this section.",
            "stability": "experimental",
            "summary": "Binary programs vended with your module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 134
          },
          "name": "bin",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Define a GitHub workflow for building PRs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 174
          },
          "name": "buildWorkflow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `bundledDeps`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 105
          },
          "name": "bundledDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "These modules will be\nadded both to the `dependencies` section and `peerDependencies` section of\nyour `package.json`.\n\nThe recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "List of dependencies to bundle into this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 100
          },
          "name": "bundledDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 182
          },
          "name": "codeCov",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if this option is not specified, only public repositories are supported",
            "stability": "experimental",
            "summary": "Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 189
          },
          "name": "codeCovTokenSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to the value of authorName or \"\" if `authorName` is undefined.",
            "stability": "experimental",
            "summary": "License copyright owner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 294
          },
          "name": "copyrightOwner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current year",
            "stability": "experimental",
            "summary": "The copyright years to put in the LICENSE file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 301
          },
          "name": "copyrightPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"master\"",
            "stability": "experimental",
            "summary": "The name of the main release branch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 168
          },
          "name": "defaultReleaseBranch",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include dependabot configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 329
          },
          "name": "dependabot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Options for dependabot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 336
          },
          "name": "dependabotOptions",
          "optional": true,
          "type": {
            "fqn": "projen.github.DependabotOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `deps`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 110
          },
          "name": "dependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Semver"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "example": "[ 'express', 'lodash', 'foo@^2' ]",
            "remarks": "The recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "Runtime dependencies of this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 50
          },
          "name": "deps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `devDeps`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 115
          },
          "name": "devDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Semver"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "example": "[ 'typescript', '@types/express' ]",
            "remarks": "These dependencies will only be\navailable in your build environment but will not be fetched when this\nmodule is consumed.\n\nThe recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "Build dependencies for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 67
          },
          "name": "devDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"lib/index.js\"",
            "remarks": "Set to an empty string to not include `main` in your package.json",
            "stability": "experimental",
            "summary": "Module entrypoint (`main` in `package.json`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 429
          },
          "name": "entrypoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Keywords to include in `package.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 147
          },
          "name": "keywords",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"lib\"",
            "stability": "experimental",
            "summary": "Compiler artifacts output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 308
          },
          "name": "libdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no max",
            "stability": "experimental",
            "summary": "Minimum node.js version to require via `engines` (inclusive)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 259
          },
          "name": "maxNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Adds mergify configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 343
          },
          "name": "mergify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"auto-merge\"",
            "remarks": "To disable, set this value to an empty string.",
            "stability": "experimental",
            "summary": "Automatically merge PRs that build successfully and have this label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 359
          },
          "name": "mergifyAutoMergeLabel",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Options for mergify."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 350
          },
          "name": "mergifyOptions",
          "optional": true,
          "type": {
            "fqn": "projen.github.MergifyOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no \"engines\" specified",
            "stability": "experimental",
            "summary": "Minimum Node.js version to require via package.json `engines` (inclusive)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 252
          },
          "name": "minNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "stability": "experimental",
            "summary": "The dist-tag to use when releasing to npm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 273
          },
          "name": "npmDistTag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional entries to .npmignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 420
          },
          "name": "npmignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 415
          },
          "name": "npmignoreEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"registry.npmjs.org\"",
            "stability": "experimental",
            "summary": "The registry url to use when releasing packages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 280
          },
          "name": "npmRegistry",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NpmTaskExecution.PROJEN",
            "stability": "experimental",
            "summary": "Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 449
          },
          "name": "npmTaskExecution",
          "optional": true,
          "type": {
            "fqn": "projen.NpmTaskExecution"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NodePackageManager.YARN",
            "stability": "experimental",
            "summary": "The Node Package Manager used to execute scripts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 287
          },
          "name": "packageManager",
          "optional": true,
          "type": {
            "fqn": "projen.NodePackageManager"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `peerDeps`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 120
          },
          "name": "peerDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Semver"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Options for `peerDeps`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 125
          },
          "name": "peerDependencyOptions",
          "optional": true,
          "type": {
            "fqn": "projen.PeerDependencyOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies listed here are required to\nbe installed (and satisfied) by the _consumer_ of this library. Using peer\ndependencies allows you to ensure that only a single module of a certain\nlibrary exists in the `node_modules` tree of your consumers.\n\nNote that prior to npm@7, peer dependencies are _not_ automatically\ninstalled, which means that adding peer dependencies to a library will be a\nbreaking change for your customers.\n\nUnless `peerDependencyOptions.pinnedDevDependency` is disabled (it is\nenabled by default), projen will automatically add a dev dependency with a\npinned version for each peer dependency. This will ensure that you build &\ntest your module against the lowest peer version required.",
            "stability": "experimental",
            "summary": "Peer dependencies for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 86
          },
          "name": "peerDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"npx projen\"",
            "remarks": "Can be used to customize in special environments.",
            "stability": "experimental",
            "summary": "The shell command to use in order to run the projen CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 458
          },
          "name": "projenCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Indicates of \"projen\" should be installed as a devDependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 161
          },
          "name": "projenDevDependency",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"true\" if mergify auto-merge is enabled (default)",
            "remarks": "Applies the `mergifyAutoMergeLabel` to the PR if enabled.",
            "stability": "experimental",
            "summary": "Automatically merge projen upgrade PRs when build passes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 391
          },
          "name": "projenUpgradeAutoMerge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"0 6 * * *\" ]",
            "stability": "experimental",
            "summary": "Customize the projenUpgrade schedule in cron expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 398
          },
          "name": "projenUpgradeSchedule",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no automatic projen upgrade pull requests",
            "remarks": "This setting is a GitHub secret name which contains a GitHub Access Token\nwith `repo` and `workflow` permissions.\n\nThis token is used to submit the upgrade pull request, which will likely\ninclude workflow updates.\n\nTo create a personal access token see https://github.com/settings/tokens",
            "stability": "experimental",
            "summary": "Periodically submits a pull request for projen upgrades (executes `yarn projen:upgrade`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 383
          },
          "name": "projenUpgradeSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Semver.latest()",
            "stability": "experimental",
            "summary": "Version of projen to install."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 154
          },
          "name": "projenVersion",
          "optional": true,
          "type": {
            "fqn": "projen.Semver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include a GitHub pull request template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 436
          },
          "name": "pullRequestTemplate",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default content",
            "stability": "experimental",
            "summary": "The contents of the pull request template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 443
          },
          "name": "pullRequestTemplateContents",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "The workflow will run a full build and\ncommit the changes to the pull request branch. This is useful for updating\ntest snapshots and other generated files like API.md.",
            "stability": "experimental",
            "summary": "Installs a GitHub workflow which is triggered when the comment \"@projen rebuild\" is added to a pull request."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 468
          },
          "name": "rebuildBot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"rebuild\"",
            "remarks": "The command must be prefixed by \"@projen\", e.g. \"@projen rebuild\"\n`gh pr review $pr --comment -b \"@projen rebuild\"`",
            "stability": "experimental",
            "summary": "The pull request bot command to use in order to trigger a rebuild and commit of the contents of the branch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 477
          },
          "name": "rebuildBotCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"master\" ]",
            "remarks": "Default value is based on defaultReleaseBranch.",
            "stability": "experimental",
            "summary": "Branches which trigger a release."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 219
          },
          "name": "releaseBranches",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically release new versions every commit to one of branches in `releaseBranches`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 203
          },
          "name": "releaseEveryCommit",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no scheduled releases",
            "stability": "experimental",
            "summary": "CRON schedule to trigger new releases."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 210
          },
          "name": "releaseSchedule",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Automatically release to npm when new versions are introduced."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 239
          },
          "name": "releaseToNpm",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Requires that `version` will be undefined.",
            "stability": "experimental",
            "summary": "Define a GitHub workflow for releasing from \"master\" when new versions are bumped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 197
          },
          "name": "releaseWorkflow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "remarks": "If a script has the same name as a standard script,\nthe standard script will be overwritten.",
            "stability": "experimental",
            "summary": "npm scripts to include."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 367
          },
          "name": "scripts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "Typescript sources directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 315
          },
          "name": "srcdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"test\"",
            "stability": "experimental",
            "summary": "Tests directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 322
          },
          "name": "testdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"yarn install --frozen-lockfile && yarn projen\"",
            "stability": "experimental",
            "summary": "Workflow steps to use in order to bootstrap this repo."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 226
          },
          "name": "workflowBootstrapSteps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default image",
            "stability": "experimental",
            "summary": "Container image to use for GitHub workflows."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 233
          },
          "name": "workflowContainerImage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- same as `minNodeVersion`",
            "stability": "experimental",
            "summary": "The node version to use in GitHub workflows."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 266
          },
          "name": "workflowNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodeProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodeProjectOptions",
      "interfaces": [
        "projen.NodeProjectCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 505
      },
      "name": "NodeProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$BASEDIR",
            "remarks": "It gets used in URLs, as an argument on the command line,\nand as the directory name inside node_modules.\nSee https://classic.yarnpkg.com/en/docs/package-json/#toc-name",
            "stability": "experimental",
            "summary": "This is the name of your package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 513
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's e-mail."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 542
          },
          "name": "authorEmail",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 537
          },
          "name": "authorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's Organization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 552
          },
          "name": "authorOrganization",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's URL / Website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 547
          },
          "name": "authorUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be used when searching for packages in a package manager as well.\nSee https://classic.yarnpkg.com/en/docs/package-json/#toc-description",
            "stability": "experimental",
            "summary": "The description is just a string that helps people understand the purpose of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 520
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional entries to .gitignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 580
          },
          "name": "gitignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Package's Homepage / Website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 557
          },
          "name": "homepage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Setup jest unit tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 586
          },
          "name": "jest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Jest options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 592
          },
          "name": "jestOptions",
          "optional": true,
          "type": {
            "fqn": "projen.JestOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "See https://github.com/projen/projen/tree/master/license-text for a list of supported licenses.",
            "stability": "experimental",
            "summary": "License's SPDX identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 563
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Indicates if a license should be added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 570
          },
          "name": "licensed",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository",
            "stability": "experimental",
            "summary": "The repository is the location where the actual code for your package lives."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 526
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 532
          },
          "name": "repositoryDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Package's Stability."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 575
          },
          "name": "stability",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodeWorkflowSteps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodeWorkflowSteps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 1780
      },
      "name": "NodeWorkflowSteps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1781
          },
          "name": "antitamper",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1782
          },
          "name": "install",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.NpmTaskExecution": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NpmTaskExecution",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 481
      },
      "members": [
        {
          "docs": {
            "example": "scripts: {\n  \"compile\": \"projen compile\"\n}",
            "stability": "experimental",
            "summary": "`package.json` scripts invoke to the projen CLI."
          },
          "name": "PROJEN"
        },
        {
          "docs": {
            "example": "scripts: {\n  \"compile\": \"tsc\"\n}",
            "stability": "experimental",
            "summary": "Task is implemented directly as a shell script within `package.json`."
          },
          "name": "SHELL"
        }
      ],
      "name": "NpmTaskExecution"
    },
    "projen.PeerDependencyOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.PeerDependencyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 1717
      },
      "name": "PeerDependencyOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically add a pinned dev dependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1722
          },
          "name": "pinnedDevDependency",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Project": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Base project."
      },
      "fqn": "projen.Project",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/project.ts",
          "line": 97
        },
        "parameters": [
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.ProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/project.ts",
        "line": 48
      },
      "methods": [
        {
          "docs": {
            "remarks": "Can be used when, for example, some\nsource files include the projen marker and we don't want them to be erased during synth.",
            "stability": "experimental",
            "summary": "Exclude the matching files from pre-synth cleanup."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 229
          },
          "name": "addExcludeFromCleanup",
          "parameters": [
            {
              "docs": {
                "summary": "The glob patterns to match."
              },
              "name": "globs",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This will fail if the project already has\na task with this name.",
            "stability": "experimental",
            "summary": "Adds a new task to this project."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 168
          },
          "name": "addTask",
          "parameters": [
            {
              "docs": {
                "summary": "The task name to add."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Task properties."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Prints a \"tip\" message during synthesis."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 219
          },
          "name": "addTip",
          "parameters": [
            {
              "docs": {
                "summary": "The message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 278
          },
          "name": "postSynthesize"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called before all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 273
          },
          "name": "preSynthesize"
        },
        {
          "docs": {
            "remarks": "1. Call \"this.preSynthesize()\"\n2. Delete all generated files\n3. Synthesize all sub-projects\n4. Synthesize all components of this project\n5. Call \"postSynthesize()\" for all components of this project\n6. Call \"this.postSynthesize()\"",
            "stability": "experimental",
            "summary": "Synthesize all project files into `outdir`."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 243
          },
          "name": "synth"
        },
        {
          "docs": {
            "returns": "a `FileBase` or undefined if there is no file in that path",
            "stability": "experimental",
            "summary": "Finds a file at the specified relative path within this project and all its subprojects."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 180
          },
          "name": "tryFindFile",
          "parameters": [
            {
              "docs": {
                "remarks": "If this path is relative, it will be resolved\nfrom the root of _this_ project.",
                "summary": "The file path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.FileBase"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Finds a json file by name."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 202
          },
          "name": "tryFindJsonFile",
          "parameters": [
            {
              "docs": {
                "summary": "The file path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.JsonFile"
            }
          }
        }
      ],
      "name": "Project",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns all the components within this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 149
          },
          "name": "components",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Component"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All files in this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 156
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.FileBase"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": ".gitignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 52
          },
          "name": "gitignore",
          "type": {
            "fqn": "projen.IgnoreFile"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Absolute output directory of this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 62
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The root project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 67
          },
          "name": "root",
          "type": {
            "fqn": "projen.Project"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 83
          },
          "name": "tasks",
          "type": {
            "fqn": "projen.tasks.Tasks"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` for subprojects.",
            "stability": "experimental",
            "summary": "Access all github components."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 74
          },
          "name": "github",
          "optional": true,
          "type": {
            "fqn": "projen.github.GitHub"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if gitpod boolean is false",
            "stability": "experimental",
            "summary": "Access for Gitpod."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 90
          },
          "name": "gitpod",
          "optional": true,
          "type": {
            "fqn": "projen.Gitpod"
          }
        },
        {
          "docs": {
            "remarks": "If undefined, this is the root project.",
            "stability": "experimental",
            "summary": "A parent project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 57
          },
          "name": "parent",
          "optional": true,
          "type": {
            "fqn": "projen.Project"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` for subprojects.",
            "stability": "experimental",
            "summary": "Access all VSCode components."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 81
          },
          "name": "vscode",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.VsCode"
          }
        }
      ]
    },
    "projen.ProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ProjectOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/project.ts",
        "line": 18
      },
      "name": "ProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Adds a gitpod configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 42
          },
          "name": "gitpod",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".\"",
            "remarks": "Relative to this directory, all files are synthesized.\n\nIf this project has a parent, this directory is relative to the parent\ndirectory and it cannot be the same as the parent or any of it's other\nsub-projects.",
            "stability": "experimental",
            "summary": "The root directory of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 35
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The parent project, if this project is part of a bigger project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 22
          },
          "name": "parent",
          "optional": true,
          "type": {
            "fqn": "projen.Project"
          }
        }
      ]
    },
    "projen.ResolveOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Resolve options."
      },
      "fqn": "projen.ResolveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 121
      },
      "name": "ResolveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Omits empty arrays and objects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 126
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Rule": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A Make rule."
      },
      "fqn": "projen.Rule",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 7
      },
      "name": "Rule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If the rule is phony then instead this represents the command's name(s).",
            "stability": "experimental",
            "summary": "Files to be created or updated by this rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 13
          },
          "name": "targets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Marks whether the target is phony."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 34
          },
          "name": "phony",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Files that are used as inputs to create a target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 20
          },
          "name": "prerequisites",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Commands that are run (using prerequisites as inputs) to create a target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 27
          },
          "name": "recipe",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.SampleDir": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Use this to create sample code files",
        "stability": "experimental",
        "summary": "Renders the given files into the directory if the directory does not exist."
      },
      "fqn": "projen.SampleDir",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Create sample files in the given directory if the given directory does not exist."
        },
        "locationInModule": {
          "filename": "src/sample-file.ts",
          "line": 82
        },
        "parameters": [
          {
            "docs": {
              "summary": "Parent project to add files to."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "remarks": "If directory already exists, nothing is added.",
              "summary": "directory to add files to."
            },
            "name": "dir",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "options for which files to create."
            },
            "name": "options",
            "type": {
              "fqn": "projen.SampleDirOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 88
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        }
      ],
      "name": "SampleDir"
    },
    "projen.SampleDirOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "SampleDir options."
      },
      "fqn": "projen.SampleDirOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 62
      },
      "name": "SampleDirOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The files to render into the directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 66
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.SampleFile": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Use this for creating example code files or other resources.",
        "stability": "experimental",
        "summary": "Produces a file with the given contents but only once, if the file doesn't already exist."
      },
      "fqn": "projen.SampleFile",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a new SampleFile object."
        },
        "locationInModule": {
          "filename": "src/sample-file.ts",
          "line": 31
        },
        "parameters": [
          {
            "docs": {
              "summary": "- the project to tie this file to."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "summary": "- the relative path in the project o put the file."
            },
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- the options for the file."
            },
            "name": "options",
            "type": {
              "fqn": "projen.SampleFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 37
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        }
      ],
      "name": "SampleFile"
    },
    "projen.SampleFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the SampleFile object."
      },
      "fqn": "projen.SampleFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 10
      },
      "name": "SampleFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The contents of the file to write."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 14
          },
          "name": "contents",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Semver": {
      "assembly": "projen",
      "docs": {
        "deprecated": "This class will be removed in upcoming releases. if you wish to\nspecify semver requirements in `deps`, `devDeps`, etc, specify them like so\n`express@^2.1`.",
        "stability": "deprecated"
      },
      "fqn": "projen.Semver",
      "kind": "class",
      "locationInModule": {
        "filename": "src/semver.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "remarks": ">= version\n< next major version",
            "stability": "deprecated",
            "summary": "Accept any minor version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 28
          },
          "name": "caret",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Latest version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 15
          },
          "name": "latest",
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 10
          },
          "name": "of",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Accept only an exact version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 20
          },
          "name": "pinned",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": ">= version\n< next minor version",
            "stability": "deprecated",
            "summary": "Accept patches."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 36
          },
          "name": "tilde",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        }
      ],
      "name": "Semver",
      "properties": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 40
          },
          "name": "spec",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 38
          },
          "name": "mode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 44
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Stability": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Stability",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 109
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "EXPERIMENTAL"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "STABLE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DEPRECATED"
        }
      ],
      "name": "Stability"
    },
    "projen.TextFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "A text file."
      },
      "fqn": "projen.TextFile",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines a text file."
        },
        "locationInModule": {
          "filename": "src/textfile.ts",
          "line": 29
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "summary": "File path."
            },
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "Options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.TextFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/textfile.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a line to the text file."
          },
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 39
          },
          "name": "addLine",
          "parameters": [
            {
              "docs": {
                "summary": "the line to add (can use tokens)."
              },
              "name": "line",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 43
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "TextFile"
    },
    "projen.TextFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `TextFile`."
      },
      "fqn": "projen.TextFileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/textfile.ts",
        "line": 7
      },
      "name": "TextFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "[] empty file",
            "remarks": "You can use `addLine()` to append lines.",
            "stability": "experimental",
            "summary": "The contents of the text file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 13
          },
          "name": "lines",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.TomlFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "TOML file."
      },
      "fqn": "projen.TomlFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/toml.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.TomlFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/toml.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/toml.ts",
            "line": 28
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "TomlFile",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/toml.ts",
            "line": 16
          },
          "name": "obj",
          "protected": true,
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "projen.TomlFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TomlFileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/toml.ts",
        "line": 5
      },
      "name": "TomlFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Object to render in the TOML file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/toml.ts",
            "line": 9
          },
          "name": "obj",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.TypeScriptAppProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "custom": {
          "pjid": "typescript-app"
        },
        "stability": "experimental",
        "summary": "TypeScript app."
      },
      "fqn": "projen.TypeScriptAppProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 655
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 654
      },
      "name": "TypeScriptAppProject"
    },
    "projen.TypeScriptCompilerOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypeScriptCompilerOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 346
      },
      "name": "TypeScriptCompilerOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Allow JavaScript files to be compiled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 352
          },
          "name": "allowJs",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This does not affect code emit, just typechecking.",
            "stability": "experimental",
            "summary": "Allow default imports from modules with no default export."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 584
          },
          "name": "allowSyntheticDefaultImports",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 360
          },
          "name": "alwaysStrict",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "To be specified along with the above."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 372
          },
          "name": "declaration",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Offers a way to configure the root directory for where declaration files are emitted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 366
          },
          "name": "declarationDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Emit __importStar and __importDefault helpers for runtime babel ecosystem compatibility and enable --allowSyntheticDefaultImports for typesystem compatibility."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 381
          },
          "name": "esModuleInterop",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 388
          },
          "name": "experimentalDecorators",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Disallow inconsistently-cased references to the same file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 395
          },
          "name": "forceConsistentCasingInFileNames",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 403
          },
          "name": "inlineSourceMap",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 411
          },
          "name": "inlineSources",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Perform additional checks to ensure that separate compilation (such as with transpileModule or @babel/plugin-transform-typescript) would be safe."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 419
          },
          "name": "isolatedModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "Support JSX in .tsx files: \"react\", \"preserve\", \"react-native\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 426
          },
          "name": "jsx",
          "optional": true,
          "type": {
            "fqn": "projen.TypeScriptJsxMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"es2018\" ]",
            "remarks": "ES2016, ES5, ES2018).",
            "stability": "experimental",
            "summary": "Reference for type definitions / libraries to use (eg."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 433
          },
          "name": "lib",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"CommonJS\"",
            "remarks": "See https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules.",
            "stability": "experimental",
            "summary": "Sets the module system for the program."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 441
          },
          "name": "module",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"node\"",
            "remarks": "Either \"Node\" for Node.js/io.js style resolution, or \"Classic\".",
            "stability": "experimental",
            "summary": "Determine how modules get resolved."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 448
          },
          "name": "moduleResolution",
          "optional": true,
          "type": {
            "fqn": "projen.TypeScriptModuleResolution"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not emit outputs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 455
          },
          "name": "noEmit",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 463
          },
          "name": "noEmitOnError",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Ensures that any non-empty\ncase inside a switch statement includes either break or return. This means you won’t\naccidentally ship a case fallthrough bug.",
            "stability": "experimental",
            "summary": "Report errors for fallthrough cases in switch statements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 472
          },
          "name": "noFallthroughCasesInSwitch",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 480
          },
          "name": "noImplicitAny",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When enabled, TypeScript will check all code paths in a function to ensure they return a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 488
          },
          "name": "noImplicitReturns",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Raise error on ‘this’ expressions with an implied ‘any’ type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 494
          },
          "name": "noImplicitThis",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Report errors on unused local variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 501
          },
          "name": "noUnusedLocals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Report errors on unused parameters in functions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 508
          },
          "name": "noUnusedParameters",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Output directory for the compiled files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 572
          },
          "name": "outDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 516
          },
          "name": "resolveJsonModule",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Only use to control the output directory structure with `outDir`.",
            "stability": "experimental",
            "summary": "Specifies the root directory of input files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 579
          },
          "name": "rootDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Skip type checking of all declaration files (*.d.ts)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 523
          },
          "name": "skipLibCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Turning this on is equivalent to enabling all of the strict mode family\noptions, which are outlined below. You can then turn off individual strict mode family checks as\nneeded.",
            "stability": "experimental",
            "summary": "The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 533
          },
          "name": "strict",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This can lead to unexpected errors at runtime.\nWhen strictNullChecks is true, null and undefined have their own distinct types and you’ll\nget a type error if you try to use them where a concrete value is expected.",
            "stability": "experimental",
            "summary": "When strictNullChecks is false, null and undefined are effectively ignored by the language."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 543
          },
          "name": "strictNullChecks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 551
          },
          "name": "strictPropertyInitialization",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 558
          },
          "name": "stripInternal",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"ES2018\"",
            "remarks": "You might choose to set\na lower target if your code is deployed to older environments, or a higher target if your\ncode is guaranteed to run in newer environments.",
            "stability": "experimental",
            "summary": "Modern browsers support all ES6 features, so ES6 is a good choice."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 567
          },
          "name": "target",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.TypeScriptJsxMode": {
      "assembly": "projen",
      "docs": {
        "see": "https://www.typescriptlang.org/docs/handbook/jsx.html",
        "stability": "experimental",
        "summary": "Determines how JSX should get transformed into valid JavaScript."
      },
      "fqn": "projen.TypeScriptJsxMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 329
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Keeps the JSX as part of the output to be further consumed by another transform step (e.g. Babel)."
          },
          "name": "PRESERVE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Converts JSX syntax into React.createElement, does not need to go through a JSX transformation before use, and the output will have a .js file extension."
          },
          "name": "REACT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Keeps all JSX like 'preserve' mode, but output will have a .js extension."
          },
          "name": "REACT_NATIVE"
        }
      ],
      "name": "TypeScriptJsxMode"
    },
    "projen.TypeScriptLibraryProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "deprecated": "use `TypeScriptProject`",
        "stability": "deprecated"
      },
      "fqn": "projen.TypeScriptLibraryProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 117
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 669
      },
      "name": "TypeScriptLibraryProject"
    },
    "projen.TypeScriptLibraryProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "deprecated": "use TypeScriptProjectOptions",
        "stability": "deprecated"
      },
      "fqn": "projen.TypeScriptLibraryProjectOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 675
      },
      "name": "TypeScriptLibraryProjectOptions"
    },
    "projen.TypeScriptModuleResolution": {
      "assembly": "projen",
      "docs": {
        "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html",
        "stability": "experimental",
        "summary": "Determines how modules get resolved."
      },
      "fqn": "projen.TypeScriptModuleResolution",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 308
      },
      "members": [
        {
          "docs": {
            "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic",
            "stability": "experimental",
            "summary": "TypeScript's former default resolution strategy."
          },
          "name": "CLASSIC"
        },
        {
          "docs": {
            "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html#node",
            "stability": "experimental",
            "summary": "Resolution strategy which attempts to mimic the Node.js module resolution strategy at runtime."
          },
          "name": "NODE"
        }
      ],
      "name": "TypeScriptModuleResolution"
    },
    "projen.TypeScriptProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "typescript"
        },
        "stability": "experimental",
        "summary": "TypeScript project."
      },
      "fqn": "projen.TypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 117
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 91
      },
      "name": "TypeScriptProject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 93
          },
          "name": "docsDirectory",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which compiled .js files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 105
          },
          "name": "libdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which the .ts sources reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 100
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \"watch\" task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 110
          },
          "name": "watchTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 92
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 94
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "fqn": "projen.Eslint"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \"package\" task (or undefined if `package` is set to `false`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 115
          },
          "name": "packageTask",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 95
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfig"
          }
        }
      ]
    },
    "projen.TypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypeScriptProjectOptions",
      "interfaces": [
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 11
      },
      "name": "TypeScriptProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- the default behavior is to delete the lib/ directory and run\njest typescript tests and only if all tests pass, run the compiler.",
            "stability": "experimental",
            "summary": "Compile the code before running tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 64
          },
          "name": "compileBeforeTest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not generate a `tsconfig.json` file (used by jsii projects since tsconfig.json is generated by the jsii compiler)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 56
          },
          "name": "disableTsconfig",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Docgen by Typedoc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 36
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"docs\"",
            "stability": "experimental",
            "summary": "Docs directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 43
          },
          "name": "docsDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- .d.ts file derived from the project's entrypoint (usually lib/index.d.ts)",
            "stability": "experimental",
            "summary": "The .d.ts file that includes the type declarations for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 76
          },
          "name": "entrypointTypes",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Setup eslint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 17
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- opinionated default options",
            "stability": "experimental",
            "summary": "Eslint options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 23
          },
          "name": "eslintOptions",
          "optional": true,
          "type": {
            "fqn": "projen.EslintOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Defines a `yarn package` command that will produce a tarball and place it under `dist/js`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 84
          },
          "name": "package",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `src/` and `test/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 70
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Custom TSConfig."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 48
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfigOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"^3.9.5\"",
            "stability": "experimental",
            "summary": "TypeScript version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 29
          },
          "name": "typescriptVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.TypescriptConfig": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypescriptConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 594
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypescriptConfigOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 587
      },
      "name": "TypescriptConfig",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 588
          },
          "name": "compilerOptions",
          "type": {
            "fqn": "projen.TypeScriptCompilerOptions"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 590
          },
          "name": "exclude",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 592
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 591
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 589
          },
          "name": "include",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.TypescriptConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypescriptConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 278
      },
      "name": "TypescriptConfigOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Compiler options to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 300
          },
          "name": "compilerOptions",
          "type": {
            "fqn": "projen.TypeScriptCompilerOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- node_modules is excluded by default",
            "stability": "experimental",
            "summary": "Filters results from the \"include\" option."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 295
          },
          "name": "exclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"tsconfig.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 282
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all .ts files recursively",
            "stability": "experimental",
            "summary": "Specifies a list of glob patterns that match TypeScript files to be included in compilation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 288
          },
          "name": "include",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.Version": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Version",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/version.ts",
          "line": 20
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.VersionOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/version.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the current version of the project."
          },
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 67
          },
          "name": "resolveVersion",
          "parameters": [
            {
              "name": "outdir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "Version",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 18
          },
          "name": "bumpTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.VersionOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.VersionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/version.ts",
        "line": 9
      },
      "name": "VersionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the release branch where the code and tags are pushed to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 13
          },
          "name": "releaseBranch",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.YamlFile": {
      "assembly": "projen",
      "base": "projen.JsonFile",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.YamlFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/yaml.ts",
          "line": 11
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.YamlFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/yaml.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/yaml.ts",
            "line": 15
          },
          "name": "synthesizeContent",
          "overrides": "projen.JsonFile",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "YamlFile"
    },
    "projen.YamlFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.YamlFileOptions",
      "interfaces": [
        "projen.JsonFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/yaml.ts",
        "line": 6
      },
      "name": "YamlFileOptions"
    },
    "projen.github.Dependabot": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Since module versions are managed in projen, the versioning strategy will be\nconfigured to \"lockfile-only\" which means that only updates that can be done\non the lockfile itself will be proposed.",
        "stability": "experimental",
        "summary": "Defines dependabot configuration for node projects."
      },
      "fqn": "projen.github.Dependabot",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/dependabot.ts",
          "line": 141
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.DependabotOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 132
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Ignores a dependency from automatic updates."
          },
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 202
          },
          "name": "addIgnore",
          "parameters": [
            {
              "docs": {
                "summary": "Use to ignore updates for dependencies with matching names, optionally using `*` to match zero or more characters."
              },
              "name": "dependencyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If\nyou want to define a range, use the standard pattern for the package\nmanager (for example: `^1.0.0` for npm, or `~> 2.0` for Bundler).",
                "summary": "Use to ignore specific versions or ranges of versions."
              },
              "name": "versions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Dependabot",
      "namespace": "github",
      "properties": [
        {
          "docs": {
            "see": "https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates",
            "stability": "experimental",
            "summary": "The raw dependabot configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 137
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.github.DependabotIgnore": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "The ignore option supports the following options.",
        "stability": "experimental",
        "summary": "You can use the `ignore` option to customize which dependencies are updated."
      },
      "fqn": "projen.github.DependabotIgnore",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 53
      },
      "name": "DependabotIgnore",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "For Java dependencies, the format of the dependency-name attribute is:\n`groupId:artifactId`, for example: `org.kohsuke:github-api`.",
            "stability": "experimental",
            "summary": "Use to ignore updates for dependencies with matching names, optionally using `*` to match zero or more characters."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 61
          },
          "name": "dependencyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If you want to\ndefine a range, use the standard pattern for the package manager (for\nexample: `^1.0.0` for npm, or `~> 2.0` for Bundler).",
            "stability": "experimental",
            "summary": "Use to ignore specific versions or ranges of versions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 68
          },
          "name": "versions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.DependabotOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.DependabotOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 6
      },
      "name": "DependabotOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically merge dependabot PRs if build CI build passes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 27
          },
          "name": "autoMerge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "The ignore option supports the following options.",
            "stability": "experimental",
            "summary": "You can use the `ignore` option to customize which dependencies are updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 34
          },
          "name": "ignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.github.DependabotIgnore"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This is required since projen updates may cause changes in committed files\nand anti-tamper checks will fail.\n\nProjen upgrades are covered through the `ProjenUpgrade` class.",
            "stability": "experimental",
            "summary": "Ignores updates to `projen`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 46
          },
          "name": "ignoreProjen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ScheduleInterval.DAILY",
            "stability": "experimental",
            "summary": "How often to check for new versions and raise pull requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 12
          },
          "name": "scheduleInterval",
          "optional": true,
          "type": {
            "fqn": "projen.github.DependabotScheduleInterval"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "VersioningStrategy.LOCKFILE_ONLY The default is to only update the\nlock file because package.json is controlled by projen and any outside\nupdates will fail the build.",
            "stability": "experimental",
            "summary": "The strategy to use when edits manifest and lock files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 21
          },
          "name": "versioningStrategy",
          "optional": true,
          "type": {
            "fqn": "projen.github.VersioningStrategy"
          }
        }
      ]
    },
    "projen.github.DependabotScheduleInterval": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "How often to check for new versions and raise pull requests for version updates."
      },
      "fqn": "projen.github.DependabotScheduleInterval",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 75
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Runs on every weekday, Monday to Friday."
          },
          "name": "DAILY"
        },
        {
          "docs": {
            "remarks": "By default, this is on Monday.",
            "stability": "experimental",
            "summary": "Runs once each week."
          },
          "name": "WEEKLY"
        },
        {
          "docs": {
            "remarks": "This is on the first day of the month.",
            "stability": "experimental",
            "summary": "Runs once each month."
          },
          "name": "MONTHLY"
        }
      ],
      "name": "DependabotScheduleInterval",
      "namespace": "github"
    },
    "projen.github.GitHub": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.GitHub",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/component.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/github.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 28
          },
          "name": "addDependabot",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.github.DependabotOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.Dependabot"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 10
          },
          "name": "addMergifyRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "fqn": "projen.github.MergifyRule"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 24
          },
          "name": "addPullRequestTemplate",
          "parameters": [
            {
              "name": "content",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.PullRequestTemplate"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 20
          },
          "name": "addWorkflow",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.GithubWorkflow"
            }
          }
        }
      ],
      "name": "GitHub",
      "namespace": "github"
    },
    "projen.github.GithubWorkflow": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.GithubWorkflow",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/workflows.ts",
          "line": 10
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/workflows.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 22
          },
          "name": "addJobs",
          "parameters": [
            {
              "name": "jobs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 15
          },
          "name": "on",
          "parameters": [
            {
              "name": "events",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 29
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "GithubWorkflow",
      "namespace": "github"
    },
    "projen.github.Mergify": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.Mergify",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/mergify.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.MergifyOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 32
          },
          "name": "addRule",
          "parameters": [
            {
              "name": "rule",
              "type": {
                "fqn": "projen.github.MergifyRule"
              }
            }
          ]
        }
      ],
      "name": "Mergify",
      "namespace": "github"
    },
    "projen.github.MergifyOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.MergifyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 11
      },
      "name": "MergifyOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 12
          },
          "name": "rules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.github.MergifyRule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.MergifyRule": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.MergifyRule",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 5
      },
      "name": "MergifyRule",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 8
          },
          "name": "actions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 7
          },
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 6
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.github.PullRequestTemplate": {
      "assembly": "projen",
      "base": "projen.TextFile",
      "docs": {
        "stability": "experimental",
        "summary": "Template for GitHub pull requests."
      },
      "fqn": "projen.github.PullRequestTemplate",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/pr-template.ts",
          "line": 20
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.PullRequestTemplateOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/pr-template.ts",
        "line": 19
      },
      "name": "PullRequestTemplate",
      "namespace": "github"
    },
    "projen.github.PullRequestTemplateOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `PullRequestTemplate`."
      },
      "fqn": "projen.github.PullRequestTemplateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/pr-template.ts",
        "line": 7
      },
      "name": "PullRequestTemplateOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- a standard default template will be created.",
            "remarks": "You can use `addLine()` to add additional lines.",
            "stability": "experimental",
            "summary": "The contents of the template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/pr-template.ts",
            "line": 13
          },
          "name": "lines",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.VersioningStrategy": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The strategy to use when edits manifest and lock files."
      },
      "fqn": "projen.github.VersioningStrategy",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 95
      },
      "members": [
        {
          "docs": {
            "remarks": "Ignore any new\nversions that would require package manifest changes.",
            "stability": "experimental",
            "summary": "Only create pull requests to update lockfiles updates."
          },
          "name": "LOCKFILE_ONLY"
        },
        {
          "docs": {
            "remarks": "- For libraries, the range of versions is widened.",
            "stability": "experimental",
            "summary": "- For apps, the version requirements are increased."
          },
          "name": "AUTO"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Relax the version requirement to include both the new and old version, when possible."
          },
          "name": "WIDEN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Always increase the version requirement to match the new version."
          },
          "name": "INCREASE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Increase the version requirement only when required by the new version."
          },
          "name": "INCREASE_IF_NECESSARY"
        }
      ],
      "name": "VersioningStrategy",
      "namespace": "github"
    },
    "projen.tasks.Task": {
      "assembly": "projen",
      "docs": {
        "remarks": "Modeled as a series of shell\ncommands and subtasks.",
        "stability": "experimental",
        "summary": "A task that can be performed on the project."
      },
      "fqn": "projen.tasks.Task",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/task.ts",
          "line": 71
        },
        "parameters": [
          {
            "name": "tasks",
            "type": {
              "fqn": "projen.tasks.Tasks"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "projen.tasks.TaskOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 45
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an environment variable to this task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 134
          },
          "name": "env",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the variable."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If the value is surrounded by `$()`, we will\nevaluate it within a subshell and use the result as the value of the\nenvironment variable.",
                "summary": "The value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Executes a shell command."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 104
          },
          "name": "exec",
          "parameters": [
            {
              "docs": {
                "summary": "Shell command."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a command at the beginning of the task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 112
          },
          "name": "prepend",
          "parameters": [
            {
              "docs": {
                "summary": "The command to add."
              },
              "name": "shell",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reset the task so it no longer has any commands."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 90
          },
          "name": "reset",
          "parameters": [
            {
              "docs": {
                "summary": "the first command to add to the task after it was cleared."
              },
              "name": "command",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Spawns a sub-task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 123
          },
          "name": "spawn",
          "parameters": [
            {
              "docs": {
                "summary": "The subtask to execute."
              },
              "name": "subtask",
              "type": {
                "fqn": "projen.tasks.Task"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders this task as a single shell command."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 148
          },
          "name": "toShellCommand",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Task",
      "namespace": "tasks",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Task name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 49
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an immutable copy of all the step specifications of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 141
          },
          "name": "steps",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskStep"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The start menu category of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 59
          },
          "name": "category",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.TaskCategory"
          }
        },
        {
          "docs": {
            "remarks": "If it\nreturns a zero exit code, the task will not be executed.",
            "stability": "experimental",
            "summary": "A command to execute which determines if the task should be skipped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 65
          },
          "name": "condition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The description of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 54
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskCategory": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskCategory",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 201
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "BUILD"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "TEST"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RELEASE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MAINTAIN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MISC"
        }
      ],
      "name": "TaskCategory",
      "namespace": "tasks"
    },
    "projen.tasks.TaskCommonOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskCommonOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 4
      },
      "name": "TaskCommonOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "TaskCategory.MISC",
            "stability": "experimental",
            "summary": "Category for start menu."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 16
          },
          "name": "category",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.TaskCategory"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If\nthe program exits with a zero exit code, steps will be executed. A non-zero\ncode means that task will be skipped.",
            "stability": "experimental",
            "summary": "A shell command which determines if the this task should be executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 30
          },
          "name": "condition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the task name",
            "stability": "experimental",
            "summary": "The description of this build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 9
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "remarks": "Values in this map will be evaluated in a shell, so you can do stuff like `$(echo \"foo\")`.",
            "stability": "experimental",
            "summary": "Defines environment variables for the execution of this task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 23
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.tasks.TaskOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskOptions",
      "interfaces": [
        "projen.tasks.TaskCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 33
      },
      "name": "TaskOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- add steps using `task.exec(command)` or `task.spawn(subtask)`",
            "stability": "experimental",
            "summary": "Shell command to execute as the first command of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 38
          },
          "name": "exec",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskRuntime": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The runtime component of the tasks engine."
      },
      "fqn": "projen.tasks.TaskRuntime",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/runtime.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "workdir",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/runtime.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Runs the task."
          },
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 50
          },
          "name": "runTask",
          "parameters": [
            {
              "docs": {
                "summary": "The task name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "parents",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Find a task by name, or `undefined` if not found."
          },
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 41
          },
          "name": "tryFindTask",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.tasks.TaskSpec"
            }
          }
        }
      ],
      "name": "TaskRuntime",
      "namespace": "tasks",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The contents of tasks.json."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 16
          },
          "name": "manifest",
          "type": {
            "fqn": "projen.tasks.TasksManifest"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The tasks in this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 34
          },
          "name": "tasks",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskSpec"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The root directory of the project and the cwd for executing tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 21
          },
          "name": "workdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskSpec": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Specification of a single task."
      },
      "fqn": "projen.tasks.TaskSpec",
      "interfaces": [
        "projen.tasks.TaskCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 21
      },
      "name": "TaskSpec",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Task name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 25
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Task steps."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 30
          },
          "name": "steps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskStep"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.tasks.TaskStep": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "The step could either be  the execution of a\nshell command or execution of a sub-task, by name.",
        "stability": "experimental",
        "summary": "A single step within a task."
      },
      "fqn": "projen.tasks.TaskStep",
      "interfaces": [
        "projen.tasks.TaskStepOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 49
      },
      "name": "TaskStep",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- don't execute a shell command",
            "stability": "experimental",
            "summary": "Shell command to execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 55
          },
          "name": "exec",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- don't spawn a subtask",
            "stability": "experimental",
            "summary": "Subtask to execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 62
          },
          "name": "spawn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskStepOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for task steps."
      },
      "fqn": "projen.tasks.TaskStepOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 36
      },
      "name": "TaskStepOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no name",
            "stability": "experimental",
            "summary": "Step name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 42
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.Tasks": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Tasks extend the projen CLI by adding subcommands to it. Task definitions are\nsynthesized into `.projen/tasks.json`.",
        "stability": "experimental",
        "summary": "Defines project tasks."
      },
      "fqn": "projen.tasks.Tasks",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/tasks.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/tasks.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds global environment."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 64
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "Environment variable name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a task to a project."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 53
          },
          "name": "addTask",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the task."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Task options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns `undefined` if the task cannot be found.",
            "stability": "experimental",
            "summary": "Finds a task by name."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 81
          },
          "name": "tryFind",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the task."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        }
      ],
      "name": "Tasks",
      "namespace": "tasks",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The project-relative path of the tasks manifest file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 19
          },
          "name": "MANIFEST_FILE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 44
          },
          "name": "all",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.Task"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a copy of the currently global environment for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 71
          },
          "name": "env",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.tasks.TasksManifest": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for `tasks.json`."
      },
      "fqn": "projen.tasks.TasksManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 6
      },
      "name": "TasksManifest",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Environment for all tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 15
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "All tasks available for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 10
          },
          "name": "tasks",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskSpec"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.vscode.InternalConsoleOptions": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Controls the visibility of the VSCode Debug Console panel during a debugging session Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.InternalConsoleOptions",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 9
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NEVER_OPEN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPEN_ON_FIRST_SESSION_START"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPEN_ON_SESSION_START"
        }
      ],
      "name": "InternalConsoleOptions",
      "namespace": "vscode"
    },
    "projen.vscode.Presentation": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration Presentation interface \"using the order, group, and hidden attributes in the presentation object you can sort, group, and hide configurations and compounds in the Debug configuration dropdown and in the Debug quick pick.\" Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.Presentation",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 22
      },
      "name": "Presentation",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 24
          },
          "name": "group",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 23
          },
          "name": "hidden",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 25
          },
          "name": "order",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.vscode.ServerReadyAction": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration ServerReadyAction interface \"if you want to open a URL in a web browser whenever the program under debugging outputs a specific message to the debug console or integrated terminal.\" Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.ServerReadyAction",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 33
      },
      "name": "ServerReadyAction",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 34
          },
          "name": "action",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 35
          },
          "name": "pattern",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 36
          },
          "name": "uriFormat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.vscode.VsCode": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.vscode.VsCode",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/vscode/vscode.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/vscode/vscode.ts",
        "line": 5
      },
      "name": "VsCode",
      "namespace": "vscode",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/vscode.ts",
            "line": 12
          },
          "name": "launchConfiguration",
          "type": {
            "fqn": "projen.vscode.VsCodeLaunchConfig"
          }
        }
      ]
    },
    "projen.vscode.VsCodeLaunchConfig": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration file (launch.json), useful for enabling in-editor debugger."
      },
      "fqn": "projen.vscode.VsCodeLaunchConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/vscode/launch-config.ts",
          "line": 68
        },
        "parameters": [
          {
            "name": "vscode",
            "type": {
              "fqn": "projen.vscode.VsCode"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 65
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a VsCodeLaunchConfigurationEntry (e.g. a node.js debugger) to `.vscode/launch.json. Each configuration entry has following mandatory fields: type, request and name. See https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes for details."
          },
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 87
          },
          "name": "addConfiguration",
          "parameters": [
            {
              "docs": {
                "summary": "VsCodeLaunchConfigurationEntry."
              },
              "name": "cfg",
              "type": {
                "fqn": "projen.vscode.VsCodeLaunchConfigurationEntry"
              }
            }
          ]
        }
      ],
      "name": "VsCodeLaunchConfig",
      "namespace": "vscode"
    },
    "projen.vscode.VsCodeLaunchConfigurationEntry": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for a 'VsCodeLaunchConfigurationEntry' Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.VsCodeLaunchConfigurationEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 43
      },
      "name": "VsCodeLaunchConfigurationEntry",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 46
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 45
          },
          "name": "request",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 44
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 47
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 48
          },
          "name": "debugServer",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 49
          },
          "name": "internalConsoleOptions",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.InternalConsoleOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 57
          },
          "name": "outFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 51
          },
          "name": "postDebugTask",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 52
          },
          "name": "preLaunchTask",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 53
          },
          "name": "presentation",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.Presentation"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 54
          },
          "name": "program",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 50
          },
          "name": "runtimeArgs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 55
          },
          "name": "serverReadyAction",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.ServerReadyAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 56
          },
          "name": "skipFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 58
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 59
          },
          "name": "webRoot",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.NextComponent": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextComponent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 214
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextComponentOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 210
      },
      "name": "NextComponent",
      "namespace": "web"
    },
    "projen.web.NextComponentOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextComponentOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 192
      },
      "name": "NextComponentOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 207
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to apply options specific for TypeScript Next.js projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 198
          },
          "name": "typescript",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsCommonProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsCommonProjectOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 9
      },
      "name": "NextJsCommonProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"public\"",
            "stability": "experimental",
            "summary": "Assets directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 15
          },
          "name": "assetsdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind CSS as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 24
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "nextjs"
        },
        "stability": "experimental",
        "summary": "Next.js project without TypeScript."
      },
      "fqn": "projen.web.NextJsProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 60
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextJsProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 42
      },
      "name": "NextJsProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which app assets reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 51
          },
          "name": "assetsdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 46
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 58
          },
          "name": "tailwind",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsProjectOptions",
      "interfaces": [
        "projen.web.NextJsCommonProjectOptions",
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 29
      },
      "name": "NextJsProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `pages/` and `public/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 34
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsTypeDef": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeDef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 180
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.web.NextJsTypeScriptProject"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.NextJsTypeDefOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 179
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 184
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "NextJsTypeDef",
      "namespace": "web"
    },
    "projen.web.NextJsTypeDefOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeDefOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 177
      },
      "name": "NextJsTypeDefOptions",
      "namespace": "web"
    },
    "projen.web.NextJsTypeScriptProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "nextjs-ts"
        },
        "stability": "experimental",
        "summary": "Next.js project with TypeScript."
      },
      "fqn": "projen.web.NextJsTypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 116
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextJsTypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 90
      },
      "name": "NextJsTypeScriptProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which app assets reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 99
          },
          "name": "assetsdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://nextjs.org/docs/basic-features/typescript",
            "stability": "experimental",
            "summary": "TypeScript definition file included that ensures Next.js types are picked up by the TypeScript compiler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 114
          },
          "name": "nextJsTypeDef",
          "type": {
            "fqn": "projen.web.NextJsTypeDef"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 94
          },
          "name": "srcdir",
          "overrides": "projen.TypeScriptProject",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 106
          },
          "name": "tailwind",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsTypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeScriptProjectOptions",
      "interfaces": [
        "projen.web.NextJsCommonProjectOptions",
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 27
      },
      "name": "NextJsTypeScriptProjectOptions",
      "namespace": "web"
    },
    "projen.web.PostCss": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Declares a PostCSS dependency with a default config file."
      },
      "fqn": "projen.web.PostCss",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/postcss.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.PostCssOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/postcss.ts",
        "line": 27
      },
      "name": "PostCss",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 29
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 28
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 30
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "fqn": "projen.web.TailwindConfig"
          }
        }
      ]
    },
    "projen.web.PostCssOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.PostCssOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/postcss.ts",
        "line": 5
      },
      "name": "PostCssOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"postcss.config.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 9
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install Tailwind CSS as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 16
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Tailwind CSS options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 21
          },
          "name": "tailwindOptions",
          "optional": true,
          "type": {
            "fqn": "projen.web.TailwindConfigOptions"
          }
        }
      ]
    },
    "projen.web.ReactComponent": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactComponent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 137
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactComponentOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 134
      },
      "name": "ReactComponent",
      "namespace": "web"
    },
    "projen.web.ReactComponentOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactComponentOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 125
      },
      "name": "ReactComponentOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to apply options specific for TypeScript React projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 131
          },
          "name": "typescript",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.ReactProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "react"
        },
        "stability": "experimental",
        "summary": "React project without TypeScript."
      },
      "fqn": "projen.web.ReactProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 23
      },
      "name": "ReactProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 28
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.ReactProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactProjectOptions",
      "interfaces": [
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 10
      },
      "name": "ReactProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `src/` and `public/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 15
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.ReactTypeDef": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeDef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 472
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.web.ReactTypeScriptProject"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.ReactTypeDefOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 471
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 476
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ReactTypeDef",
      "namespace": "web"
    },
    "projen.web.ReactTypeDefOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeDefOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 469
      },
      "name": "ReactTypeDefOptions",
      "namespace": "web"
    },
    "projen.web.ReactTypeScriptProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "react-ts"
        },
        "stability": "experimental",
        "summary": "React project with TypeScript."
      },
      "fqn": "projen.web.ReactTypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 69
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactTypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 56
      },
      "name": "ReactTypeScriptProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "TypeScript definition file included that ensures React types are picked up by the TypeScript compiler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 67
          },
          "name": "reactTypeDef",
          "type": {
            "fqn": "projen.web.ReactTypeDef"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 60
          },
          "name": "srcdir",
          "overrides": "projen.TypeScriptProject",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.ReactTypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeScriptProjectOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 8
      },
      "name": "ReactTypeScriptProjectOptions",
      "namespace": "web"
    },
    "projen.web.TailwindConfig": {
      "assembly": "projen",
      "docs": {
        "remarks": "There are multiple ways to add Tailwind CSS in your node project - see:\nhttps://tailwindcss.com/docs/installation",
        "see": "PostCss",
        "stability": "experimental",
        "summary": "Declares a Tailwind CSS configuration file."
      },
      "fqn": "projen.web.TailwindConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/tailwind.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.TailwindConfigOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/tailwind.ts",
        "line": 19
      },
      "name": "TailwindConfig",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 21
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 20
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.TailwindConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.TailwindConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/tailwind.ts",
        "line": 4
      },
      "name": "TailwindConfigOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"tailwind.config.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 8
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.6.17",
  "fingerprint": "QMbqw6V4Bt3u0yA9JqaW6aE/y7HlmCpn/Gxg1978WDw="
}
