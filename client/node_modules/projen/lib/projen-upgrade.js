"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjenUpgrade = void 0;
const tasks_1 = require("./tasks");
/**
 * Checks for new versions of projen and creates a PR with an upgrade change.
 */
class ProjenUpgrade {
    constructor(project, options = {}) {
        var _a;
        const upgradeTask = project.addTask('projen:upgrade', {
            description: 'upgrades projen to the latest version',
            category: tasks_1.TaskCategory.MAINTAIN,
        });
        upgradeTask.exec('yarn upgrade -L projen');
        upgradeTask.exec('CI="" yarn projen');
        if (options.autoUpgradeSecret) {
            if (!project.github) {
                throw new Error('github workflows are required in order for auto-update');
            }
            const workflow = project.github.addWorkflow('ProjenUpgrade');
            workflow.on({
                schedule: options.autoUpgradeSchedule
                    ? options.autoUpgradeSchedule.map(s => ({ cron: s }))
                    : [{ cron: '0 6 * * *' }],
                workflow_dispatch: {},
            });
            const withOptions = {
                'token': '${{ secrets.' + options.autoUpgradeSecret + ' }}',
                'commit-message': 'chore: upgrade projen',
                'branch': 'auto/projen-upgrade',
                'title': 'chore: upgrade projen',
                'body': 'This PR upgrades projen to the latest version',
            };
            if ((_a = options.labels) === null || _a === void 0 ? void 0 : _a.length) {
                withOptions.labels = options.labels.join(',');
            }
            workflow.addJobs({
                upgrade: {
                    'runs-on': 'ubuntu-latest',
                    'steps': [
                        // check out sources.
                        {
                            name: 'Checkout',
                            uses: 'actions/checkout@v2',
                        },
                        // install dependencies (and runs projen)
                        ...project.installWorkflowSteps,
                        // upgrade
                        {
                            name: 'Upgrade projen',
                            run: project.runTaskCommand(upgradeTask),
                        },
                        // submit a PR
                        {
                            name: 'Create pull request',
                            uses: 'peter-evans/create-pull-request@v3',
                            with: withOptions,
                        },
                    ],
                },
            });
        }
        else {
            project.addTip('Set `autoUpgradeSecret` to enable automatic projen upgrade pull requests');
        }
    }
}
exports.ProjenUpgrade = ProjenUpgrade;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVuLXVwZ3JhZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJvamVuLXVwZ3JhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQXVDO0FBNkJ2Qzs7R0FFRztBQUNILE1BQWEsYUFBYTtJQUN4QixZQUFZLE9BQW9CLEVBQUUsVUFBZ0MsRUFBRzs7UUFDbkUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUNwRCxXQUFXLEVBQUUsdUNBQXVDO1lBQ3BELFFBQVEsRUFBRSxvQkFBWSxDQUFDLFFBQVE7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsV0FBVyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzNDLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV0QyxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO2FBQzNFO1lBRUQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFN0QsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDVixRQUFRLEVBQUUsT0FBTyxDQUFDLG1CQUFtQjtvQkFDbkMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3JELENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDO2dCQUMzQixpQkFBaUIsRUFBRSxFQUFFO2FBQ3RCLENBQUMsQ0FBQztZQUVILE1BQU0sV0FBVyxHQUEyQjtnQkFDMUMsT0FBTyxFQUFFLGNBQWMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsS0FBSztnQkFDM0QsZ0JBQWdCLEVBQUUsdUJBQXVCO2dCQUN6QyxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixPQUFPLEVBQUUsdUJBQXVCO2dCQUNoQyxNQUFNLEVBQUUsK0NBQStDO2FBQ3hELENBQUM7WUFFRixVQUFJLE9BQU8sQ0FBQyxNQUFNLDBDQUFFLE1BQU0sRUFBRTtnQkFDMUIsV0FBVyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQztZQUVELFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBQ2YsT0FBTyxFQUFFO29CQUNQLFNBQVMsRUFBRSxlQUFlO29CQUMxQixPQUFPLEVBQUU7d0JBQ1AscUJBQXFCO3dCQUNyQjs0QkFDRSxJQUFJLEVBQUUsVUFBVTs0QkFDaEIsSUFBSSxFQUFFLHFCQUFxQjt5QkFDNUI7d0JBRUQseUNBQXlDO3dCQUN6QyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0I7d0JBRS9CLFVBQVU7d0JBQ1Y7NEJBQ0UsSUFBSSxFQUFFLGdCQUFnQjs0QkFDdEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO3lCQUN6Qzt3QkFFRCxjQUFjO3dCQUNkOzRCQUNFLElBQUksRUFBRSxxQkFBcUI7NEJBQzNCLElBQUksRUFBRSxvQ0FBb0M7NEJBQzFDLElBQUksRUFBRSxXQUFXO3lCQUNsQjtxQkFDRjtpQkFDRjthQUNGLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxPQUFPLENBQUMsTUFBTSxDQUFDLDBFQUEwRSxDQUFDLENBQUM7U0FDNUY7SUFDSCxDQUFDO0NBQ0Y7QUFwRUQsc0NBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVByb2plY3QgfSBmcm9tICcuL25vZGUtcHJvamVjdCc7XG5pbXBvcnQgeyBUYXNrQ2F0ZWdvcnkgfSBmcm9tICcuL3Rhc2tzJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9qZW5VcGdyYWRlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgc2VjcmV0IG5hbWUgd2hpY2ggY29udGFpbnMgYSBHaXRIdWIgQWNjZXNzIFRva2VuIHdpdGggYHJlcG9gIGFuZFxuICAgKiBgd29ya2Zsb3dgIHBlcm1pc3Npb25zLiBUaGlzIHRva2VuIGlzIHVzZWQgdG8gc3VibWl0IHRoZSB1cGdyYWRlIHB1bGxcbiAgICogcmVxdWVzdCwgd2hpY2ggd2lsbCBsaWtlbHkgaW5jbHVkZSB3b3JrZmxvdyB1cGRhdGVzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGF1dG8tdXBncmFkZSBpcyBkaXNhYmxlZFxuICAgKi9cbiAgcmVhZG9ubHkgYXV0b1VwZ3JhZGVTZWNyZXQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFwcGx5IGxhYmVscyB0byB0aGUgUFIuIEZvciBleGFtcGxlLCB5b3UgY2FuIGFkZCB0aGUgbGFiZWwgXCJhdXRvLW1lcmdlXCIsXG4gICAqIHdoaWNoLCBpbi10YW5kZW0gd2l0aCBtZXJnaWZ5IGNvbmZpZ3VyYXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IG1lcmdlIHRoZXNlXG4gICAqIFBScyBpZiB0aGVpciBidWlsZCBwYXNzZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IFtdXG4gICAqL1xuICByZWFkb25seSBsYWJlbHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQ3VzdG9taXplIHRoZSBwcm9qZW5VcGdyYWRlIHNjaGVkdWxlIGluIGNyb24gZXhwcmVzc2lvbi5cbiAgICpcbiAgIEBkZWZhdWx0IFsgJzAgNiAqICogKicgXVxuICAgKi9cbiAgcmVhZG9ubHkgYXV0b1VwZ3JhZGVTY2hlZHVsZT86IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIENoZWNrcyBmb3IgbmV3IHZlcnNpb25zIG9mIHByb2plbiBhbmQgY3JlYXRlcyBhIFBSIHdpdGggYW4gdXBncmFkZSBjaGFuZ2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9qZW5VcGdyYWRlIHtcbiAgY29uc3RydWN0b3IocHJvamVjdDogTm9kZVByb2plY3QsIG9wdGlvbnM6IFByb2plblVwZ3JhZGVPcHRpb25zID0geyB9KSB7XG4gICAgY29uc3QgdXBncmFkZVRhc2sgPSBwcm9qZWN0LmFkZFRhc2soJ3Byb2plbjp1cGdyYWRlJywge1xuICAgICAgZGVzY3JpcHRpb246ICd1cGdyYWRlcyBwcm9qZW4gdG8gdGhlIGxhdGVzdCB2ZXJzaW9uJyxcbiAgICAgIGNhdGVnb3J5OiBUYXNrQ2F0ZWdvcnkuTUFJTlRBSU4sXG4gICAgfSk7XG5cbiAgICB1cGdyYWRlVGFzay5leGVjKCd5YXJuIHVwZ3JhZGUgLUwgcHJvamVuJyk7XG4gICAgdXBncmFkZVRhc2suZXhlYygnQ0k9XCJcIiB5YXJuIHByb2plbicpO1xuXG4gICAgaWYgKG9wdGlvbnMuYXV0b1VwZ3JhZGVTZWNyZXQpIHtcbiAgICAgIGlmICghcHJvamVjdC5naXRodWIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnaXRodWIgd29ya2Zsb3dzIGFyZSByZXF1aXJlZCBpbiBvcmRlciBmb3IgYXV0by11cGRhdGUnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgd29ya2Zsb3cgPSBwcm9qZWN0LmdpdGh1Yi5hZGRXb3JrZmxvdygnUHJvamVuVXBncmFkZScpO1xuXG4gICAgICB3b3JrZmxvdy5vbih7XG4gICAgICAgIHNjaGVkdWxlOiBvcHRpb25zLmF1dG9VcGdyYWRlU2NoZWR1bGVcbiAgICAgICAgICA/IG9wdGlvbnMuYXV0b1VwZ3JhZGVTY2hlZHVsZS5tYXAocyA9PiAoeyBjcm9uOiBzIH0pKVxuICAgICAgICAgIDogW3sgY3JvbjogJzAgNiAqICogKicgfV0sIC8vIDZhbSBldmVyeSBkYXlcbiAgICAgICAgd29ya2Zsb3dfZGlzcGF0Y2g6IHt9LCAvLyBhbGxvdyBtYW51YWwgdHJpZ2dlcmluZ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHdpdGhPcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgICAndG9rZW4nOiAnJHt7IHNlY3JldHMuJyArIG9wdGlvbnMuYXV0b1VwZ3JhZGVTZWNyZXQgKyAnIH19JyxcbiAgICAgICAgJ2NvbW1pdC1tZXNzYWdlJzogJ2Nob3JlOiB1cGdyYWRlIHByb2plbicsXG4gICAgICAgICdicmFuY2gnOiAnYXV0by9wcm9qZW4tdXBncmFkZScsXG4gICAgICAgICd0aXRsZSc6ICdjaG9yZTogdXBncmFkZSBwcm9qZW4nLFxuICAgICAgICAnYm9keSc6ICdUaGlzIFBSIHVwZ3JhZGVzIHByb2plbiB0byB0aGUgbGF0ZXN0IHZlcnNpb24nLFxuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMubGFiZWxzPy5sZW5ndGgpIHtcbiAgICAgICAgd2l0aE9wdGlvbnMubGFiZWxzID0gb3B0aW9ucy5sYWJlbHMuam9pbignLCcpO1xuICAgICAgfVxuXG4gICAgICB3b3JrZmxvdy5hZGRKb2JzKHtcbiAgICAgICAgdXBncmFkZToge1xuICAgICAgICAgICdydW5zLW9uJzogJ3VidW50dS1sYXRlc3QnLFxuICAgICAgICAgICdzdGVwcyc6IFtcbiAgICAgICAgICAgIC8vIGNoZWNrIG91dCBzb3VyY2VzLlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnQ2hlY2tvdXQnLFxuICAgICAgICAgICAgICB1c2VzOiAnYWN0aW9ucy9jaGVja291dEB2MicsXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBpbnN0YWxsIGRlcGVuZGVuY2llcyAoYW5kIHJ1bnMgcHJvamVuKVxuICAgICAgICAgICAgLi4ucHJvamVjdC5pbnN0YWxsV29ya2Zsb3dTdGVwcyxcblxuICAgICAgICAgICAgLy8gdXBncmFkZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnVXBncmFkZSBwcm9qZW4nLFxuICAgICAgICAgICAgICBydW46IHByb2plY3QucnVuVGFza0NvbW1hbmQodXBncmFkZVRhc2spLFxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gc3VibWl0IGEgUFJcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ0NyZWF0ZSBwdWxsIHJlcXVlc3QnLFxuICAgICAgICAgICAgICB1c2VzOiAncGV0ZXItZXZhbnMvY3JlYXRlLXB1bGwtcmVxdWVzdEB2MycsXG4gICAgICAgICAgICAgIHdpdGg6IHdpdGhPcHRpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2plY3QuYWRkVGlwKCdTZXQgYGF1dG9VcGdyYWRlU2VjcmV0YCB0byBlbmFibGUgYXV0b21hdGljIHByb2plbiB1cGdyYWRlIHB1bGwgcmVxdWVzdHMnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==