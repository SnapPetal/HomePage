import { FileBase, FileBaseOptions, IResolver } from './file';
import { Project } from './project';
/**
 * (experimental) Options for `JsonFile`.
 *
 * @experimental
 */
export interface JsonFileOptions extends FileBaseOptions {
    /**
     * (experimental) The object that will be serialized.
     *
     * You can modify the object's contents
     * before synthesis.
     *
     * @default {} an empty object (use `file.obj` to mutate).
     * @experimental
     */
    readonly obj?: any;
    /**
     * (experimental) Adds the projen marker as a "JSON-comment" to the root object.
     *
     * @default false
     * @experimental
     */
    readonly marker?: boolean;
    /**
     * (experimental) Omits empty objects and arrays.
     *
     * @default false
     * @experimental
     */
    readonly omitEmpty?: boolean;
}
/**
 * (experimental) Represents a JSON file.
 *
 * @experimental
 */
export declare class JsonFile extends FileBase {
    /**
     * (experimental) The output object.
     *
     * This object can be mutated until the project is
     * synthesized.
     *
     * @experimental
     */
    readonly obj: object;
    /**
     * (experimental) Indicates if the projen marker JSON-comment will be added to the output object.
     *
     * @experimental
     */
    readonly marker: boolean;
    /**
     * (experimental) Indicates if empty objects and arrays are omitted from the output object.
     *
     * @experimental
     */
    readonly omitEmpty: boolean;
    /**
     * @experimental
     */
    constructor(project: Project, filePath: string, options: JsonFileOptions);
    /**
     * (experimental) Implemented by derived classes and returns the contents of the file to emit.
     *
     * @experimental
     */
    protected synthesizeContent(resolver: IResolver): string;
}
