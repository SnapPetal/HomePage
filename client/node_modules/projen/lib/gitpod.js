"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gitpod = exports.GitpodOpenIn = exports.GitpodOpenMode = void 0;
const component_1 = require("./component");
const yaml_1 = require("./yaml");
/**
  * Relative path of Gitpod file to generate
  */
const GITPOD_FILE = '.gitpod.yml';
/**
 * (experimental) Configure how the terminal should be opened relative to the previous task.
 *
 * @experimental
 */
var GitpodOpenMode;
(function (GitpodOpenMode) {
    GitpodOpenMode["TAB_AFTER"] = "tab-after";
    GitpodOpenMode["TAB_BEFORE"] = "tab-before";
    GitpodOpenMode["SPLIT_RIGHT"] = "split-right";
    GitpodOpenMode["SPLIT_LEFT"] = "split-left";
    GitpodOpenMode["SPLIT_TOP"] = "split-top";
    GitpodOpenMode["SPLIT_BOTTOM"] = "split-bottom";
})(GitpodOpenMode = exports.GitpodOpenMode || (exports.GitpodOpenMode = {}));
/**
 * (experimental) Configure where in the IDE the terminal should be opened.
 *
 * @experimental
 */
var GitpodOpenIn;
(function (GitpodOpenIn) {
    GitpodOpenIn["BOTTOM"] = "bottom";
    GitpodOpenIn["LEFT"] = "left";
    GitpodOpenIn["RIGHT"] = "right";
    GitpodOpenIn["MAIN"] = "main";
})(GitpodOpenIn = exports.GitpodOpenIn || (exports.GitpodOpenIn = {}));
/**
 * (experimental) The Gitpod component which emits .gitpod.yml.
 *
 * @experimental
 */
class Gitpod extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, options) {
        super(project);
        this.tasks = new Array();
        if (options === null || options === void 0 ? void 0 : options.docker) {
            this.addCustomDocker(options === null || options === void 0 ? void 0 : options.docker);
        }
        if (options === null || options === void 0 ? void 0 : options.tasks) {
            this.addTasks(...options === null || options === void 0 ? void 0 : options.tasks);
        }
        new yaml_1.YamlFile(this.project, GITPOD_FILE, {
            obj: {
                image: () => this.renderDockerImage(),
                tasks: () => this.renderTasks(),
            },
        });
    }
    /**
     * (experimental) Specify a customer docker setup.
     *
     * @experimental
     */
    addCustomDocker(docker) {
        if ((docker === null || docker === void 0 ? void 0 : docker.file) && (docker === null || docker === void 0 ? void 0 : docker.image)) {
            throw new Error('Can not specific both `file` and `image` at the same time');
        }
        this.docker = docker;
    }
    /**
     * (experimental) Adds another task to the Gitpod configuration.
     *
     * @param tasks The additional tasks.
     * @experimental
     */
    addTasks(...tasks) {
        this.tasks.push(...tasks);
    }
    renderTasks() {
        if (this.tasks) {
            return this.tasks;
        }
        else {
            return undefined;
        }
    }
    renderDockerImage() {
        var _a, _b;
        if ((_a = this.docker) === null || _a === void 0 ? void 0 : _a.image) {
            return this.docker.image;
        }
        else if ((_b = this.docker) === null || _b === void 0 ? void 0 : _b.file) {
            return {
                file: this.docker.file,
            };
        }
        else {
            return undefined;
        }
    }
}
exports.Gitpod = Gitpod;
//# sourceMappingURL=data:application/json;base64,