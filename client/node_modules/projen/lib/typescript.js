"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptLibraryProject = exports.TypeScriptAppProject = exports.TypescriptConfig = exports.TypeScriptJsxMode = exports.TypeScriptModuleResolution = exports.TypeScriptProject = void 0;
const path = require("path");
const common_1 = require("./common");
const component_1 = require("./component");
const eslint_1 = require("./eslint");
const json_1 = require("./json");
const node_project_1 = require("./node-project");
const sample_file_1 = require("./sample-file");
const tasks_1 = require("./tasks");
const typescript_typedoc_1 = require("./typescript-typedoc");
/**
 * (experimental) TypeScript project.
 *
 * @experimental
 * @pjid typescript
 */
class TypeScriptProject extends node_project_1.NodeProject {
    /**
     * @experimental
     */
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        super(options);
        this.srcdir = (_a = options.srcdir) !== null && _a !== void 0 ? _a : 'src';
        this.libdir = (_b = options.libdir) !== null && _b !== void 0 ? _b : 'lib';
        this.docgen = options.docgen;
        this.docsDirectory = (_c = options.docsDirectory) !== null && _c !== void 0 ? _c : 'docs/';
        this.addCompileCommand('tsc');
        this.watchTask = this.addTask('watch', {
            description: 'Watch & compile in the background',
            category: tasks_1.TaskCategory.BUILD,
            exec: 'tsc -w',
        });
        // by default, we first run tests (jest compiles the typescript in the background) and only then we compile.
        const compileBeforeTest = (_d = options.compileBeforeTest) !== null && _d !== void 0 ? _d : false;
        if (compileBeforeTest) {
            this.buildTask.spawn(this.compileTask);
            this.buildTask.spawn(this.testTask);
        }
        else {
            this.buildTask.spawn(this.testTask);
            this.buildTask.spawn(this.compileTask);
        }
        if ((_e = options.package) !== null && _e !== void 0 ? _e : true) {
            this.packageTask = this.addTask('package', {
                description: 'Create an npm tarball',
                category: tasks_1.TaskCategory.RELEASE,
            });
            this.packageTask.exec('rm -fr dist');
            this.packageTask.exec('mkdir -p dist/js');
            this.packageTask.exec(`${this.packageManager} pack`);
            this.packageTask.exec('mv *.tgz dist/js/');
            this.buildTask.spawn(this.packageTask);
        }
        if (options.entrypointTypes || this.entrypoint !== '') {
            this.manifest.types = (_f = options.entrypointTypes) !== null && _f !== void 0 ? _f : `${path.join(path.dirname(this.entrypoint), path.basename(this.entrypoint, '.js')).replace(/\\/g, '/')}.d.ts`;
        }
        const compilerOptionDefaults = {
            alwaysStrict: true,
            declaration: true,
            experimentalDecorators: true,
            inlineSourceMap: true,
            inlineSources: true,
            lib: ['es2018'],
            module: 'CommonJS',
            noEmitOnError: false,
            noFallthroughCasesInSwitch: true,
            noImplicitAny: true,
            noImplicitReturns: true,
            noImplicitThis: true,
            noUnusedLocals: true,
            noUnusedParameters: true,
            resolveJsonModule: true,
            strict: true,
            strictNullChecks: true,
            strictPropertyInitialization: true,
            stripInternal: true,
            target: 'ES2018',
        };
        if (!options.disableTsconfig) {
            this.tsconfig = new TypescriptConfig(this, {
                include: [`${this.srcdir}/**/*.ts`],
                exclude: [
                    'node_modules',
                    this.libdir,
                ],
                ...options.tsconfig,
                compilerOptions: {
                    rootDir: this.srcdir,
                    outDir: this.libdir,
                    ...compilerOptionDefaults,
                    ...(_g = options.tsconfig) === null || _g === void 0 ? void 0 : _g.compilerOptions,
                },
            });
        }
        this.gitignore.exclude(`/${this.libdir}`);
        (_h = this.npmignore) === null || _h === void 0 ? void 0 : _h.include(`/${this.libdir}`);
        this.gitignore.include(`/${this.srcdir}`);
        (_j = this.npmignore) === null || _j === void 0 ? void 0 : _j.exclude(`/${this.srcdir}`);
        (_k = this.npmignore) === null || _k === void 0 ? void 0 : _k.include(`/${this.libdir}/**/*.js`);
        (_l = this.npmignore) === null || _l === void 0 ? void 0 : _l.include(`/${this.libdir}/**/*.d.ts`);
        this.gitignore.exclude('/dist');
        (_m = this.npmignore) === null || _m === void 0 ? void 0 : _m.exclude('dist'); // jsii-pacmak expects this to be "dist" and not "/dist". otherwise it will tamper with it
        (_o = this.npmignore) === null || _o === void 0 ? void 0 : _o.exclude('/tsconfig.json');
        (_p = this.npmignore) === null || _p === void 0 ? void 0 : _p.exclude('/.github');
        (_q = this.npmignore) === null || _q === void 0 ? void 0 : _q.exclude('/.vscode');
        (_r = this.npmignore) === null || _r === void 0 ? void 0 : _r.exclude('/.idea');
        (_s = this.npmignore) === null || _s === void 0 ? void 0 : _s.exclude('/.projenrc.js');
        // the tsconfig file to use for estlint (if jest is enabled, we use the jest one, otherwise we use the normal one).
        let eslintTsConfig = 'tsconfig.json';
        if (((_t = options.jest) !== null && _t !== void 0 ? _t : true) && this.jest) {
            // create a tsconfig for jest that does NOT include outDir and rootDir and
            // includes both "src" and "test" as inputs.
            const tsconfig = this.jest.generateTypescriptConfig({
                fileName: 'tsconfig.jest.json',
                include: [
                    common_1.PROJEN_RC,
                    `${this.srcdir}/**/*.ts`,
                    `${this.testdir}/**/*.ts`,
                ],
                exclude: [
                    'node_modules',
                ],
                compilerOptions: compilerOptionDefaults,
            });
            // const tsconfig = new TypescriptConfig(this, );
            eslintTsConfig = tsconfig.fileName;
            // if we test before compilation, remove the lib/ directory before running
            // tests so that we get a clean slate for testing.
            if (!compileBeforeTest) {
                // make sure to delete "lib" *before* running tests to ensure that
                // test code does not take a dependency on "lib" and instead on "src".
                this.testTask.prepend(`rm -fr ${this.libdir}/`);
            }
        }
        if ((_u = options.eslint) !== null && _u !== void 0 ? _u : true) {
            this.eslint = new eslint_1.Eslint(this, {
                tsconfigPath: `./${eslintTsConfig}`,
                dirs: [this.srcdir, this.testdir],
                fileExtensions: ['.ts', '.tsx'],
                ...options.eslintOptions,
            });
        }
        this.addDevDeps(`typescript@${(_v = options.typescriptVersion) !== null && _v !== void 0 ? _v : '^3.9.5'}`, `@types/node@^${(_w = this.minNodeVersion) !== null && _w !== void 0 ? _w : '10.17.0'}`);
        // generate sample code in `src` and `lib` if these directories are empty or non-existent.
        if ((_x = options.sampleCode) !== null && _x !== void 0 ? _x : true) {
            new SampleCode(this);
        }
        if (this.docgen) {
            new typescript_typedoc_1.TypedocDocgen(this);
        }
    }
}
exports.TypeScriptProject = TypeScriptProject;
/**
 * (experimental) Determines how modules get resolved.
 *
 * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html
 * @experimental
 */
var TypeScriptModuleResolution;
(function (TypeScriptModuleResolution) {
    TypeScriptModuleResolution["CLASSIC"] = "classic";
    TypeScriptModuleResolution["NODE"] = "node";
})(TypeScriptModuleResolution = exports.TypeScriptModuleResolution || (exports.TypeScriptModuleResolution = {}));
/**
 * (experimental) Determines how JSX should get transformed into valid JavaScript.
 *
 * @see https://www.typescriptlang.org/docs/handbook/jsx.html
 * @experimental
 */
var TypeScriptJsxMode;
(function (TypeScriptJsxMode) {
    TypeScriptJsxMode["PRESERVE"] = "preserve";
    TypeScriptJsxMode["REACT"] = "react";
    TypeScriptJsxMode["REACT_NATIVE"] = "react-native";
})(TypeScriptJsxMode = exports.TypeScriptJsxMode || (exports.TypeScriptJsxMode = {}));
/**
 * @experimental
 */
class TypescriptConfig {
    /**
     * @experimental
     */
    constructor(project, options) {
        var _a, _b, _c, _d;
        const fileName = (_a = options.fileName) !== null && _a !== void 0 ? _a : 'tsconfig.json';
        this.include = (_b = options.include) !== null && _b !== void 0 ? _b : ['**/*.ts'];
        this.exclude = (_c = options.exclude) !== null && _c !== void 0 ? _c : ['node_modules'];
        this.fileName = fileName;
        this.compilerOptions = options.compilerOptions;
        this.file = new json_1.JsonFile(project, fileName, {
            obj: {
                compilerOptions: this.compilerOptions,
                include: this.include,
                exclude: this.exclude,
            },
        });
        (_d = project.npmignore) === null || _d === void 0 ? void 0 : _d.exclude(`/${fileName}`);
    }
}
exports.TypescriptConfig = TypescriptConfig;
class SampleCode extends component_1.Component {
    constructor(project) {
        super(project);
        const srcCode = [
            'export class Hello {',
            '  public sayHello() {',
            '    return \'hello, world!\';',
            '  }',
            '}',
        ].join('\n');
        const testCode = [
            "import { Hello } from '../src';",
            '',
            "test('hello', () => {",
            "  expect(new Hello().sayHello()).toBe('hello, world!');",
            '});',
        ].join('\n');
        new sample_file_1.SampleDir(project, project.srcdir, {
            files: {
                'index.ts': srcCode,
            },
        });
        new sample_file_1.SampleDir(project, project.testdir, {
            files: {
                'hello.test.ts': testCode,
            },
        });
    }
}
/**
 * (experimental) TypeScript app.
 *
 * @experimental
 * @pjid typescript-app
 */
class TypeScriptAppProject extends TypeScriptProject {
    /**
     * @experimental
     */
    constructor(options) {
        super({
            allowLibraryDependencies: false,
            releaseWorkflow: false,
            entrypoint: '',
            package: false,
            ...options,
        });
    }
}
exports.TypeScriptAppProject = TypeScriptAppProject;
/**
 * @deprecated use `TypeScriptProject`
 */
class TypeScriptLibraryProject extends TypeScriptProject {
}
exports.TypeScriptLibraryProject = TypeScriptLibraryProject;
;
//# sourceMappingURL=data:application/json;base64,