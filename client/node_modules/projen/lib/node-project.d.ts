import { GithubWorkflow } from './github';
import { DependabotOptions } from './github/dependabot';
import { Mergify, MergifyOptions } from './github/mergify';
import { IgnoreFile } from './ignore-file';
import { Jest, JestOptions } from './jest';
import { Project, ProjectOptions } from './project';
import { Semver } from './semver';
import { Task } from './tasks';
/**
 * (experimental) The node package manager to use.
 *
 * @experimental
 */
export declare enum NodePackageManager {
    /**
     * (experimental) Use `yarn` as the package manager.
     *
     * @experimental
     */
    YARN = "yarn",
    /**
     * (experimental) Use `npm` as the package manager.
     *
     * @experimental
     */
    NPM = "npm"
}
/**
 * @experimental
 */
export interface NodeProjectCommonOptions extends ProjectOptions {
    /**
     * (experimental) Runtime dependencies of this module.
     *
     * The recommendation is to only specify the module name here (e.g.
     * `express`). This will behave similar to `yarn add` or `npm install` in the
     * sense that it will add the module as a dependency to your `package.json`
     * file with the latest version (`^`). You can specify semver requirements in
     * the same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and
     * this will be what you `package.json` will eventually include.
     *
     * @default []
     * @experimental
     * @example
     *
     * [ 'express', 'lodash', 'foo@^2' ]
     */
    readonly deps?: string[];
    /**
     * (experimental) Build dependencies for this module.
     *
     * These dependencies will only be
     * available in your build environment but will not be fetched when this
     * module is consumed.
     *
     * The recommendation is to only specify the module name here (e.g.
     * `express`). This will behave similar to `yarn add` or `npm install` in the
     * sense that it will add the module as a dependency to your `package.json`
     * file with the latest version (`^`). You can specify semver requirements in
     * the same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and
     * this will be what you `package.json` will eventually include.
     *
     * @default []
     * @experimental
     * @example
     *
     * [ 'typescript', '@types/express' ]
     */
    readonly devDeps?: string[];
    /**
     * (experimental) Peer dependencies for this module.
     *
     * Dependencies listed here are required to
     * be installed (and satisfied) by the _consumer_ of this library. Using peer
     * dependencies allows you to ensure that only a single module of a certain
     * library exists in the `node_modules` tree of your consumers.
     *
     * Note that prior to npm@7, peer dependencies are _not_ automatically
     * installed, which means that adding peer dependencies to a library will be a
     * breaking change for your customers.
     *
     * Unless `peerDependencyOptions.pinnedDevDependency` is disabled (it is
     * enabled by default), projen will automatically add a dev dependency with a
     * pinned version for each peer dependency. This will ensure that you build &
     * test your module against the lowest peer version required.
     *
     * @default []
     * @experimental
     */
    readonly peerDeps?: string[];
    /**
     * (experimental) List of dependencies to bundle into this module.
     *
     * These modules will be
     * added both to the `dependencies` section and `peerDependencies` section of
     * your `package.json`.
     *
     * The recommendation is to only specify the module name here (e.g.
     * `express`). This will behave similar to `yarn add` or `npm install` in the
     * sense that it will add the module as a dependency to your `package.json`
     * file with the latest version (`^`). You can specify semver requirements in
     * the same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and
     * this will be what you `package.json` will eventually include.
     *
     * @experimental
     */
    readonly bundledDeps?: string[];
    /**
     * @deprecated use `bundledDeps`
     */
    readonly bundledDependencies?: string[];
    /**
     * @deprecated use `deps`
     */
    readonly dependencies?: Record<string, Semver>;
    /**
     * @deprecated use `devDeps`
     */
    readonly devDependencies?: Record<string, Semver>;
    /**
     * @deprecated use `peerDeps`
     */
    readonly peerDependencies?: Record<string, Semver>;
    /**
     * (experimental) Options for `peerDeps`.
     *
     * @experimental
     */
    readonly peerDependencyOptions?: PeerDependencyOptions;
    /**
     * (experimental) Binary programs vended with your module.
     *
     * You can use this option to add/customize how binaries are represented in
     * your `package.json`, but unless `autoDetectBin` is `false`, every
     * executable file under `bin` will automatically be added to this section.
     *
     * @experimental
     */
    readonly bin?: Record<string, string>;
    /**
     * (experimental) Automatically add all executables under the `bin` directory to your `package.json` file under the `bin` section.
     *
     * @default true
     * @experimental
     */
    readonly autoDetectBin?: boolean;
    /**
     * (experimental) Keywords to include in `package.json`.
     *
     * @experimental
     */
    readonly keywords?: string[];
    /**
     * (experimental) Version of projen to install.
     *
     * @default Semver.latest()
     * @experimental
     */
    readonly projenVersion?: Semver;
    /**
     * (experimental) Indicates of "projen" should be installed as a devDependency.
     *
     * @default true
     * @experimental
     */
    readonly projenDevDependency?: boolean;
    /**
     * (experimental) The name of the main release branch.
     *
     * @default "master"
     * @experimental
     */
    readonly defaultReleaseBranch?: string;
    /**
     * (experimental) Define a GitHub workflow for building PRs.
     *
     * @default true
     * @experimental
     */
    readonly buildWorkflow?: boolean;
    /**
     * (experimental) Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret.
     *
     * @default false
     * @experimental
     */
    readonly codeCov?: boolean;
    /**
     * (experimental) Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories.
     *
     * @default - if this option is not specified, only public repositories are supported
     * @experimental
     */
    readonly codeCovTokenSecret?: string;
    /**
     * (experimental) Define a GitHub workflow for releasing from "master" when new versions are bumped.
     *
     * Requires that `version` will be undefined.
     *
     * @default true
     * @experimental
     */
    readonly releaseWorkflow?: boolean;
    /**
     * (experimental) Automatically release new versions every commit to one of branches in `releaseBranches`.
     *
     * @default true
     * @experimental
     */
    readonly releaseEveryCommit?: boolean;
    /**
     * (experimental) CRON schedule to trigger new releases.
     *
     * @default - no scheduled releases
     * @experimental
     */
    readonly releaseSchedule?: string;
    /**
     * (experimental) Branches which trigger a release.
     *
     * Default value is based on defaultReleaseBranch.
     *
     * @default [ "master" ]
     * @experimental
     */
    readonly releaseBranches?: string[];
    /**
     * (experimental) Workflow steps to use in order to bootstrap this repo.
     *
     * @default "yarn install --frozen-lockfile && yarn projen"
     * @experimental
     */
    readonly workflowBootstrapSteps?: any[];
    /**
     * (experimental) Container image to use for GitHub workflows.
     *
     * @default - default image
     * @experimental
     */
    readonly workflowContainerImage?: string;
    /**
     * (experimental) Automatically release to npm when new versions are introduced.
     *
     * @default false
     * @experimental
     */
    readonly releaseToNpm?: boolean;
    /**
     * (experimental) Checks that after build there are no modified files on git.
     *
     * @default true
     * @experimental
     */
    readonly antitamper?: boolean;
    /**
     * (experimental) Minimum Node.js version to require via package.json `engines` (inclusive).
     *
     * @default - no "engines" specified
     * @experimental
     */
    readonly minNodeVersion?: string;
    /**
     * (experimental) Minimum node.js version to require via `engines` (inclusive).
     *
     * @default - no max
     * @experimental
     */
    readonly maxNodeVersion?: string;
    /**
     * (experimental) The node version to use in GitHub workflows.
     *
     * @default - same as `minNodeVersion`
     * @experimental
     */
    readonly workflowNodeVersion?: string;
    /**
     * (experimental) The dist-tag to use when releasing to npm.
     *
     * @default "latest"
     * @experimental
     */
    readonly npmDistTag?: string;
    /**
     * (experimental) The registry url to use when releasing packages.
     *
     * @default "registry.npmjs.org"
     * @experimental
     */
    readonly npmRegistry?: string;
    /**
     * (experimental) The Node Package Manager used to execute scripts.
     *
     * @default NodePackageManager.YARN
     * @experimental
     */
    readonly packageManager?: NodePackageManager;
    /**
     * (experimental) License copyright owner.
     *
     * @default - defaults to the value of authorName or "" if `authorName` is undefined.
     * @experimental
     */
    readonly copyrightOwner?: string;
    /**
     * (experimental) The copyright years to put in the LICENSE file.
     *
     * @default - current year
     * @experimental
     */
    readonly copyrightPeriod?: string;
    /**
     * (experimental) Compiler artifacts output directory.
     *
     * @default "lib"
     * @experimental
     */
    readonly libdir?: string;
    /**
     * (experimental) Typescript sources directory.
     *
     * @default "src"
     * @experimental
     */
    readonly srcdir?: string;
    /**
     * (experimental) Tests directory.
     *
     * @default "test"
     * @experimental
     */
    readonly testdir?: string;
    /**
     * (experimental) Include dependabot configuration.
     *
     * @default true
     * @experimental
     */
    readonly dependabot?: boolean;
    /**
     * (experimental) Options for dependabot.
     *
     * @default - default options
     * @experimental
     */
    readonly dependabotOptions?: DependabotOptions;
    /**
     * (experimental) Adds mergify configuration.
     *
     * @default true
     * @experimental
     */
    readonly mergify?: boolean;
    /**
     * (experimental) Options for mergify.
     *
     * @default - default options
     * @experimental
     */
    readonly mergifyOptions?: MergifyOptions;
    /**
     * (experimental) Automatically merge PRs that build successfully and have this label.
     *
     * To disable, set this value to an empty string.
     *
     * @default "auto-merge"
     * @experimental
     */
    readonly mergifyAutoMergeLabel?: string;
    /**
     * (experimental) npm scripts to include.
     *
     * If a script has the same name as a standard script,
     * the standard script will be overwritten.
     *
     * @default {}
     * @experimental
     */
    readonly scripts?: {
        [name: string]: string;
    };
    /**
     * (experimental) Periodically submits a pull request for projen upgrades (executes `yarn projen:upgrade`).
     *
     * This setting is a GitHub secret name which contains a GitHub Access Token
     * with `repo` and `workflow` permissions.
     *
     * This token is used to submit the upgrade pull request, which will likely
     * include workflow updates.
     *
     * To create a personal access token see https://github.com/settings/tokens
     *
     * @default - no automatic projen upgrade pull requests
     * @experimental
     */
    readonly projenUpgradeSecret?: string;
    /**
     * (experimental) Automatically merge projen upgrade PRs when build passes.
     *
     * Applies the `mergifyAutoMergeLabel` to the PR if enabled.
     *
     * @default - "true" if mergify auto-merge is enabled (default)
     * @experimental
     */
    readonly projenUpgradeAutoMerge?: boolean;
    /**
     * (experimental) Customize the projenUpgrade schedule in cron expression.
     *
     * @default [ "0 6 * * *" ]
     * @experimental
     */
    readonly projenUpgradeSchedule?: string[];
    /**
     * (experimental) Allow the project to include `peerDependencies` and `bundledDependencies`.
     *
     * This is normally only allowed for libraries. For apps, there's no meaning
     * for specifying these.
     *
     * @default true
     * @experimental
     */
    readonly allowLibraryDependencies?: boolean;
    /**
     * (experimental) Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs.
     *
     * @default true
     * @experimental
     */
    readonly npmignoreEnabled?: boolean;
    /**
     * (experimental) Additional entries to .npmignore.
     *
     * @experimental
     */
    readonly npmignore?: string[];
    /**
     * (experimental) Module entrypoint (`main` in `package.json`).
     *
     * Set to an empty string to not include `main` in your package.json
     *
     * @default "lib/index.js"
     * @experimental
     */
    readonly entrypoint?: string;
    /**
     * (experimental) Include a GitHub pull request template.
     *
     * @default true
     * @experimental
     */
    readonly pullRequestTemplate?: boolean;
    /**
     * (experimental) The contents of the pull request template.
     *
     * @default - default content
     * @experimental
     */
    readonly pullRequestTemplateContents?: string;
    /**
     * (experimental) Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz).
     *
     * @default NpmTaskExecution.PROJEN
     * @experimental
     */
    readonly npmTaskExecution?: NpmTaskExecution;
    /**
     * (experimental) The shell command to use in order to run the projen CLI.
     *
     * Can be used to customize in special environments.
     *
     * @default "npx projen"
     * @experimental
     */
    readonly projenCommand?: string;
    /**
     * (experimental) Installs a GitHub workflow which is triggered when the comment "@projen rebuild" is added to a pull request.
     *
     * The workflow will run a full build and
     * commit the changes to the pull request branch. This is useful for updating
     * test snapshots and other generated files like API.md.
     *
     * @default true
     * @experimental
     */
    readonly rebuildBot?: boolean;
    /**
     * (experimental) The pull request bot command to use in order to trigger a rebuild and commit of the contents of the branch.
     *
     * The command must be prefixed by "@projen", e.g. "@projen rebuild"
     * `gh pr review $pr --comment -b "@projen rebuild"`
     *
     * @default "rebuild"
     * @experimental
     */
    readonly rebuildBotCommand?: string;
}
/**
 * @experimental
 */
export declare enum NpmTaskExecution {
    /**
     * (experimental) `package.json` scripts invoke to the projen CLI.
     *
     * @experimental
     * @example
     *
     * scripts: {
     *   "compile": "projen compile"
     * }
     */
    PROJEN = "projen",
    /**
     * (experimental) Task is implemented directly as a shell script within `package.json`.
     *
     * @experimental
     * @example
     *
     * scripts: {
     *   "compile": "tsc"
     * }
     */
    SHELL = "shell"
}
/**
 * @experimental
 */
export interface NodeProjectOptions extends NodeProjectCommonOptions {
    /**
     * (experimental) This is the name of your package.
     *
     * It gets used in URLs, as an argument on the command line,
     * and as the directory name inside node_modules.
     * See https://classic.yarnpkg.com/en/docs/package-json/#toc-name
     *
     * @default $BASEDIR
     * @experimental
     */
    readonly name: string;
    /**
     * (experimental) The description is just a string that helps people understand the purpose of the package.
     *
     * It can be used when searching for packages in a package manager as well.
     * See https://classic.yarnpkg.com/en/docs/package-json/#toc-description
     *
     * @experimental
     */
    readonly description?: string;
    /**
     * (experimental) The repository is the location where the actual code for your package lives.
     *
     * See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository
     *
     * @experimental
     */
    readonly repository?: string;
    /**
     * (experimental) If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.
     *
     * @experimental
     */
    readonly repositoryDirectory?: string;
    /**
     * (experimental) Author's name.
     *
     * @experimental
     */
    readonly authorName?: string;
    /**
     * (experimental) Author's e-mail.
     *
     * @experimental
     */
    readonly authorEmail?: string;
    /**
     * (experimental) Author's URL / Website.
     *
     * @experimental
     */
    readonly authorUrl?: string;
    /**
     * (experimental) Author's Organization.
     *
     * @experimental
     */
    readonly authorOrganization?: boolean;
    /**
     * (experimental) Package's Homepage / Website.
     *
     * @experimental
     */
    readonly homepage?: string;
    /**
     * (experimental) License's SPDX identifier.
     *
     * See https://github.com/projen/projen/tree/master/license-text for a list of supported licenses.
     *
     * @experimental
     */
    readonly license?: string;
    /**
     * (experimental) Indicates if a license should be added.
     *
     * @default true
     * @experimental
     */
    readonly licensed?: boolean;
    /**
     * (experimental) Package's Stability.
     *
     * @experimental
     */
    readonly stability?: string;
    /**
     * (experimental) Additional entries to .gitignore.
     *
     * @experimental
     */
    readonly gitignore?: string[];
    /**
     * (experimental) Setup jest unit tests.
     *
     * @default true
     * @experimental
     */
    readonly jest?: boolean;
    /**
     * (experimental) Jest options.
     *
     * @default - default options
     * @experimental
     */
    readonly jestOptions?: JestOptions;
}
/**
 * (experimental) Automatic bump modes.
 *
 * @experimental
 */
export declare enum AutoRelease {
    /**
     * (experimental) Automatically bump & release a new version for every commit to "master".
     *
     * @experimental
     */
    EVERY_COMMIT = 0,
    /**
     * (experimental) Automatically bump & release a new version on a daily basis.
     *
     * @experimental
     */
    DAILY = 1
}
/**
 * (experimental) Node.js project.
 *
 * @experimental
 */
export declare class NodeProject extends Project {
    /**
     * @experimental
     */
    readonly npmignore?: IgnoreFile;
    /**
     * @experimental
     */
    readonly mergify?: Mergify;
    /**
     * @experimental
     */
    readonly manifest: any;
    /**
     * @experimental
     */
    readonly allowLibraryDependencies: boolean;
    /**
     * @experimental
     */
    readonly entrypoint: string;
    /**
     * (experimental) Compiles the code.
     *
     * By default for node.js projects this task is empty.
     *
     * @experimental
     */
    readonly compileTask: Task;
    /**
     * (experimental) Tests the code.
     *
     * @experimental
     */
    readonly testTask: Task;
    /**
     * (experimental) The task resposible for a full release build.
     *
     * It spawns: compile + test + release + package
     *
     * @experimental
     */
    readonly buildTask: Task;
    private readonly peerDependencies;
    private readonly peerDependencyOptions;
    private readonly devDependencies;
    private readonly dependencies;
    private readonly bundledDependencies;
    private readonly scripts;
    private readonly bin;
    private readonly keywords;
    private readonly _version;
    /**
     * (experimental) The PR build GitHub workflow.
     *
     * `undefined` if `buildWorkflow` is disabled.
     *
     * @experimental
     */
    protected readonly buildWorkflow?: GithubWorkflow;
    /**
     * @experimental
     */
    protected readonly buildWorkflowJobId?: string;
    /**
     * (experimental) The release GitHub workflow.
     *
     * `undefined` if `releaseWorkflow` is disabled.
     *
     * @experimental
     */
    protected readonly releaseWorkflow?: GithubWorkflow;
    /**
     * @experimental
     */
    protected readonly releaseWorkflowJobId?: string;
    /**
     * @experimental
     */
    readonly minNodeVersion?: string;
    /**
     * @experimental
     */
    readonly maxNodeVersion?: string;
    private readonly nodeVersion?;
    /**
     * (experimental) Indicates if workflows have anti-tamper checks.
     *
     * @experimental
     */
    readonly antitamper: boolean;
    /**
     * @experimental
     */
    protected readonly npmDistTag: string;
    /**
     * @experimental
     */
    protected readonly npmRegistry: string;
    /**
     * (experimental) The package manager to use.
     *
     * @experimental
     */
    protected readonly packageManager: NodePackageManager;
    /**
     * (experimental) The command to use to run scripts (e.g. `yarn run` or `npm run` depends on the package manager).
     *
     * @experimental
     */
    readonly runScriptCommand: string;
    /**
     * (experimental) The directory in which tests reside.
     *
     * @experimental
     */
    readonly testdir: string;
    /**
     * (experimental) The Jest configuration (if enabled).
     *
     * @experimental
     */
    readonly jest?: Jest;
    /**
     * (experimental) Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz).
     *
     * @experimental
     */
    readonly npmTaskExecution: NpmTaskExecution;
    /**
     * (experimental) The command to use in order to run the projen CLI.
     *
     * @experimental
     */
    readonly projenCommand: string;
    /**
     * @experimental
     */
    constructor(options: NodeProjectOptions);
    /**
     * @experimental
     */
    addBins(bins: Record<string, string>): void;
    /**
     * @deprecated use `addDeps()`
     */
    addDependencies(deps: {
        [module: string]: Semver;
    }, bundle?: boolean): void;
    /**
     * @deprecated use `addBundledDeps()`
     */
    addBundledDependencies(...deps: string[]): void;
    /**
     * @deprecated use `addDevDeps()`
     */
    addDevDependencies(deps: {
        [module: string]: Semver;
    }): void;
    /**
     * @deprecated use `addPeerDeps()`
     */
    addPeerDependencies(deps: {
        [module: string]: Semver;
    }, options?: PeerDependencyOptions): void;
    /**
     * (experimental) Replaces the contents of an npm package.json script.
     *
     * @param name The script name.
     * @param command The command to execute.
     * @experimental
     */
    setScript(name: string, command: string): void;
    /**
     * (experimental) Removes the npm script (always successful).
     *
     * @param name The name of the script.
     * @experimental
     */
    removeScript(name: string): void;
    /**
     * (experimental) Indicates if a script by the name name is defined.
     *
     * @param name The name of the script.
     * @experimental
     */
    hasScript(name: string): boolean;
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.compileTask.exec()`
     */
    addCompileCommand(...commands: string[]): void;
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.testTask.exec()`
     */
    addTestCommand(...commands: string[]): void;
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.buildTask.exec()`
     */
    addBuildCommand(...commands: string[]): void;
    /**
     * (experimental) Directly set fields in `package.json`.
     *
     * @param fields The fields to set.
     * @experimental
     */
    addFields(fields: {
        [name: string]: any;
    }): void;
    /**
     * (experimental) Adds keywords to package.json (deduplicated).
     *
     * @param keywords The keywords to add.
     * @experimental
     */
    addKeywords(...keywords: string[]): void;
    /**
     * @experimental
     */
    get installWorkflowSteps(): any[];
    /**
     * (experimental) Defines normal dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDeps(...deps: string[]): void;
    /**
     * (experimental) Defines development/test dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDevDeps(...deps: string[]): void;
    /**
     * (experimental) Defines peer dependencies.
     *
     * When adding peer dependencies, a devDependency will also be added on the
     * pinned version of the declared peer. This will ensure that you are testing
     * your code against the minimum version required from your consumers.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addPeerDeps(...deps: string[]): void;
    /**
     * (experimental) Defines bundled dependencies.
     *
     * Bundled dependencies will be added as normal dependencies as well as to the
     * `bundledDependencies` section of your `package.json`.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addBundledDeps(...deps: string[]): void;
    private processDeps;
    /**
     * (experimental) Called before all components are synthesized.
     *
     * @experimental
     */
    preSynthesize(): void;
    /**
     * (experimental) Called after all components are synthesized.
     *
     * Order is *not* guaranteed.
     *
     * @experimental
     */
    postSynthesize(): void;
    private renderInstallCommand;
    private loadDependencies;
    private resolveDependencies;
    private addDefaultGitIgnore;
    private createBuildWorkflow;
    /**
     * (experimental) Returns the shell command to execute in order to run a task.
     *
     * If
     * npmTaskExecution is set to PROJEN, the command will be `npx projen TASK`.
     * If it is set to SHELL, the command will be `yarn run TASK` (or `npm run
     * TASK`).
     *
     * @param task The task for which the command is required.
     * @experimental
     */
    runTaskCommand(task: Task): string;
    private npmScriptForTask;
    private addRebuildBot;
}
/**
 * @experimental
 */
export interface PeerDependencyOptions {
    /**
     * (experimental) Automatically add a pinned dev dependency.
     *
     * @default true
     * @experimental
     */
    readonly pinnedDevDependency?: boolean;
}
/**
 * @experimental
 */
export interface NodeWorkflowSteps {
    /**
     * @experimental
     */
    readonly antitamper: any[];
    /**
     * @experimental
     */
    readonly install: any[];
}
