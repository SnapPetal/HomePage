"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VsCodeLaunchConfig = exports.InternalConsoleOptions = void 0;
const component_1 = require("../component");
const json_1 = require("../json");
/**
 * (experimental) Controls the visibility of the VSCode Debug Console panel during a debugging session Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes.
 *
 * @experimental
 */
var InternalConsoleOptions;
(function (InternalConsoleOptions) {
    InternalConsoleOptions["NEVER_OPEN"] = "neverOpen";
    InternalConsoleOptions["OPEN_ON_FIRST_SESSION_START"] = "openOnFirstSessionStart";
    InternalConsoleOptions["OPEN_ON_SESSION_START"] = "openOnSessionStart";
})(InternalConsoleOptions = exports.InternalConsoleOptions || (exports.InternalConsoleOptions = {}));
/**
 * (experimental) VSCode launch configuration file (launch.json), useful for enabling in-editor debugger.
 *
 * @experimental
 */
class VsCodeLaunchConfig extends component_1.Component {
    /**
     * @experimental
     */
    constructor(vscode) {
        super(vscode.project);
        this.content = {
            version: '0.2.0',
            configurations: [],
        };
        new json_1.JsonFile(vscode.project, '.vscode/launch.json', {
            obj: this.content,
        });
    }
    /**
     * (experimental) Adds a VsCodeLaunchConfigurationEntry (e.g. a node.js debugger) to `.vscode/launch.json. Each configuration entry has following mandatory fields: type, request and name. See https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes for details.
     *
     * @param cfg VsCodeLaunchConfigurationEntry.
     * @experimental
     */
    addConfiguration(cfg) {
        this.content.configurations.push(cfg);
    }
}
exports.VsCodeLaunchConfig = VsCodeLaunchConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF1bmNoLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92c2NvZGUvbGF1bmNoLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBeUM7QUFDekMsa0NBQW1DOzs7Ozs7QUFPbkMsSUFBWSxzQkFJWDtBQUpELFdBQVksc0JBQXNCO0lBQ2hDLGtEQUF3QixDQUFBO0lBQ3hCLGlGQUF1RCxDQUFBO0lBQ3ZELHNFQUE0QyxDQUFBO0FBQzlDLENBQUMsRUFKVyxzQkFBc0IsR0FBdEIsOEJBQXNCLEtBQXRCLDhCQUFzQixRQUlqQzs7Ozs7O0FBb0RELE1BQWEsa0JBQW1CLFNBQVEscUJBQVM7Ozs7SUFHL0MsWUFBWSxNQUFjO1FBQ3hCLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLGNBQWMsRUFBRSxFQUFFO1NBQ25CLENBQUM7UUFFRixJQUFJLGVBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFO1lBQ2xELEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTztTQUNsQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7O0lBUU0sZ0JBQWdCLENBQUMsR0FBbUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQXpCRCxnREF5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgSnNvbkZpbGUgfSBmcm9tICcuLi9qc29uJztcbmltcG9ydCB7IFZzQ29kZSB9IGZyb20gJy4vdnNjb2RlJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGVudW0gSW50ZXJuYWxDb25zb2xlT3B0aW9ucyB7XG4gIE5FVkVSX09QRU4gPSAnbmV2ZXJPcGVuJyxcbiAgT1BFTl9PTl9GSVJTVF9TRVNTSU9OX1NUQVJUID0gJ29wZW5PbkZpcnN0U2Vzc2lvblN0YXJ0JyxcbiAgT1BFTl9PTl9TRVNTSU9OX1NUQVJUID0gJ29wZW5PblNlc3Npb25TdGFydCcsXG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2VudGF0aW9uIHtcbiAgcmVhZG9ubHkgaGlkZGVuOiBib29sZWFuO1xuICByZWFkb25seSBncm91cDogc3RyaW5nO1xuICByZWFkb25seSBvcmRlcjogbnVtYmVyO1xufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlclJlYWR5QWN0aW9uIHtcbiAgcmVhZG9ubHkgYWN0aW9uOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHBhdHRlcm4/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHVyaUZvcm1hdD86IHN0cmluZztcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgVnNDb2RlTGF1bmNoQ29uZmlndXJhdGlvbkVudHJ5IHtcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuICByZWFkb25seSByZXF1ZXN0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgYXJncz86IHN0cmluZ1tdO1xuICByZWFkb25seSBkZWJ1Z1NlcnZlcj86IG51bWJlcjtcbiAgcmVhZG9ubHkgaW50ZXJuYWxDb25zb2xlT3B0aW9ucz86IEludGVybmFsQ29uc29sZU9wdGlvbnM7XG4gIHJlYWRvbmx5IHJ1bnRpbWVBcmdzPzogc3RyaW5nW107XG4gIHJlYWRvbmx5IHBvc3REZWJ1Z1Rhc2s/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByZUxhdW5jaFRhc2s/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByZXNlbnRhdGlvbj86IFByZXNlbnRhdGlvbjtcbiAgcmVhZG9ubHkgcHJvZ3JhbT86IHN0cmluZztcbiAgcmVhZG9ubHkgc2VydmVyUmVhZHlBY3Rpb24/OiBTZXJ2ZXJSZWFkeUFjdGlvbjtcbiAgcmVhZG9ubHkgc2tpcEZpbGVzPzogc3RyaW5nW107XG4gIHJlYWRvbmx5IG91dEZpbGVzPzogc3RyaW5nW107XG4gIHJlYWRvbmx5IHVybD86IHN0cmluZztcbiAgcmVhZG9ubHkgd2ViUm9vdD86IHN0cmluZztcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIFZzQ29kZUxhdW5jaENvbmZpZyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udGVudDogVnNDb2RlTGF1bmNoQ29uZmlndXJhdGlvbjtcblxuICBjb25zdHJ1Y3Rvcih2c2NvZGU6IFZzQ29kZSkge1xuICAgIHN1cGVyKHZzY29kZS5wcm9qZWN0KTtcblxuICAgIHRoaXMuY29udGVudCA9IHtcbiAgICAgIHZlcnNpb246ICcwLjIuMCcsXG4gICAgICBjb25maWd1cmF0aW9uczogW10sXG4gICAgfTtcblxuICAgIG5ldyBKc29uRmlsZSh2c2NvZGUucHJvamVjdCwgJy52c2NvZGUvbGF1bmNoLmpzb24nLCB7XG4gICAgICBvYmo6IHRoaXMuY29udGVudCxcbiAgICB9KTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgYWRkQ29uZmlndXJhdGlvbihjZmc6IFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb25FbnRyeSkge1xuICAgIHRoaXMuY29udGVudC5jb25maWd1cmF0aW9ucy5wdXNoKGNmZyk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIFZzQ29kZUxhdW5jaENvbmZpZ3VyYXRpb24ge1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGNvbmZpZ3VyYXRpb25zOiBWc0NvZGVMYXVuY2hDb25maWd1cmF0aW9uRW50cnlbXTtcbn1cbiJdfQ==